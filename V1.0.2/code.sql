# Host: localhost  (Version: 5.5.53)
# Date: 2017-08-15 09:16:24
# Generator: MySQL-Front 5.3  (Build 4.234)

/*!40101 SET NAMES utf8 */;

#
# Structure for table "card_address"
#

DROP TABLE IF EXISTS `card_address`;
CREATE TABLE `card_address` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `pid` int(11) NOT NULL COMMENT '父级ID',
  `name` varchar(20) NOT NULL DEFAULT '' COMMENT '姓名',
  `sex` varchar(1) NOT NULL DEFAULT '男' COMMENT '性别',
  `birthday` varchar(11) NOT NULL DEFAULT '' COMMENT '出生日期',
  `id_card` varchar(18) NOT NULL DEFAULT '' COMMENT '身份证号码',
  `phone` varchar(20) NOT NULL DEFAULT '' COMMENT '手机号码',
  `weixin` varchar(255) NOT NULL DEFAULT '' COMMENT '微信号',
  `email` varchar(255) NOT NULL DEFAULT '' COMMENT '邮箱',
  `address` varchar(255) NOT NULL DEFAULT '' COMMENT '住址',
  `avatar` varchar(255) NOT NULL DEFAULT '' COMMENT '头像',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=18 DEFAULT CHARSET=utf8 COMMENT='通讯簿';

#
# Data for table "card_address"
#

/*!40000 ALTER TABLE `card_address` DISABLE KEYS */;
INSERT INTO `card_address` VALUES (2,32,'刘娟','女','734198400','362421199304081726','13527910425','','','',''),(3,32,'刘隆检','男','792518400','362421199502121717','18702629929','jiuyou95','jian34long@163.com','东莞虎门',''),(4,35,'陈仁焕','男','795456000','362421199503188331','18702531167','','','',''),(5,35,'胡俊林','男','796147200','362421199503265018','13407962024','','','',''),(6,32,'刘茂华','男','-20419200','362421196905101717','13631740865','','','',''),(7,35,'李先福','男','777484800','362421199408221738','13479661915','','','',''),(8,36,'徐方明','男','367344000','362321198108238116','18925468086','','','',''),(9,32,'谢桂妹','女','21052800','362421197009021721','15876465094','','','',''),(10,34,'肖珊','女','801417600','362204199505265129','15279105210','','','',''),(11,33,'谢世良','男','348940800','362421198101222010','13724236707','','','',''),(12,35,'肖正亮','男','783619200','362421199411010819','18770794610','','','',''),(13,36,'尤鲜红','女','353347200','362323198103148122','','','','',''),(14,34,'张亮','男','730396800','360428199302235114','18702531411','','','',''),(15,35,'钟亮','男','755625600','36242119931212831','187 0253 0722','','','','');
/*!40000 ALTER TABLE `card_address` ENABLE KEYS */;

#
# Structure for table "card_admin"
#

DROP TABLE IF EXISTS `card_admin`;
CREATE TABLE `card_admin` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(20) NOT NULL COMMENT '用户名',
  `nickname` varchar(20) NOT NULL COMMENT '昵称',
  `avatar` varchar(255) NOT NULL COMMENT '用户头像，相对于upload/avatar目录',
  `password` char(32) NOT NULL COMMENT '密码',
  `phone` bigint(11) NOT NULL COMMENT '手机号码',
  `email` varchar(100) NOT NULL DEFAULT '' COMMENT '登录邮箱',
  `address` varchar(255) NOT NULL DEFAULT '' COMMENT '住址',
  `status` tinyint(1) NOT NULL DEFAULT '2' COMMENT '用户状态 3：锁定； 1：正常 ；2：未验证',
  `regtime` int(11) NOT NULL COMMENT '注册时间',
  `loginip` varchar(20) NOT NULL COMMENT '最近一次登陆ip',
  `logintime` int(11) NOT NULL COMMENT '最近一次登陆时间',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='用户表';

#
# Data for table "card_admin"
#

/*!40000 ALTER TABLE `card_admin` DISABLE KEYS */;
INSERT INTO `card_admin` VALUES (1,'admin','九幽','5960325b36aca.jpg','b7a1b6d08af8f9fbc5c009889bb4b165',18702629929,'jian34long@163.com','中国广东',1,1497332555,'127.0.0.1',1502240080),(4,'JIUYOU','游帝','','d41d8cd98f00b204e9800998ecf8427e',110,'1547560934@qq.com','',3,1498531975,'127.0.0.1',1499820814);
/*!40000 ALTER TABLE `card_admin` ENABLE KEYS */;

#
# Structure for table "card_auth_group"
#

DROP TABLE IF EXISTS `card_auth_group`;
CREATE TABLE `card_auth_group` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `title` char(100) NOT NULL DEFAULT '' COMMENT '分组名称',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '状态',
  `rules` char(80) NOT NULL DEFAULT '' COMMENT '权限',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COMMENT='用户组表';

#
# Data for table "card_auth_group"
#

/*!40000 ALTER TABLE `card_auth_group` DISABLE KEYS */;
INSERT INTO `card_auth_group` VALUES (1,'管理员',1,'1,2,4,5,6,7,8,9,24,3,10,11,12,13,14,20,21,22,23,15'),(3,'编辑',1,'1,25,2,34,29,30,31,32,36,40,41,42,43,44,37,38,50,51,52,39,53');
/*!40000 ALTER TABLE `card_auth_group` ENABLE KEYS */;

#
# Structure for table "card_auth_group_access"
#

DROP TABLE IF EXISTS `card_auth_group_access`;
CREATE TABLE `card_auth_group_access` (
  `uid` mediumint(8) unsigned NOT NULL DEFAULT '0' COMMENT '用户ID',
  `group_id` mediumint(8) unsigned NOT NULL DEFAULT '0' COMMENT '用户组ID',
  UNIQUE KEY `uid_group_id` (`uid`,`group_id`),
  KEY `uid` (`uid`),
  KEY `group_id` (`group_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='用户和组对应关系表';

#
# Data for table "card_auth_group_access"
#

/*!40000 ALTER TABLE `card_auth_group_access` DISABLE KEYS */;
INSERT INTO `card_auth_group_access` VALUES (4,3);
/*!40000 ALTER TABLE `card_auth_group_access` ENABLE KEYS */;

#
# Structure for table "card_auth_rule"
#

DROP TABLE IF EXISTS `card_auth_rule`;
CREATE TABLE `card_auth_rule` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `pid` int(11) NOT NULL DEFAULT '0' COMMENT '父级ID',
  `name` char(80) NOT NULL DEFAULT '' COMMENT '地址路径',
  `title` char(20) NOT NULL DEFAULT '' COMMENT '规则名称',
  `type` tinyint(1) NOT NULL DEFAULT '1',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '状态',
  `condition` char(100) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=MyISAM AUTO_INCREMENT=54 DEFAULT CHARSET=utf8 COMMENT='规则表';

#
# Data for table "card_auth_rule"
#

/*!40000 ALTER TABLE `card_auth_rule` DISABLE KEYS */;
INSERT INTO `card_auth_rule` VALUES (1,0,'Admin/Index/index','后台首页',1,1,''),(2,0,'Admin/ShowNav/config','系统设置',1,1,''),(3,0,'Admin/ShowNav/rule','权限控制',1,1,''),(4,2,'Admin/Nav/index','菜单管理',1,1,''),(6,4,'Admin/Nav/add','添加菜单',1,1,''),(7,4,'Admin/Nav/edit','修改菜单',1,1,''),(8,4,'Admin/Nav/delete','删除菜单',1,1,''),(9,4,'Admin/Nav/order','菜单排序',1,1,''),(10,3,'Admin/Rule/index','权限管理',1,1,''),(11,10,'Admin/Rule/add','添加权限',1,1,''),(12,10,'Admin/Rule/edit','修改权限',1,1,''),(13,10,'Admin/Rule/delete','删除权限',1,1,''),(14,3,'Admin/Rule/group','用户组管理',1,1,''),(15,3,'Admin/Rule/admin_user_list','管理员列表',1,1,''),(20,14,'Admin/Rule/add_group','添加用户组',1,1,''),(21,14,'Admin/Rule/edit_group','修改用户组',1,1,''),(22,14,'Admin/Rule/delete_group','删除用户组',1,1,''),(23,14,'Admin/Rule/rule_group','分配权限',1,1,''),(24,2,'Admin/Config/index','系统设置',1,1,''),(25,1,'Admin/Index/Welcome','欢迎页面',1,1,''),(26,24,'Admin/Config/add','配置新增',1,1,''),(27,24,'Admin/Config/edit','配置更新',1,1,''),(29,0,'Admin/ShowNav/user','个人中心',1,1,''),(30,29,'Admin/User/index','基本资料',1,1,''),(31,30,'Admin/User/avatar','头像更新',1,1,''),(32,30,'Admin/User/edit_password','密码更新',1,1,''),(33,2,'Admin/Config/log','系统日志',1,1,''),(34,33,'Admin/Config/add_log','日志写入',1,1,''),(35,33,'Admin/Config/alldel','日志删除',1,1,''),(36,29,'Admin/User/address','通讯录',1,1,''),(37,0,'Admin/ShowNav/front','前端资料',1,1,''),(38,37,'Admin/Front/font','字体图标',1,1,''),(39,37,'Admin/Front/color','颜色',1,1,''),(40,36,'Admin/User/ajax_address','下拉获取',1,1,''),(41,36,'Admin/User/read_address','个人资料',1,1,''),(42,36,'Admin/User/add_address','新增通讯录',1,1,''),(43,36,'Admin/User/edit_address','通讯录修改',1,1,''),(44,36,'Admin/User/del_address','通讯录删除',1,1,''),(45,2,'Admin/Config/type','分类列表',1,1,''),(46,45,'Admin/Config/add_type','分类新增',1,1,''),(47,45,'Admin/Config/edit_type','分类修改',1,1,''),(48,45,'Admin/Config/del_type','分类删除',1,1,''),(49,45,'Admin/Config/order_type','分类排序',1,1,''),(50,38,'Admin/Front/add_font','新增字体图标',1,1,''),(51,38,'Admin/Front/edit_font','修改字体图标',1,1,''),(52,38,'Admin/Front/del_font','删除字体图标',1,1,''),(53,39,'Admin/Front/add_color','新增颜色',1,1,'');
/*!40000 ALTER TABLE `card_auth_rule` ENABLE KEYS */;

#
# Structure for table "card_color"
#

DROP TABLE IF EXISTS `card_color`;
CREATE TABLE `card_color` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `zh_name` varchar(20) NOT NULL DEFAULT '',
  `en_name` varchar(20) NOT NULL DEFAULT '' COMMENT '英文',
  `color` varchar(20) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=88 DEFAULT CHARSET=utf8 COMMENT='颜色';

#
# Data for table "card_color"
#

/*!40000 ALTER TABLE `card_color` DISABLE KEYS */;
INSERT INTO `card_color` VALUES (2,'外绯红','','#C91F37'),(3,'红橙','','#DC3023'),(4,'胭脂红','','#9D2933'),(5,'蒙扎','','#CF000F'),(6,'棕色','','#E68364'),(7,'石榴','','#F22613'),(8,'猩红色','','#CF3A24'),(9,'纯绯红','','#C3272B'),(10,'真红','','#8F1D21'),(11,'栗子玫瑰','','#D24D57'),(12,'染料','','#F08F90'),(13,'桃色','','#F47983'),(14,'红梅色','','#DB5A6B'),(15,'中深红','','#C93756'),(16,'樱花色','','#FCC9B9'),(17,'水洗深红','','#FFB3A7'),(18,'激进的红色','','#F62459'),(19,'宜必思翼彩','','#F58F84'),(20,'紫藤','','#875F9A'),(21,'风铃草','','#5D3F6A'),(22,'紫藤色','','#89729E'),(23,'虹膜颜色','','#763568'),(24,'纹身师颜色','','#8D608C'),(25,'薄色','','#A87CA0'),(26,'紫罗兰色','','#5B3256'),(27,'中号紫色','','#BF55EC'),(28,'！！！','','#8E44AD'),(29,'紫藤','','#9B59B6'),(30,'光的紫藤','','#BE90D4'),(31,'天空色','','#4D8FAC'),(32,'群青色','','#5D8CAE'),(33,'比克顿蓝','','#22A7F0'),(34,'道奇蓝','','#19B5FE'),(35,'比克顿蓝','','#59ABE3'),(36,'浅蓝色','','#48929B'),(37,'千草','','#317589'),(38,'乔迪蓝','','#89C4F4'),(39,'钢蓝','','#4B77BE'),(40,'青金石颜色','','#1F4788'),(41,'海军蓝色','','#003171'),(42,'花田','','#044F67'),(43,'靛蓝颜色','','#264348'),(44,'黄雀芽黄','','#7A942E'),(45,'年轻绿洋葱','','#8DB255'),(46,'新鲜洋葱','','#5B8930'),(47,'年轻竹色','','#6B9362'),(48,'铜绿','','#407A52'),(49,'绿竹','','#006442'),(50,'八卦','','#87D37C'),(51,'桉树','','#26A65B'),(52,'丛林绿色','','#26C281'),(53,'天文台','','#049372'),(54,'丛林绿','','#2ABB9B'),(55,'山地草甸','','#16A085'),(56,'绿松石','','#36D7B7'),(57,'海蓝宝石','','#03A678'),(58,'海洋绿','','#4DAF7C'),(59,'败酱花','','#D9B611'),(60,'黄檗','','#F3C13A'),(61,'成熟的柠檬','','#F7CA18'),(62,'枯黄的草','','#E2B13C'),(63,'油菜籽油','','#A17917'),(64,'奶油','','#F5D76E'),(65,'藏红花','','#F4D03F'),(66,'明亮的金黄色','','#FFA400'),(67,'漆树染织','','#E08A1E'),(68,'藤黄','','#FFB61E'),(69,'玉米','','#FAA945'),(70,'鸡蛋','','#FFA631'),(71,'花叶','','#FFB94E'),(72,'金黄的落叶','','#E29C45'),(73,'狂喜','','#F9690E'),(74,'琥珀','','#CA6924'),(75,'雷电黄色','','#F5AB35'),(76,'银','','#BFBFBF'),(77,'灰白','','#F2F1EF'),(78,'银沙','','#BDC3C7'),(79,'瓷','','#ECF0F1'),(80,'浮石','','#D2D7D3'),(81,'港大鼠','','#757D75'),(82,'画廊','','#EEEEEE'),(83,'爱德华','','#ABB7B7'),(84,'林奇','','#6C7A89'),(85,'级联','','#95A5A6'),(86,'浅粉红','LightPink','#FFB6C1'),(87,'粉红','Pink','#FFC0CB');
/*!40000 ALTER TABLE `card_color` ENABLE KEYS */;

#
# Structure for table "card_config"
#

DROP TABLE IF EXISTS `card_config`;
CREATE TABLE `card_config` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `configname` varchar(60) NOT NULL COMMENT '配置名称',
  `info` varchar(255) NOT NULL COMMENT '配置说明',
  `content` text NOT NULL COMMENT '详细内容',
  `type` varchar(255) NOT NULL COMMENT '配置类型',
  `optime` int(11) NOT NULL DEFAULT '0' COMMENT '管理员操作时间',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='系统设置';

#
# Data for table "card_config"
#

/*!40000 ALTER TABLE `card_config` DISABLE KEYS */;
INSERT INTO `card_config` VALUES (1,'cfg_name','网站名称','Code Help','string',1501568680),(2,'cfg_keywords','网站关键字','内容管理系统','string',1501568680),(3,'cfg_description','网站描述','这是基于Auth权限的管理系统','bstring',0),(4,'cfg_powerby','网站底部版权','CopyRight © 2016 九幽IT 版权所有 粤ICP备16060013号-1','string',1501568680),(5,'cfg_log','网站后台操作日志','Y','bool',1497843844),(6,'cfg_url','网站地址','http://code.itnetve.com','string',1501568680),(7,'cfg_verify','登录验证码','N','bool',1498630164),(8,'cfg_prefix','SESSION前缀','PzSEa7038A_','string',1501568680);
/*!40000 ALTER TABLE `card_config` ENABLE KEYS */;

#
# Structure for table "card_font"
#

DROP TABLE IF EXISTS `card_font`;
CREATE TABLE `card_font` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `pid` int(11) NOT NULL DEFAULT '0',
  `zh_name` varchar(255) NOT NULL DEFAULT '' COMMENT '中文含义',
  `en_name` varchar(255) NOT NULL DEFAULT '' COMMENT '英文显示',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=1270 DEFAULT CHARSET=utf8 COMMENT='字体图标';

#
# Data for table "card_font"
#

/*!40000 ALTER TABLE `card_font` DISABLE KEYS */;
INSERT INTO `card_font` VALUES (1,5,'地址薄','address-book'),(2,5,'地址薄','address-book-o'),(3,5,'地址卡','address-card'),(4,5,'地址卡','address-card-o'),(5,5,'','bandcamp'),(6,5,'浴缸','bath'),(7,5,'浴缸','bathtub'),(8,5,'司机的许可证','drivers-license'),(9,5,'司机的许可证（化名）','drivers-license-o'),(10,5,'','eercast'),(11,5,'打开信封','envelope-open'),(12,5,'打开信封','envelope-open-o'),(13,5,'容易的','etsy'),(14,5,'无码营','free-code-camp'),(15,5,'重力','grav'),(16,5,'握手','handshake-o'),(17,5,'ID徽章','id-badge'),(18,5,'ID卡','id-card'),(19,5,'ID卡','id-card-o'),(20,5,'互联网电影数据库','imdb'),(21,5,'','linode'),(22,5,'Meetup网站','meetup'),(23,5,'微芯片','microchip'),(24,5,'播客','podcast'),(25,5,'','quora'),(26,5,'','ravelry'),(27,5,'','s15'),(28,5,'淋浴','shower'),(29,5,'雪花','snowflake-o'),(30,5,'超级大国','superpowers'),(31,5,'电报','telegram'),(32,5,'温度计','thermometer'),(33,5,'温度计','thermometer-0'),(34,5,'温度计','thermometer-1'),(35,5,'温度计','thermometer-2'),(36,5,'温度计','thermometer-3'),(37,5,'温度计','thermometer-4'),(38,5,'温度计-空','thermometer-empty'),(39,5,'温度计-全','thermometer-full'),(40,5,'温度计-帮助','thermometer-half'),(41,5,'温度计-1/4','thermometer-quarter'),(42,5,'温度计-3/4','thermometer-three-quarters'),(43,5,'次矩形','times-rectangle'),(44,5,'次矩形','times-rectangle-o'),(45,5,'用户界','user-circle'),(46,5,'用户界','user-circle-o'),(47,5,'用户','user-o'),(48,5,'名片','vcard'),(49,5,'名片','vcard-o'),(50,5,'关闭窗口','window-close'),(51,5,'关闭窗口','window-close-o'),(52,5,'窗口最大化','window-maximize'),(53,5,'窗口最小化','window-minimize'),(54,5,'窗口还原','window-restore'),(55,5,'','wpexplorer'),(56,21,'','500px'),(57,21,'','adn'),(58,21,'亚马逊','amazon'),(59,21,'安卓','android'),(60,21,'','angellist'),(61,21,'苹果','apple'),(62,21,'','bandcamp'),(63,21,'','behance'),(64,21,'','behance-square'),(65,21,'位桶','bitbucket'),(66,21,'位桶平方','bitbucket-square'),(67,21,'比特币','bitcoin'),(68,21,'黑领带','black-tie'),(69,22,'救护车','ambulance'),(70,22,'','h-square'),(71,22,'心','heart'),(72,22,'心','heart-o'),(73,22,'心跳','heartbeat'),(74,22,'医院','hospital-o'),(75,22,'急救包','medkit'),(76,22,'加方','plus-square'),(77,22,'听诊器','stethoscope'),(78,22,'用户MD','user-md'),(79,22,'轮椅','wheelchair'),(80,22,'轮椅ALT','wheelchair-alt'),(81,21,'蓝牙','bluetooth'),(82,21,'蓝牙','bluetooth-b'),(83,21,'','btc'),(84,21,'','buysellads'),(85,21,'直流-美国运通','cc-amex'),(86,21,'就餐者俱乐部','cc-diners-club'),(87,21,'发现','cc-discover'),(88,21,'','cc-jcb'),(89,21,'万事达卡','cc-mastercard'),(90,21,'PayPal支付','cc-paypal'),(91,21,'条纹','cc-stripe'),(92,21,'签证','cc-visa'),(93,21,'谷歌浏览器','chrome'),(94,21,'相互依赖','codepen'),(95,21,'','codiepie'),(96,21,'连接建立','connectdevelop'),(97,21,'','contao'),(98,21,'CSS3样式','css3'),(99,21,'短跑的立方体','dashcube'),(100,21,'美味的','delicious'),(101,21,'离经叛道的艺术','deviantart'),(102,21,'掘客','digg'),(103,21,'运球','dribbble'),(104,21,'碉堡箱','dropbox'),(105,21,'内容管理系统','drupal'),(106,21,'优势','edge'),(107,21,'德投','eercast'),(108,21,'帝国','empire'),(109,21,'整个的','envira'),(110,21,'容易的','etsy'),(111,21,'加速SSL','expeditedssl'),(112,21,'','fa'),(113,21,'脸谱网','facebook'),(114,21,'脸谱网','facebook-f'),(115,21,'脸谱网-官方的','facebook-official'),(116,21,'脸谱网-广场','facebook-square'),(117,21,'火狐浏览器','firefox'),(118,21,'一阶','first-order'),(119,21,'相片分享','flickr'),(120,21,'Font-Awesome字体','font-awesome'),(121,21,'字体图标','fonticons'),(122,21,'堡垒','fort-awesome'),(123,21,'论坛的蜜蜂','forumbee'),(124,21,'正方形的','foursquare'),(125,21,'无码营','free-code-camp'),(126,21,'','ge'),(127,21,'把口袋','get-pocket'),(128,21,'','gg'),(129,21,'圆圈','gg-circle'),(130,21,'GIT','git'),(131,21,'直角的git','git-square'),(132,21,'GitHub','github'),(133,21,'GitHub-ALT','github-alt'),(134,21,'正直地GitHub','github-square'),(135,21,'','gitlab'),(136,21,'','gittip'),(137,21,'滑翔','glide'),(138,21,'滑翔','glide-g'),(139,21,'谷歌','google'),(140,21,'谷歌加','google-plus'),(141,21,'谷歌加了一圈','google-plus-circle'),(142,21,'谷歌加官方','google-plus-official'),(143,21,'谷歌联合广场','google-plus-square'),(144,21,'谷歌钱包','google-wallet'),(145,21,'无偿付出','gratipay'),(146,21,'重力','grav'),(147,21,'黑客新闻','hacker-news'),(148,21,'','houzz'),(149,21,'HTML5','html5'),(150,21,'互联网电影数据库','imdb'),(151,21,'一款应用程序','instagram'),(152,21,'互联网-ie','internet-explorer'),(153,21,'','ioxhost'),(154,21,'模板','joomla'),(155,21,'小提琴','jsfiddle'),(156,21,'最后一次调频','lastfm'),(157,21,'方形-最后一次调频','lastfm-square'),(158,21,'','leanpub'),(159,21,'商务化人际关系网','linkedin'),(160,21,'方形-商务化人际关系网','linkedin-square'),(161,21,'','linode'),(162,21,'Linux','linux'),(163,21,'最大的CDN','maxcdn'),(164,21,'平均路径','meanpath'),(165,21,'中等的','medium'),(166,21,'Meetup网站','meetup'),(167,21,'混合云','mixcloud'),(168,21,'','modx'),(169,21,'同班同学','odnoklassniki'),(170,21,'方形-同班同学','odnoklassniki-square'),(171,21,'网店版','opencart'),(172,21,'开放式认证系统','openid'),(173,21,'歌剧','opera'),(174,21,'期权的怪物','optin-monster'),(175,21,'页的线','pagelines'),(176,21,'PayPal支付','paypal'),(177,21,'吹笛手','pied-piper'),(178,21,'吹笛者ALT','pied-piper-alt'),(179,21,'吹笛手的PP','pied-piper-pp'),(180,21,'照片分享网站','pinterest'),(181,21,'照片分享网站','pinterest-p'),(182,21,'方形-照片分享网站','pinterest-square'),(183,21,'产品搜寻','product-hunt'),(184,21,'QQ','qq'),(185,21,'','quora'),(186,21,'','ra'),(187,21,'','ravelry'),(188,21,'背叛','rebel'),(189,21,'红迪网','reddit'),(190,21,'红迪网-外星人','reddit-alien'),(191,21,'红迪网-方形','reddit-square'),(192,21,'人人网','renren'),(193,21,'抵抗','resistance'),(194,21,'游猎','safari'),(195,21,'','scribd'),(196,21,'','sellsy'),(197,21,'分享ALT','share-alt'),(198,21,'方形-分享ALT','share-alt-square'),(199,21,'衬衫散装','shirtsinbulk'),(200,21,'简单的建','simplybuilt'),(201,21,'阿特拉斯的天空','skyatlas'),(202,21,'网络电话','skype'),(203,21,'松弛','slack'),(204,21,'幻灯片分享','slideshare'),(205,21,'快速聊天','snapchat'),(206,21,'即时聊天','snapchat-ghost'),(207,21,'方形-快速聊天','snapchat-square'),(208,21,'云之声','soundcloud'),(209,21,'','spotify'),(210,21,'堆栈交换','stack-exchange'),(211,21,'栈溢出','stack-overflow'),(212,21,'蒸汽','steam'),(213,21,'方形-蒸汽','steam-square'),(214,21,'偶然发现','stumbleupon'),(215,21,'偶然发现圈','stumbleupon-circle'),(216,21,'超级大国','superpowers'),(217,21,'电报','telegram'),(218,21,'腾讯微博','tencent-weibo'),(219,21,'主题岛','themeisle'),(220,21,'','trello'),(221,21,'旅行顾问','tripadvisor'),(222,21,'微博客','tumblr'),(223,21,'方形-微博客','tumblr-square'),(224,21,'抽搐','twitch'),(225,21,'推特','twitter'),(226,21,'方形的推特','twitter-square'),(227,21,'USB接口','usb'),(228,21,'通路引线','viacoin'),(229,21,'','viadeo'),(230,21,'','viadeo-square'),(231,21,'','vimeo'),(232,21,'','vimeo-square'),(233,21,'藤','vine'),(234,21,'','vk'),(235,21,'微信','wechat'),(236,21,'新浪微博','weibo'),(237,21,'微信','weixin'),(238,21,'什么是应用程序','whatsapp'),(239,21,'维基百科','wikipedia-w'),(240,21,'Windows操作系统','windows'),(241,21,'Wordpress主题','wordpress'),(242,21,'WP初学者','wpbeginner'),(243,21,'WP浏览器','wpexplorer'),(244,21,'WP表格','wpforms'),(245,21,'','xing'),(246,21,'','xing-square'),(247,21,'Y-组合','y-combinator'),(248,21,'Y-方形组合','y-combinator-square'),(249,21,'雅虎','yahoo'),(250,21,'','yc'),(251,21,'','yc-square'),(252,21,'兴奋','yelp'),(253,21,'','yoast'),(254,21,'YouTube','youtube'),(255,21,'YouTube上播放','youtube-play'),(256,21,'方块-YouTube','youtube-square'),(257,20,'窗口最大','arrows-alt'),(258,20,'向后的','backward'),(259,20,'窗口缩小','compress'),(260,20,'弹出','eject'),(261,20,'扩大','expand'),(262,20,'快速后退','fast-backward'),(263,20,'快速前进','fast-forward'),(264,20,'向前地','forward'),(265,20,'暂停','pause'),(266,20,'圈暂停','pause-circle'),(267,20,'圈暂停','pause-circle-o'),(268,20,'播放','play'),(269,20,'播放-圈','play-circle'),(270,20,'播放-圈','play-circle-o'),(271,20,'随机','random'),(272,20,'后退一步','step-backward'),(273,20,'向前一步','step-forward'),(274,20,'停止','stop'),(275,20,'停止循环','stop-circle'),(276,20,'停止循环','stop-circle-o'),(277,20,'YouTube播放','youtube-play'),(278,16,'面积图','area-chart'),(279,16,'条形图','bar-chart'),(280,16,'条形图','bar-chart-o'),(281,16,'折线图','line-chart'),(282,16,'饼状图表','pie-chart'),(283,15,'美国运股票交易所','cc-amex'),(284,15,'用餐者俱乐部','cc-diners-club'),(285,15,'发现','cc-discover'),(286,15,'JCB卡','cc-jcb'),(287,15,'万事达信用卡','cc-mastercard'),(288,15,'PayPal支付','cc-paypal'),(289,15,'条纹','cc-stripe'),(290,15,'维萨信用卡','cc-visa'),(291,15,'信用卡','credit-card'),(292,15,'信用卡','credit-card-alt'),(293,15,'谷歌钱包','google-wallet'),(294,15,'PayPal支付','paypal'),(295,14,'检查方形','check-square'),(296,14,'检查方形','check-square-o'),(297,14,'圆圈','circle'),(298,14,'圆圈','circle-o'),(299,14,'点圈','dot-circle-o'),(300,14,'负-方块','minus-square'),(301,14,'负-方块','minus-square-o'),(302,14,'加-方块','plus-square'),(303,14,'加方块','plus-square-o'),(304,14,'方块','square'),(305,14,'方块','square-o'),(306,13,'圆圈-缺口','circle-o-notch'),(307,13,'钝齿','cog'),(308,13,'齿轮','gear'),(309,13,'刷新','refresh'),(310,13,'微调','spinner'),(311,19,'角度双降示例','angle-double-down'),(312,19,'角 - 双左','angle-double-left'),(313,19,'角度双右的','angle-double-right'),(314,19,'角度叠加的','angle-double-up'),(315,19,'角度降低的例子','angle-down'),(316,19,'左角','angle-left'),(317,19,'角右','angle-right'),(318,19,'倾斜','angle-up'),(319,19,'箭头向下的','arrow-circle-down'),(320,19,'箭头 -左','arrow-circle-left'),(321,19,'箭头圆圈向下的示例','arrow-circle-o-down'),(322,19,'箭头 - 左 - 左的','arrow-circle-o-left'),(323,19,'箭头 - 右','arrow-circle-o-right'),(324,19,'箭头向上的','arrow-circle-o-up'),(325,19,'箭头 - 圆圈- 右','arrow-circle-right'),(326,19,'箭头向上的','arrow-circle-up'),(327,19,'箭头向下的','arrow-down'),(328,19,'左箭头','arrow-left'),(329,19,'箭头右侧','arrow-right'),(330,19,'箭头上','arrow-up'),(331,19,'箭头','arrows'),(332,19,'箭头alt','arrows-alt'),(333,19,'箭头横向','arrows-h'),(334,19,'箭头纵向','arrows-v'),(335,19,'插入符号向下','caret-down'),(336,19,'插入符号左侧的','caret-left'),(337,19,'箭头符号右侧','caret-right'),(338,19,'插入符向上','caret-up'),(339,19,'插入符号向下的','caret-square-o-down'),(340,19,'插入符号左侧的示例','caret-square-o-left'),(341,19,'插入符号右对齐的','caret-square-o-right'),(342,19,'插入符号上侧','caret-square-o-up'),(343,19,'人字形向下的','chevron-circle-down'),(344,19,'V形圆的左','chevron-circle-left'),(345,19,'V形圈右的','chevron-circle-right'),(346,19,'人字形向上的','chevron-circle-up'),(347,19,'雪佛龙的下','chevron-down'),(348,19,'雪佛龙左的','chevron-left'),(349,19,'雪佛龙右的','chevron-right'),(350,19,'雪佛龙上的','chevron-up'),(351,19,'双向','exchange'),(352,19,'手动下拉','hand-o-down'),(353,19,'左手的','hand-o-left'),(354,19,'右手的','hand-o-right'),(355,19,'手指向上','hand-o-up'),(356,19,'向下箭头','long-arrow-down'),(357,19,'向左箭头','long-arrow-left'),(358,19,'向右箭头','long-arrow-right'),(359,19,'向上箭头','long-arrow-up'),(360,19,'切换-下','toggle-down'),(361,19,'切换-左','toggle-left'),(362,19,'切换-右','toggle-right'),(363,19,'切换-上','toggle-up'),(364,18,'对齐中心','align-center'),(365,18,'对齐的','align-justify'),(366,18,'对齐左边的','align-left'),(367,18,'对齐右的','align-right'),(368,18,'粗体','bold'),(369,18,'链接','chain'),(370,18,'取消链接','chain-broken'),(371,18,'剪贴板','clipboard'),(372,18,'列','columns'),(373,18,'复制','copy'),(374,18,'剪切','cut'),(375,18,'向左缩进','dedent'),(376,18,'向左缩进','outdent'),(377,18,'橡皮擦的','eraser'),(378,18,'文件','file'),(379,18,'文件-空白','file-o'),(380,18,'text文件','file-text'),(381,18,'空白的text文件','file-text-o'),(382,18,'文件夹','files-o'),(383,18,'软盘','floppy-o'),(384,18,'字体','font'),(385,18,'标题','header'),(386,18,'缩进','indent'),(387,18,'斜体','italic'),(388,18,'链接','link'),(389,18,'列表','list'),(390,18,'列表','list-alt'),(391,18,'数字列表','list-ol'),(392,18,'ul列表','list-ul'),(393,18,'回形针','paperclip'),(394,18,'段落','paragraph'),(395,18,'粘贴','paste'),(396,18,'重复','repeat'),(397,18,'旋转左','rotate-left'),(398,18,'旋转右','rotate-right'),(399,18,'保存','save'),(400,18,'剪刀','scissors'),(401,18,'删除线的','strikethrough'),(402,18,'下标','subscript'),(403,18,'上标','superscript'),(404,18,'表格','table'),(405,18,'文本高度','text-height'),(406,18,'文本宽度','text-width'),(407,18,'表格的th','th'),(408,18,'大型的','th-large'),(409,18,'列表','th-list'),(410,18,'下划线','underline'),(411,18,'撤销','undo'),(412,18,'取消链接','unlink'),(413,17,'比特币','bitcoin'),(414,17,'BTC','btc'),(415,17,'人民币','cny'),(416,17,'美元','dollar'),(417,17,'','eur'),(418,17,'欧元','euro'),(419,17,'','gbp'),(420,17,'','gg'),(421,17,'','gg-circle'),(422,17,'','ils'),(423,17,'','inr'),(424,17,'','jpy'),(425,17,'','krw'),(426,17,'','money'),(427,17,'人民币','rmb'),(428,17,'卢布','rouble'),(429,17,'','rub'),(430,17,'卢布','ruble'),(431,17,'卢比','rupee'),(432,17,'','shekel'),(433,17,'','sheqel'),(434,17,'','try'),(435,17,'土耳其里拉','turkish-lira'),(436,17,'','usd'),(437,17,'','won'),(438,17,'日元','yen'),(439,12,'文件','file'),(440,12,'文件存档','file-archive-o'),(441,12,'音频文件','file-audio-o'),(442,12,'代码文件','file-code-o'),(443,12,'excel文件','file-excel-o'),(444,12,'图片文件','file-image-o'),(445,12,'电影文件','file-movie-o'),(446,12,'空白文件','file-o'),(447,12,'pdf文件','file-pdf-o'),(448,12,'图片文件','file-photo-o'),(449,12,'图片文件','file-picture-o'),(450,12,'ppt文件','file-powerpoint-o'),(451,12,'声音文件','file-sound-o'),(452,12,'text文件','file-text'),(453,12,'空白的text文件','file-text-o'),(454,12,'视频文件','file-video-o'),(455,12,'word文件','file-word-o'),(456,12,'zip文件','file-zip-o'),(457,10,'无性别','genderless'),(458,10,'阴阳人','intersex'),(459,10,'火星人','mars'),(460,10,'两个火星人','mars-double'),(461,10,'','mars-stroke'),(462,10,'','mars-stroke-h'),(463,10,'','mars-stroke-v'),(464,10,'水星人','mercury'),(465,10,'中性','neuter'),(466,10,'变性人','transgender'),(467,10,'变性人-alt','transgender-alt'),(468,10,'金星','venus'),(469,10,'双金星','venus-double'),(470,10,'火星金星','venus-mars'),(471,9,'救护车','ambulance'),(472,9,'汽车','automobile'),(473,9,'自行车','bicycle'),(474,9,'巴士','bus'),(475,9,'驾驶室','cab'),(476,9,'汽车','car'),(477,9,'战斗机','fighter-jet'),(478,9,'摩托车','motorcycle'),(479,9,'飞机','plane'),(480,9,'火箭','rocket'),(481,9,'船舶','ship'),(482,9,'航天飞机','space-shuttle'),(483,9,'地铁','subway'),(484,9,'出租车','taxi'),(485,9,'列车','train'),(486,9,'卡车','truck'),(487,9,'轮椅','wheelchair'),(488,9,'','wheelchair-alt'),(489,8,'手抓','hand-grab-o'),(490,8,'手蜥蜴的','hand-lizard-o'),(491,8,'指下','hand-o-down'),(492,8,'指左','hand-o-left'),(493,8,'指右','hand-o-right'),(494,8,'指上','hand-o-up'),(495,8,'手掌','hand-paper-o'),(496,8,'好的','hand-peace-o'),(497,8,'手指u','hand-pointer-o'),(498,8,'拳头','hand-rock-o'),(499,8,'剪刀','hand-scissors-o'),(500,8,'手指猫','hand-spock-o'),(501,8,'手掌','hand-stop-o'),(502,8,'大拇指向下','thumbs-down'),(503,8,'大拇指向下','thumbs-o-down'),(504,8,'大拇指向上','thumbs-o-up'),(505,8,'大拇指向上','thumbs-up'),(506,7,'美国口语翻译','american-sign-language-interpreting'),(507,7,'美国口语翻译','asl-interpreting'),(508,7,'辅助听力系统','assistive-listening-systems'),(509,7,'音频描述','audio-description'),(510,7,'失明的','blind'),(511,7,'盲文','braille'),(512,7,'1212','cc'),(513,7,'聋哑','deaf'),(514,7,'耳聋','deafness'),(515,7,'硬的听力','hard-of-hearing'),(516,7,'低视力','low-vision'),(517,7,'问题','question-circle-o'),(518,7,'手语','sign-language'),(519,7,'签名','signing'),(520,7,'','tty'),(521,7,'通用访问','universal-access'),(522,7,'音量控制电话','volume-control-phone'),(523,7,'轮椅','wheelchair'),(524,7,'轮椅','wheelchair-alt'),(525,6,'地址簿','address-book'),(526,6,'地址簿','address-book-o'),(527,6,'地址卡','address-card'),(528,6,'地址卡','address-card-o'),(529,6,'调整','adjust'),(530,6,'美国口语翻译','american-sign-language-interpreting'),(531,6,'锚点','anchor'),(532,6,'存档','archive'),(533,6,'区域图','area-chart'),(534,6,'箭头','arrows'),(535,6,'箭头-横','arrows-h'),(536,6,'箭头-竖','arrows-v'),(537,6,'美国口语翻译','asl-interpreting'),(538,6,'辅助听力系统的','assistive-listening-systems'),(539,6,'星号','asterisk'),(540,6,'艾特','at'),(541,6,'音频描述','audio-description'),(542,6,'汽车','automobile'),(543,6,'平衡秤','balance-scale'),(544,6,'禁令','ban'),(545,6,'银行','bank'),(546,6,'条形图','bar-chart'),(547,6,'条形图','bar-chart-o'),(548,6,'条形码','barcode'),(549,6,'酒吧','bars'),(550,6,'洗澡','bath'),(551,6,'浴缸','bathtub'),(552,6,'电池','battery'),(553,6,'空格电池','battery-0'),(554,6,'一格电池','battery-1'),(555,6,'两格电池','battery-2'),(556,6,'三格电池','battery-3'),(557,6,'四格电池','battery-4'),(558,6,'空格电池','battery-empty'),(559,6,'电池充满','battery-full'),(560,6,'电池一半','battery-half'),(561,6,'电池季度','battery-quarter'),(562,6,'电池四分之三','battery-three-quarters'),(563,6,'床','bed'),(564,6,'啤酒','beer'),(565,6,'铃声','bell'),(566,6,'铃声','bell-o'),(567,6,'静音','bell-slash'),(568,6,'静音','bell-slash-o'),(569,6,'自行车','bicycle'),(570,6,'双筒望远镜','binoculars'),(571,6,'生日蛋糕','birthday-cake'),(572,6,'失明','blind'),(573,6,'蓝牙','bluetooth'),(574,6,'蓝牙','bluetooth-b'),(575,6,'闪电','bolt'),(576,6,'炸弹','bomb'),(577,6,'书','book'),(578,6,'书签','bookmark'),(579,6,'书签','bookmark-o'),(580,6,'盲文','braille'),(581,6,'公文包','briefcase'),(582,6,'甲壳虫','bug'),(583,6,'建筑','building'),(584,6,'建筑','building-o'),(585,6,'喇叭','bullhorn'),(586,6,'舷窗','bullseye'),(587,6,'巴士','bus'),(588,6,'驾驶室','cab'),(589,6,'计算器','calculator'),(590,6,'日历','calendar'),(591,6,'日历检查','calendar-check-o'),(592,6,'日历减去','calendar-minus-o'),(593,6,'日历','calendar-o'),(594,6,'日历加','calendar-plus-o'),(595,6,'日历时间','calendar-times-o'),(596,6,'相机','camera'),(597,6,'相机复古','camera-retro'),(598,6,'汽车','car'),(599,6,'插入符号-向下','caret-square-o-down'),(600,6,'插入符号-向左','caret-square-o-left'),(601,6,'插入符号-向右','caret-square-o-right'),(602,6,'插入符号-向上','caret-square-o-up'),(603,6,'加入购物车','cart-arrow-down'),(604,6,'加入购物车','cart-plus'),(605,6,'','cc'),(606,6,'证书','certificate'),(607,6,'检查','check'),(608,6,'检查-圈','check-circle'),(609,6,'检查-圈','check-circle-o'),(610,6,'检查-平方','check-square'),(611,6,'检查-平方','check-square-o'),(612,6,'孩子','child'),(613,6,'圈','circle'),(614,6,'圈','circle-o'),(615,6,'圆形凹口','circle-o-notch'),(616,6,'圆薄','circle-thin'),(617,6,'时钟','clock-o'),(618,6,'克隆','clone'),(619,6,'关闭','close'),(620,6,'云','cloud'),(621,6,'云下载','cloud-download'),(622,6,'云上传','cloud-upload'),(623,6,'代码','code'),(624,6,'代码分支','code-fork'),(625,6,'咖啡','coffee'),(626,6,'钝齿','cog'),(627,6,'齿轮','cogs'),(628,6,'评论','comment'),(629,6,'评论','comment-o'),(630,6,'评论','commenting'),(631,6,'评论','commenting-o'),(632,6,'评论','comments'),(633,6,'评论','comments-o'),(634,6,'指南针','compass'),(635,6,'版权','copyright'),(636,6,'创意共享','creative-commons'),(637,6,'信用卡','credit-card'),(638,6,'信用卡-替代','credit-card-alt'),(639,6,'截图','crop'),(640,6,'瞄准','crosshairs'),(641,6,'立方体','cube'),(642,6,'立方体','cubes'),(643,6,'餐具','cutlery'),(644,6,'仪表板','dashboard'),(645,6,'数据库','database'),(646,6,'聋哑','deaf'),(647,6,'耳聋','deafness'),(648,6,'桌面','desktop'),(649,6,'钻石','diamond'),(650,6,'点-圆','dot-circle-o'),(651,6,'下载','download'),(652,6,'驾驶执照','drivers-license'),(653,6,'驾驶执照','drivers-license-o'),(654,6,'编辑','edit'),(655,6,'省略号','ellipsis-h'),(656,6,'省略号','ellipsis-v'),(657,6,'信封','envelope'),(658,6,'信封','envelope-o'),(659,6,'打开信封','envelope-open'),(660,6,'打开信封','envelope-open-o'),(661,6,'包络线','envelope-square'),(662,6,'橡皮擦','eraser'),(663,6,'兑换','exchange'),(664,6,'惊叹号','exclamation'),(665,6,'惊叹号','exclamation-circle'),(666,6,'危险','exclamation-triangle'),(667,6,'外部链接','external-link'),(668,6,'外部链接','external-link-square'),(669,6,'眼睛','eye'),(670,6,'闭眼','eye-slash'),(671,6,'吸管','eyedropper'),(672,6,'传真','fax'),(673,6,'','feed'),(674,6,'女性','female'),(675,6,'战斗机','fighter-jet'),(676,6,'档案文件','file-archive-o'),(677,6,'音频文件','file-audio-o'),(678,6,'代码文件','file-code-o'),(679,6,'excel文件','file-excel-o'),(680,6,'图片文件','file-image-o'),(681,6,'电影文件','file-movie-o'),(682,6,'pdf文件','file-pdf-o'),(683,6,'图片文件','file-photo-o'),(684,6,'图片文件','file-picture-o'),(685,6,'ppt文件','file-powerpoint-o'),(686,6,'声音文件','file-sound-o'),(687,6,'视频文件','file-video-o'),(688,6,'word文件','file-word-o'),(689,6,'zip文件','file-zip-o'),(690,6,'电影','film'),(691,6,'过滤器','filter'),(692,6,'火','fire'),(693,6,'灭火器','fire-extinguisher'),(694,6,'标志','flag'),(695,6,'标志-格子','flag-checkered'),(696,6,'标志','flag-o'),(697,6,'闪存','flash'),(698,6,'烧瓶','flask'),(699,6,'文件夹','folder'),(700,6,'文件夹','folder-o'),(701,6,'打开文件夹','folder-open'),(702,6,'打开文件夹','folder-open-o'),(703,6,'皱眉','frown-o'),(704,6,'足球','futbol-o'),(705,6,'游戏手柄','gamepad'),(706,6,'棒槌','gavel'),(707,6,'齿轮','gear'),(708,6,'齿轮','gears'),(709,6,'礼物','gift'),(710,6,'玻璃','glass'),(711,6,'地球','globe'),(712,6,'毕业帽','graduation-cap'),(713,6,'组','group'),(714,6,'手抓','hand-grab-o'),(715,6,'手-蜥蜴','hand-lizard-o'),(716,6,'手掌','hand-paper-o'),(717,6,'好的','hand-peace-o'),(718,6,'手点击','hand-pointer-o'),(719,6,'拳头','hand-rock-o'),(720,6,'手-剪刀','hand-scissors-o'),(721,6,'','hand-spock-o'),(722,6,'手掌','hand-stop-o'),(723,6,'握手','handshake-o'),(724,6,'听力困难','hard-of-hearing'),(725,6,'主题标签','hashtag'),(726,6,'硬盘','hdd-o'),(727,6,'耳机','headphones'),(728,6,'心','heart'),(729,6,'心','heart-o'),(730,6,'心跳','heartbeat'),(731,6,'历史','history'),(732,6,'家庭','home'),(733,6,'酒店','hotel'),(734,6,'沙漏','hourglass'),(735,6,'沙漏','hourglass-1'),(736,6,'沙漏','hourglass-2'),(737,6,'沙漏','hourglass-3'),(738,6,'沙漏完毕','hourglass-end'),(739,6,'沙漏一半','hourglass-half'),(740,6,'沙漏','hourglass-o'),(741,6,'沙漏启动','hourglass-start'),(742,6,'光标','i-cursor'),(743,6,'徽章','id-badge'),(744,6,'身份证','id-card'),(745,6,'身份证','id-card-o'),(746,6,'图像','image'),(747,6,'收件箱','inbox'),(748,6,'行业','industry'),(749,6,'信息','info'),(750,6,'信息-圈','info-circle'),(751,6,'机构','institution'),(752,6,'键','key'),(753,6,'键盘','keyboard-o'),(754,6,'语言','language'),(755,6,'笔记本电脑','laptop'),(756,6,'叶子','leaf'),(757,6,'法律','legal'),(758,6,'柠檬','lemon-o'),(759,6,'降级','level-down'),(760,6,'升级','level-up'),(761,6,'生命','life-bouy'),(762,6,'生命浮标','life-buoy'),(763,6,'生命','life-ring'),(764,6,'救人','life-saver'),(765,6,'灯泡','lightbulb-o'),(766,6,'折线图','line-chart'),(767,6,'箭头位置','location-arrow'),(768,6,'锁定','lock'),(769,6,'低视力','low-vision'),(770,6,'魔法','magic'),(771,6,'磁铁','magnet'),(772,6,'邮件转发','mail-forward'),(773,6,'邮件回复','mail-reply'),(774,6,'回复所有的邮件','mail-reply-all'),(775,6,'男性','male'),(776,6,'地图','map'),(777,6,'地图标记','map-marker'),(778,6,'地图','map-o'),(779,6,'引脚图','map-pin'),(780,6,'地图标志','map-signs'),(781,6,'无聊的','meh-o'),(782,6,'微芯片','microchip'),(783,6,'麦克风','microphone'),(784,6,'关掉麦克风','microphone-slash'),(785,6,'减','minus'),(786,6,'负-圆','minus-circle'),(787,6,'负-方块','minus-square'),(788,6,'减-方','minus-square-o'),(789,6,'移动','mobile'),(790,6,'手机','mobile-phone'),(791,6,'钱','money'),(792,6,'月亮','moon-o'),(793,6,'毕业帽','mortar-board'),(794,6,'摩托','motorcycle'),(795,6,'鼠标指针','mouse-pointer'),(796,6,'音乐','music'),(797,6,'','navicon'),(798,6,'报纸','newspaper-o'),(799,6,'对象组','object-group'),(800,6,'对象取消组','object-ungroup'),(801,6,'油漆刷','paint-brush'),(802,6,'纸面','paper-plane'),(803,6,'纸面','paper-plane-o'),(804,6,'爪子','paw'),(805,6,'铅笔','pencil'),(806,6,'铅笔','pencil-square'),(807,6,'铅笔','pencil-square-o'),(808,6,'百分比','percent'),(809,6,'电话','phone'),(810,6,'手机','phone-square'),(811,6,'照片','photo'),(812,6,'照片','picture-o'),(813,6,'饼图','pie-chart'),(814,6,'飞机','plane'),(815,6,'插头','plug'),(816,6,'加号','plus'),(817,6,'加-圈','plus-circle'),(818,6,'加-方形','plus-square'),(819,6,'加-方形','plus-square-o'),(820,6,'播客','podcast'),(821,6,'断电','power-off'),(822,6,'打印','print'),(823,6,'拼图','puzzle-piece'),(824,6,'二维码','qrcode'),(825,6,'问题','question'),(826,6,'问题','question-circle'),(827,6,'问题','question-circle-o'),(828,6,'引号-左边','quote-left'),(829,6,'引号-右边','quote-right'),(830,6,'随机','random'),(831,6,'回收','recycle'),(832,6,'刷新','refresh'),(833,6,'注册','registered'),(834,6,'删除','remove'),(835,6,'重新排序','reorder'),(836,6,'回复','reply'),(837,6,'回覆示例全部','reply-all'),(838,6,'转发','retweet'),(840,6,'道路','road'),(841,6,'火箭','rocket'),(842,6,'信息集合','rss'),(843,6,'信息聚合','rss-square'),(844,6,'浴缸','s15'),(845,6,'搜索','search'),(846,6,'缩小','search-minus'),(847,6,'放大','search-plus'),(848,6,'发送','send'),(849,6,'发送','send-o'),(850,6,'服务器','server'),(851,6,'分享','share'),(852,6,'分享','share-alt'),(853,6,'分享','share-alt-square'),(854,6,'分享','share-square'),(855,6,'分享','share-square-o'),(856,6,'屏蔽','shield'),(857,6,'船舶','ship'),(858,6,'购物袋','shopping-bag'),(859,6,'购物篮','shopping-basket'),(860,6,'购物车','shopping-cart'),(861,6,'喷头','shower'),(862,6,'登录','sign-in'),(863,6,'手语','sign-language'),(864,6,'登出','sign-out'),(865,6,'信号','signal'),(866,6,'签名','signing'),(867,6,'网站地图','sitemap'),(868,6,'滑块','sliders'),(869,6,'笑脸','smile-o'),(870,6,'雪花','snowflake-o'),(871,6,'足球','soccer-ball-o'),(872,6,'排序','sort'),(873,6,'顺序','sort-alpha-asc'),(874,6,'倒序','sort-alpha-desc'),(875,6,'数量顺序','sort-amount-asc'),(876,6,'数量倒序','sort-amount-desc'),(877,6,'顺序','sort-asc'),(878,6,'倒序','sort-desc'),(879,6,'排序-下','sort-down'),(880,6,'数字顺序','sort-numeric-asc'),(881,6,'数字倒序','sort-numeric-desc'),(882,6,'排序-上','sort-up'),(883,6,'航天飞机','space-shuttle'),(884,6,'旋转器','spinner'),(885,6,'勺子','spoon'),(886,6,'正方形','square'),(887,6,'正方形','square-o'),(888,6,'星','star'),(889,6,'半星','star-half'),(890,6,'半星空','star-half-empty'),(891,6,'半星','star-half-full'),(892,6,'半星','star-half-o'),(893,6,'星','star-o'),(894,6,'粘贴','sticky-note'),(895,6,'粘贴','sticky-note-o'),(896,6,'街景','street-view'),(897,6,'手提箱','suitcase'),(898,6,'太阳','sun-o'),(899,6,'支持','support'),(900,6,'平板电脑','tablet'),(901,6,'转速表示','tachometer'),(902,6,'标签','tag'),(903,6,'标签','tags'),(904,6,'任务','tasks'),(905,6,'出租车','taxi'),(906,6,'电视','television'),(907,6,'终端','terminal'),(908,6,'温度计','thermometer'),(909,6,'温度计-0','thermometer-0'),(910,6,'温度计-1','thermometer-1'),(911,6,'温度计-2','thermometer-2'),(912,6,'温度计-3','thermometer-3'),(913,6,'温度计-4','thermometer-4'),(914,6,'温度计-空白','thermometer-empty'),(915,6,'温度计-满','thermometer-full'),(916,6,'温度计-一半','thermometer-half'),(917,6,'温度计','thermometer-quarter'),(918,6,'温度计3/4','thermometer-three-quarters'),(919,6,'图钉','thumb-tack'),(920,6,'大拇指下','thumbs-down'),(921,6,'大拇指下','thumbs-o-down'),(922,6,'竖起大拇指','thumbs-o-up'),(923,6,'竖起大拇指','thumbs-up'),(924,6,'机票','ticket'),(925,6,'删除','times'),(926,6,'删除','times-circle'),(927,6,'错误','times-circle-o'),(928,6,'删除','times-rectangle'),(929,6,'时间矩形','times-rectangle-o'),(930,6,'色调','tint'),(931,6,'切换','toggle-down'),(932,6,'切换-左','toggle-left'),(933,6,'切换','toggle-off'),(934,6,'开机','toggle-on'),(935,6,'切换-右','toggle-right'),(936,6,'切换-上','toggle-up'),(937,6,'商标','trademark'),(938,6,'删除','trash'),(939,6,'删除','trash-o'),(940,6,'树','tree'),(941,6,'奖杯','trophy'),(942,6,'卡车','truck'),(943,6,'待接电话','tty'),(944,6,'电视','tv'),(945,6,'伞','umbrella'),(946,6,'通用访问','universal-access'),(947,6,'大学','university'),(948,6,'解锁','unlock'),(949,6,'不锁','unlock-alt'),(950,6,'未排序','unsorted'),(951,6,'上传','upload'),(952,6,'用户','user'),(953,6,'用户','user-circle'),(954,6,'用户','user-circle-o'),(955,6,'用户','user-o'),(956,6,'新增用户','user-plus'),(957,6,'用户密码','user-secret'),(958,6,'删除用户','user-times'),(959,6,'用户群','users'),(960,6,'名片','vcard'),(961,6,'名片','vcard-o'),(962,6,'摄像机','video-camera'),(963,6,'控制电话音量','volume-control-phone'),(964,6,'音量降低','volume-down'),(965,6,'音量关闭','volume-off'),(966,6,'音量打开','volume-up'),(967,6,'警告','warning'),(968,6,'轮椅','wheelchair'),(969,6,'轮椅','wheelchair-alt'),(970,6,'无线网络','wifi'),(971,6,'关闭窗口','window-close'),(972,6,'关闭窗口','window-close-o'),(973,6,'窗口最大化’','window-maximize'),(974,6,'窗口最小化','window-minimize'),(975,6,'窗口恢复','window-restore'),(976,6,'扳手','wrench'),(977,24,'云下载','cloud-download'),(978,24,'云上传','cloud-upload'),(980,24,'用户MD','user-md'),(981,24,'角-左','angle-left'),(983,24,'角-右','angle-right'),(984,24,'角-上','angle-up'),(985,24,'角-下','angle-down'),(986,24,'听诊器','stethoscope'),(987,24,'手提箱','suitcase'),(988,24,'灯泡','lightbulb'),(989,24,'桌面','desktop'),(990,24,'笔记本电脑','laptop'),(991,24,'平板电脑','tablet'),(992,24,'移动电话','mobile-phone'),(993,24,'交换','exchange'),(994,24,'钟-ALT','bell-alt'),(995,24,'文件-ALT','file-alt'),(996,24,'啤酒','beer'),(997,24,'咖啡','coffee'),(998,24,'食物','food'),(999,24,'建筑','building'),(1000,24,'医院','hospital'),(1001,24,'救护车','ambulance'),(1002,24,'急救包','medkit'),(1003,24,'签名','h-sign'),(1004,24,'加-签名-ALT','plus-sign-alt'),(1005,24,'双角左','double-angle-left'),(1006,24,'双角右','double-angle-right'),(1007,24,'双角上','double-angle-up'),(1008,24,'双角下','double-angle-down'),(1009,24,'圆坯','circle-blank'),(1010,24,'圆圈','circle'),(1011,24,'微调','spinner'),(1012,24,'喷气式战斗机','fighter-jet'),(1013,24,'引用左','quote-left'),(1014,24,'引用右','quote-right'),(1015,24,'回复','reply'),(1016,24,'GitHub','github-alt'),(1017,24,'关闭文件夹','folder-close-alt'),(1018,24,'打开文件夹','folder-open-alt'),(1019,30,'救护车','ambulance'),(1020,30,'签名','h-sign'),(1021,30,'急救包','medkit'),(1022,30,'听诊器','stethoscope'),(1023,30,'烧杯','beaker'),(1024,30,'医院','hospital'),(1025,30,'加-签名','plus-sign-alt'),(1026,30,'用户MD','user-md'),(1027,29,'电话','phone'),(1028,29,'推特','twitter'),(1029,29,'GitHub-签名','github-sign'),(1030,29,'GitHub','github'),(1031,29,'GitHub-ALT','github-alt'),(1032,29,'照片分享网站','pinterest-sign'),(1033,29,'手机标志','phone-sign'),(1034,29,'推特标志','twitter-sign'),(1035,29,'商务化人际关系网','linkedin'),(1036,29,'商务化人际关系网标志','linkedin-sign'),(1037,29,'谷歌-加','google-plus'),(1038,29,'谷歌-加标志','google-plus-sign'),(1039,29,'FeceBook','facebook'),(1040,29,'FaceBook标志','facebook-sign'),(1041,29,'照片分享网站','pinterest'),(1042,29,'签名-空白','sign-blank'),(1043,28,'播放-圈','play-circle'),(1044,28,'播放','play'),(1045,28,'暂停','pause'),(1046,28,'停止','stop'),(1047,28,'后退一步','step-backward'),(1048,28,'前进一步','step-forward'),(1049,28,'快速后退','fast-backward'),(1050,28,'快速前进','fast-forward'),(1051,28,'向后的','backward'),(1052,28,'向前的','forward'),(1053,28,'弹出','eject'),(1054,28,'全屏','fullscreen'),(1055,28,'调整充分','resize-full'),(1056,28,'调整小','resize-small'),(1057,27,'角左','angle-left'),(1058,27,'角右','angle-right'),(1059,27,'角上','angle-up'),(1060,27,'角-下','angle-down'),(1061,27,'向下箭头','arrow-down'),(1062,27,'向左箭头','arrow-left'),(1063,27,'向右箭头','arrow-right'),(1064,27,'向上箭头','arrow-up'),(1065,27,'插入符号下','caret-down'),(1066,27,'插入符号左','caret-left'),(1067,27,'插入符号右','caret-right'),(1068,27,'插入符号上','caret-up'),(1069,27,'下V','chevron-down'),(1070,27,'左V','chevron-left'),(1071,27,'右V','chevron-right'),(1072,27,'上V','chevron-up'),(1073,27,'圆圈箭头-下','circle-arrow-down'),(1074,27,'圆圈箭头-左','circle-arrow-left'),(1075,27,'圆圈箭头-右','circle-arrow-right'),(1076,27,'圆圈箭头-上','circle-arrow-up'),(1077,27,'双角左','double-angle-left'),(1078,27,'双角右','double-angle-right'),(1079,27,'双角上','double-angle-up'),(1080,27,'双角下','double-angle-down'),(1081,27,'手放下','hand-down'),(1082,27,'瘦放左','hand-left'),(1083,27,'手放右','hand-right'),(1084,27,'手放上','hand-up'),(1085,27,'圆圈','circle'),(1086,27,'圆圈-空白','circle-blank'),(1087,26,'文件','file'),(1088,26,'文件-ALT','file-alt'),(1089,26,'剪刀','cut'),(1090,26,'复制','copy'),(1091,26,'粘贴','paste'),(1092,26,'保存','save'),(1093,26,'撤销','undo'),(1094,26,'重复','repeat'),(1095,26,'文字高度','text-height'),(1096,26,'文字宽度','text-width'),(1097,26,'左对齐','align-left'),(1098,26,'居中','align-center'),(1099,26,'右对齐','align-right'),(1100,26,'对齐','align-justify'),(1101,26,'左缩进','indent-left'),(1102,26,'右缩进','indent-right'),(1103,26,'字体','font'),(1104,26,'加粗','bold'),(1105,26,'斜体','italic'),(1106,26,'删除线','strikethrough'),(1107,26,'下划线','underline'),(1108,26,'链接','link'),(1109,26,'回形针','paper-clip'),(1110,26,'纵列','columns'),(1111,26,'表格','table'),(1112,26,'th-大','th-large'),(1113,26,'th','th'),(1114,26,'th列表','th-list'),(1115,26,'列表','list'),(1116,26,'ol列表','list-ol'),(1117,26,'ul列表','list-ul'),(1118,26,'列表ALT','list-alt'),(1119,25,'调整','adjust'),(1120,25,'星号','asterisk'),(1121,25,'禁止圈','ban-circle'),(1122,25,'条形图','bar-chart'),(1123,25,'条码','barcode'),(1124,25,'烧杯','beaker'),(1125,25,'啤酒','beer'),(1126,25,'钟','bell'),(1127,25,'钟-alt','bell-alt'),(1128,25,'螺栓','bolt'),(1129,25,'书籍','book'),(1130,25,'书签','bookmark'),(1131,25,'书签-白','bookmark-empty'),(1132,25,'公文包','briefcase'),(1133,25,'扩音器','bullhorn'),(1134,25,'日历','calendar'),(1135,25,'照相机','camera'),(1136,25,'相机复古','camera-retro'),(1137,25,'证明书','certificate'),(1138,25,'打勾','check'),(1139,25,'没打勾','check-empty'),(1140,25,'圆圈','circle'),(1141,25,'圆坯','circle-blank'),(1142,25,'云','cloud'),(1143,25,'云下载','cloud-download'),(1144,25,'云上传','cloud-upload'),(1145,25,'咖啡','coffee'),(1146,25,'钝齿','cog'),(1147,25,'齿轮','cogs'),(1148,25,'评论','comment'),(1149,25,'评论','comment-alt'),(1150,25,'评论','comments'),(1151,25,'评论','comments-alt'),(1152,25,'信用卡','credit-card'),(1153,25,'仪表板','dashboard'),(1154,25,'桌面','desktop'),(1155,25,'下载','download'),(1156,25,'下载','download-alt'),(1157,25,'修改','edit'),(1158,25,'信封','envelope'),(1159,25,'信封','envelope-alt'),(1160,25,'交换','exchange'),(1161,25,'惊叹号','exclamation-sign'),(1162,25,'外部链接','external-link'),(1163,25,'闭上眼睛','eye-close'),(1164,25,'睁开眼睛','eye-open'),(1165,25,'FaceTime视频','facetime-video'),(1166,25,'喷气式战斗机','fighter-jet'),(1167,25,'电影','film'),(1168,25,'滤波器','filter'),(1169,25,'火','fire'),(1170,25,'旗帜','flag'),(1171,25,'关闭文件夹','folder-close'),(1172,25,'打开文件夹','folder-open'),(1173,25,'关闭文件夹','folder-close-alt'),(1174,25,'打开文件夹','folder-open-alt'),(1175,25,'食物','food'),(1176,25,'礼物','gift'),(1177,25,'玻璃','glass'),(1178,25,'地球','globe'),(1179,25,'组','group'),(1180,25,'硬盘','hdd'),(1181,25,'耳机','headphones'),(1182,25,'心','heart'),(1183,25,'心-空','heart-empty'),(1184,25,'家','home'),(1185,25,'收件箱','inbox'),(1186,25,'信息标志','info-sign'),(1187,25,'钥匙','key'),(1188,25,'叶','leaf'),(1189,25,'笔记本电脑','laptop'),(1190,25,'合法的','legal'),(1191,25,'柠檬','lemon'),(1192,25,'灯泡','lightbulb'),(1193,25,'锁','lock'),(1194,25,'解锁','unlock'),(1195,25,'魔术','magic'),(1196,25,'磁铁','magnet'),(1197,25,'地图标记','map-marker'),(1198,25,'减','minus'),(1199,25,'减标志','minus-sign'),(1200,25,'移动电话','mobile-phone'),(1201,25,'钱','money'),(1202,25,'移动','move'),(1203,25,'音乐','music'),(1204,25,'关闭','off'),(1205,25,'','ok'),(1206,25,'OK-圆圈','ok-circle'),(1207,25,'ok标志','ok-sign'),(1208,25,'铅笔','pencil'),(1209,25,'图片','picture'),(1210,25,'飞机','plane'),(1211,25,'加','plus'),(1212,25,'加标志','plus-sign'),(1213,25,'打印','print'),(1214,25,'图钉','pushpin'),(1215,25,'二维码','qrcode'),(1216,25,'问题标志','question-sign'),(1217,25,'引用左','quote-left'),(1218,25,'引用右','quote-right'),(1219,25,'随机','random'),(1220,25,'刷新','refresh'),(1221,25,'去除','remove'),(1222,25,'去除-圆圈','remove-circle'),(1223,25,'去除标志','remove-sign'),(1224,25,'重新排序','reorder'),(1225,25,'回复','reply'),(1226,25,'调整水平','resize-horizontal'),(1227,25,'调整垂直','resize-vertical'),(1228,25,'转发','retweet'),(1229,25,'路','road'),(1230,25,'信息集合','rss'),(1231,25,'截图','screenshot'),(1232,25,'搜索','search'),(1233,25,'分享','share'),(1234,25,'分享','share-alt'),(1235,25,'购物车','shopping-cart'),(1236,25,'信号','signal'),(1237,25,'签入','signin'),(1238,25,'签出','signout'),(1239,25,'网站地图','sitemap'),(1240,25,'分类','sort'),(1241,25,'分类-下','sort-down'),(1242,25,'分类上','sort-up'),(1243,25,'微调','spinner'),(1244,25,'明星','star'),(1245,25,'明星空','star-empty'),(1246,25,'半星','star-half'),(1247,25,'平板电脑','tablet'),(1248,25,'标签','tag'),(1249,25,'标签','tags'),(1250,25,'任务','tasks'),(1251,25,'大拇指朝下','thumbs-down'),(1252,25,'竖起大拇指','thumbs-up'),(1253,25,'时间','time'),(1254,25,'色彩','tint'),(1255,25,'垃圾','trash'),(1256,25,'奖杯','trophy'),(1257,25,'卡车','truck'),(1258,25,'雨伞','umbrella'),(1259,25,'上传','upload'),(1260,25,'上传','upload-alt'),(1261,25,'用户','user'),(1262,25,'用户MD','user-md'),(1263,25,'音量关闭','volume-off'),(1264,25,'音量小','volume-down'),(1265,25,'音量大','volume-up'),(1266,25,'警告标志','warning-sign'),(1267,25,'扳手','wrench'),(1268,25,'放大','zoom-in'),(1269,25,'缩小','zoom-out');
/*!40000 ALTER TABLE `card_font` ENABLE KEYS */;

#
# Structure for table "card_links"
#

DROP TABLE IF EXISTS `card_links`;
CREATE TABLE `card_links` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL DEFAULT '' COMMENT '中文名称',
  `url` varchar(255) NOT NULL DEFAULT '' COMMENT '链接地址',
  `state` varchar(255) NOT NULL DEFAULT '' COMMENT '显示：on,不显示：off',
  `sort` int(11) NOT NULL DEFAULT '0' COMMENT '排序',
  `pid` varchar(255) NOT NULL DEFAULT '' COMMENT '分类目录',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=41 DEFAULT CHARSET=utf8 COMMENT='链接';

#
# Data for table "card_links"
#

/*!40000 ALTER TABLE `card_links` DISABLE KEYS */;
INSERT INTO `card_links` VALUES (1,'W3school在线教程','http://www.w3school.com.cn/','on',1,'55'),(2,'Bootstrap中文网','http://www.bootcss.com/','on',2,'51'),(4,'jQuery插件库','http://www.jq22.com/','on',3,'51'),(5,'W3cschool','https://www.w3cschool.cn/','on',2,'55'),(7,'Layui官网','http://www.layui.com/','on',4,'51'),(8,'Redis教程','http://www.redis.net.cn/tutorial/3501.html','on',5,'55'),(9,'看云','https://www.kancloud.cn/explore','on',4,'55'),(10,'菜鸟教程','http://www.runoob.com','on',3,'55'),(11,'手册网','http://www.shouce.ren/','on',6,'55'),(12,'Select','https://select2.github.io/examples.html','on',5,'51'),(13,'Bootstrap-Select','https://silviomoreto.github.io/bootstrap-select/examples/','on',2,'51'),(14,'Bootstrap-table','http://bootstrap-table.wenzhixin.net.cn/zh-cn/','on',2,'51'),(15,'Bootstrap官网','https://getbootstrap.com/','on',1,'51'),(16,'Bootstrap-File-Inpput','http://plugins.krajee.com/file-input','on',2,'51'),(17,'PHP中文网','http://www.php.cn/','on',1,'52'),(18,'大话主席','http://www.superslide2.com/','on',6,'51'),(19,'Font Awesome','http://fontawesome.dashgame.com/','on',0,'51'),(20,'PHP官网','http://www.php.net/','on',2,'52'),(21,'Apache官网','https://www.apache.org/','on',3,'52'),(22,'Linux官网','https://www.linux.org/','on',4,'52'),(23,'Mysql官网','https://www.mysql.com/','on',0,'53'),(24,'Oracle官网','https://www.oracle.com/','on',0,'53'),(25,'IBM','https://www.ibm.com/','on',0,'56'),(26,'Nginx官网','https://nginx.org/','on',5,'52'),(27,'ThinkPHP官网','http://www.thinkphp.cn/','on',0,'57'),(28,'Laravel官网','https://laravel.com/','on',0,'57'),(29,'Wordpress官网','https://cn.wordpress.org/','on',0,'57'),(30,'Yii官网','http://www.yiiframework.com/','on',0,'57'),(31,'Yii中文社区','http://www.yiichina.com/','on',0,'57'),(32,'Jquery官网','https://jquery.com/','on',0,'51'),(33,'DedeCMS官网','http://www.dedecms.com/','on',0,'57'),(34,'Codeigniter官网','https://codeigniter.org.cn/','on',0,'57'),(35,'Zend Framework官网','https://framework.zend.com/','on',0,'57'),(36,'Phalcon官网','https://phalconphp.com/zh/','on',0,'57'),(37,'Symfony官网','https://symfony.com/','on',0,'57'),(38,'Webasyst官网','https://www.webasyst.com/','on',0,'57'),(39,'Python官网','https://www.python.org/','on',6,'52'),(40,'Java官网','https://www.java.com/','on',7,'52');
/*!40000 ALTER TABLE `card_links` ENABLE KEYS */;

#
# Structure for table "card_log"
#

DROP TABLE IF EXISTS `card_log`;
CREATE TABLE `card_log` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `logtext` varchar(50) NOT NULL DEFAULT '' COMMENT '操作内容',
  `time` int(10) unsigned DEFAULT NULL COMMENT '操作时间',
  `uid` char(20) NOT NULL DEFAULT '' COMMENT '外键：操作用户id',
  `ip` char(15) NOT NULL COMMENT 'IP',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=2371 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='管理员操作日志';

#
# Data for table "card_log"
#

/*!40000 ALTER TABLE `card_log` DISABLE KEYS */;
INSERT INTO `card_log` VALUES (1894,'修改链接-W3school在线教程',1501568813,'admin','127.0.0.1'),(1895,'修改链接-jQuery插件库',1501568833,'admin','127.0.0.1'),(1896,'修改链接-W3cschool',1501568841,'admin','127.0.0.1'),(1897,'修改链接-Layui官网',1501568854,'admin','127.0.0.1'),(1898,'分类排序',1501569179,'admin','127.0.0.1'),(1899,'添加链接-Redis教程',1501569364,'admin','127.0.0.1'),(1900,'添加链接-看云',1501569403,'admin','127.0.0.1'),(1901,'添加链接-菜鸟教程',1501569420,'admin','127.0.0.1'),(1902,'链接排序',1501569433,'admin','127.0.0.1'),(1903,'链接排序',1501569435,'admin','127.0.0.1'),(1904,'链接排序',1501569436,'admin','127.0.0.1'),(1905,'链接排序',1501569437,'admin','127.0.0.1'),(1906,'链接排序',1501569438,'admin','127.0.0.1'),(1907,'添加链接-手册网',1501569471,'admin','127.0.0.1'),(1908,'添加链接-Select',1501569495,'admin','127.0.0.1'),(1909,'添加链接-Bootstrap-Select',1501569526,'admin','127.0.0.1'),(1910,'修改链接-Bootstrap-Select',1501569535,'admin','127.0.0.1'),(1911,'添加链接-Bootstrap-table',1501569575,'admin','127.0.0.1'),(1912,'添加链接-Bootstrap官网',1501569616,'admin','127.0.0.1'),(1913,'链接排序',1501569629,'admin','127.0.0.1'),(1914,'链接排序',1501569630,'admin','127.0.0.1'),(1915,'链接排序',1501569631,'admin','127.0.0.1'),(1916,'添加链接-Bootstrap-File-Inpput',1501569821,'admin','127.0.0.1'),(1917,'添加链接-PHP中文网',1501569851,'admin','127.0.0.1'),(1918,'添加链接-大话主席',1501569885,'admin','127.0.0.1'),(1919,'链接排序',1501569894,'admin','127.0.0.1'),(1920,'链接排序',1501569895,'admin','127.0.0.1'),(1921,'添加链接-Font Awesome',1501569942,'admin','127.0.0.1'),(1922,'修改分类-服务器',1501569978,'admin','127.0.0.1'),(1923,'添加链接-PHP官网',1501570024,'admin','127.0.0.1'),(1924,'添加链接-Apache官网',1501570055,'admin','127.0.0.1'),(1925,'添加链接-Linux官网',1501570286,'admin','127.0.0.1'),(1926,'添加链接-Mysql官网',1501570325,'admin','127.0.0.1'),(1927,'添加链接-Oracle官网',1501570364,'admin','127.0.0.1'),(1928,'添加链接-IBM',1501570417,'admin','127.0.0.1'),(1929,'删除分类-服务器',1501570606,'admin','127.0.0.1'),(1930,'添加链接-Nginx官网',1501570645,'admin','127.0.0.1'),(1931,'添加分类-框架',1501570709,'admin','127.0.0.1'),(1932,'分类排序',1501570741,'admin','127.0.0.1'),(1933,'添加链接-ThinkPHP官网',1501570769,'admin','127.0.0.1'),(1934,'修改链接-ThinkPHP官网',1501570774,'admin','127.0.0.1'),(1935,'添加链接-Laravel官网',1501570804,'admin','127.0.0.1'),(1936,'添加链接-Wordpress官网',1501570878,'admin','127.0.0.1'),(1937,'添加链接-Yii官网',1501570923,'admin','127.0.0.1'),(1938,'添加链接-Yii中文社区',1501570946,'admin','127.0.0.1'),(1939,'添加链接-官网',1501570988,'admin','127.0.0.1'),(1940,'修改链接-Jquery官网',1501570999,'admin','127.0.0.1'),(1941,'添加链接-DedeCMS官网',1501571047,'admin','127.0.0.1'),(1942,'添加链接-Codeigniter官网',1501571109,'admin','127.0.0.1'),(1943,'添加链接-Zend Framework官网',1501571168,'admin','127.0.0.1'),(1944,'添加链接-Phalcon官网',1501571218,'admin','127.0.0.1'),(1945,'添加链接-Symfony官网',1501571254,'admin','127.0.0.1'),(1946,'添加链接-Webasyst官网',1501571347,'admin','127.0.0.1'),(1947,'添加链接-Python官网',1501571413,'admin','127.0.0.1'),(1948,'添加链接-Java',1501571454,'admin','127.0.0.1'),(1949,'修改链接-Java官网',1501578535,'admin','127.0.0.1'),(1950,'链接排序',1501578545,'admin','127.0.0.1'),(1951,'链接排序',1501578546,'admin','127.0.0.1'),(1952,'链接排序',1501578547,'admin','127.0.0.1'),(1953,'链接排序',1501578547,'admin','127.0.0.1'),(1954,'链接排序',1501578548,'admin','127.0.0.1'),(1955,'链接排序',1501578548,'admin','127.0.0.1'),(1956,'链接排序',1501578549,'admin','127.0.0.1'),(1957,'添加分类-Redis 教程',1501578621,'admin','127.0.0.1'),(1958,'添加分类-Redis 命令',1501578630,'admin','127.0.0.1'),(1959,'添加分类-Redis 高级教程',1501578638,'admin','127.0.0.1'),(1960,'添加分类-Redis 键(key)',1501578665,'admin','127.0.0.1'),(1961,'添加分类-Redis 字符串(String)',1501578679,'admin','127.0.0.1'),(1962,'添加分类-Redis 哈希(Hash)',1501578685,'admin','127.0.0.1'),(1963,'添加分类-Redis 哈希(Hash)',1501578692,'admin','127.0.0.1'),(1964,'添加分类-Redis 集合(Set)',1501578699,'admin','127.0.0.1'),(1965,'添加分类-Redis 有序集合(sorted set)',1501578706,'admin','127.0.0.1'),(1966,'添加分类-Redis HyperLogLog',1501578712,'admin','127.0.0.1'),(1967,'添加分类-Redis 发布订阅',1501578717,'admin','127.0.0.1'),(1968,'添加分类-Redis 事务',1501578724,'admin','127.0.0.1'),(1969,'添加分类-Redis 脚本',1501578729,'admin','127.0.0.1'),(1970,'添加分类-Redis 连接',1501578734,'admin','127.0.0.1'),(1971,'添加分类-Redis 服务器',1501578742,'admin','127.0.0.1'),(1972,'添加手册资料-Redis 教程',1501579105,'admin','127.0.0.1'),(1973,'添加手册资料-Redis 教程',1501579661,'admin','127.0.0.1'),(1974,'添加手册资料-Redis 简介',1501580047,'admin','127.0.0.1'),(1975,'手册排序',1501580063,'admin','127.0.0.1'),(1976,'手册排序',1501580064,'admin','127.0.0.1'),(1977,'添加手册资料-Redis 安装',1501580396,'admin','127.0.0.1'),(1978,'手册排序',1501580399,'admin','127.0.0.1'),(1979,'添加手册资料-Redis 配置',1501580845,'admin','127.0.0.1'),(1980,'手册排序',1501580849,'admin','127.0.0.1'),(1981,'添加手册资料-Redis 数据类型',1501581046,'admin','127.0.0.1'),(1982,'手册排序',1501581050,'admin','127.0.0.1'),(1983,'添加手册资料-Redis 命令',1501581214,'admin','127.0.0.1'),(1984,'手册排序',1501581217,'admin','127.0.0.1'),(1985,'添加手册资料-Redis 数据备份与恢复',1501581404,'admin','127.0.0.1'),(1986,'更新手册资料-Redis 数据备份与恢复',1501581440,'admin','127.0.0.1'),(1987,'添加手册资料-Redis 安全',1501581501,'admin','127.0.0.1'),(1988,'手册排序',1501581512,'admin','127.0.0.1'),(1989,'手册排序',1501581513,'admin','127.0.0.1'),(1990,'添加手册资料-Redis 性能测试',1501581674,'admin','127.0.0.1'),(1991,'手册排序',1501581677,'admin','127.0.0.1'),(2132,'添加手册资料-Redis Discard 命令',1501913299,'admin','127.0.0.1'),(2133,'更新手册资料-Redis Discard 命令',1501913328,'admin','127.0.0.1'),(2134,'添加手册资料-Redis Exec 命令',1501913801,'admin','127.0.0.1'),(2135,'手册排序',1501913807,'admin','127.0.0.1'),(2136,'手册排序',1501913808,'admin','127.0.0.1'),(2137,'添加手册资料-Redis Multi 命令',1501913869,'admin','127.0.0.1'),(2138,'手册排序',1501913871,'admin','127.0.0.1'),(2139,'添加手册资料-Redis Unwatch 命令',1501913923,'admin','127.0.0.1'),(2140,'手册排序',1501913925,'admin','127.0.0.1'),(2141,'添加手册资料-Redis Watch 命令',1501913971,'admin','127.0.0.1'),(2142,'手册排序',1501913974,'admin','127.0.0.1'),(2143,'添加手册资料-Redis Eval 命令',1501914066,'admin','127.0.0.1'),(2144,'手册排序',1501914069,'admin','127.0.0.1'),(2145,'添加手册资料-Redis Evalsha 命令',1501914131,'admin','127.0.0.1'),(2146,'手册排序',1501914134,'admin','127.0.0.1'),(2147,'添加手册资料-Redis Script Exists 命令',1501914189,'admin','127.0.0.1'),(2148,'手册排序',1501914192,'admin','127.0.0.1'),(2149,'添加手册资料-Redis Script Flush 命令',1501914239,'admin','127.0.0.1'),(2150,'手册排序',1501914247,'admin','127.0.0.1'),(2151,'添加手册资料-Redis Script kill 命令',1501914288,'admin','127.0.0.1'),(2152,'手册排序',1501914295,'admin','127.0.0.1'),(2153,'手册排序',1501914305,'admin','127.0.0.1'),(2154,'添加手册资料-Redis Script Load 命令',1501914353,'admin','127.0.0.1'),(2155,'手册排序',1501914356,'admin','127.0.0.1'),(2156,'添加菜单-留言评论',1501915866,'admin','127.0.0.1'),(2157,'修改菜单-权限控制',1501915947,'admin','127.0.0.1'),(2158,'添加菜单-首页留言',1501916065,'admin','127.0.0.1'),(2159,'添加手册资料-Redis Auth 命令',1502086676,'admin','127.0.0.1'),(2160,'手册排序',1502086680,'admin','127.0.0.1'),(2161,'添加手册资料-Redis Echo 命令',1502086814,'admin','127.0.0.1'),(2162,'手册排序',1502086844,'admin','127.0.0.1'),(2163,'添加手册资料-Redis Ping 命令',1502088459,'admin','127.0.0.1'),(2164,'手册排序',1502088461,'admin','127.0.0.1'),(2165,'添加手册资料-Redis Quit 命令',1502088518,'admin','127.0.0.1'),(2166,'手册排序',1502088571,'admin','127.0.0.1'),(2167,'添加手册资料-Redis Select 命令',1502088658,'admin','127.0.0.1'),(2168,'手册排序',1502088662,'admin','127.0.0.1'),(2169,'添加手册资料-Redis Hdel 命令',1502088872,'admin','127.0.0.1'),(2170,'手册排序',1502088874,'admin','127.0.0.1'),(2171,'添加手册资料-Redis Hexists 命令',1502088919,'admin','127.0.0.1'),(2172,'手册排序',1502088922,'admin','127.0.0.1'),(2173,'添加手册资料-Redis Hget 命令',1502088983,'admin','127.0.0.1'),(2174,'手册排序',1502088986,'admin','127.0.0.1'),(2175,'添加手册资料-Redis Hgetall 命令',1502089064,'admin','127.0.0.1'),(2176,'手册排序',1502089067,'admin','127.0.0.1'),(2177,'添加手册资料-Redis Hincrby 命令',1502089117,'admin','127.0.0.1'),(2178,'手册排序',1502089120,'admin','127.0.0.1'),(2179,'更新手册资料-Redis Hincrby 命令',1502089205,'admin','127.0.0.1'),(2180,'添加手册资料-Redis Hincrbyfloat 命令',1502089338,'admin','127.0.0.1'),(2181,'手册排序',1502089489,'admin','127.0.0.1'),(2182,'添加手册资料-Redis Hkeys 命令',1502089536,'admin','127.0.0.1'),(2183,'手册排序',1502089539,'admin','127.0.0.1'),(2184,'添加手册资料-Redis Hlen 命令',1502089583,'admin','127.0.0.1'),(2185,'手册排序',1502089593,'admin','127.0.0.1'),(2186,'添加手册资料-Redis Hmget 命令',1502089639,'admin','127.0.0.1'),(2187,'手册排序',1502089642,'admin','127.0.0.1'),(2188,'添加手册资料-Redis Hmset 命令',1502089688,'admin','127.0.0.1'),(2189,'手册排序',1502089691,'admin','127.0.0.1'),(2190,'手册排序',1502089711,'admin','127.0.0.1'),(2191,'更新手册资料-Redis Hmset 命令',1502089784,'admin','127.0.0.1'),(2192,'添加手册资料-Redis Hset 命令',1502089835,'admin','127.0.0.1'),(2193,'手册排序',1502089839,'admin','127.0.0.1'),(2194,'添加手册资料-Redis Hsetnx 命令',1502089884,'admin','127.0.0.1'),(2195,'修改分类-Redis 列表(List)',1502090055,'admin','127.0.0.1'),(2196,'手册排序',1502090069,'admin','127.0.0.1'),(2197,'添加手册资料-Redis Hvals 命令',1502090117,'admin','127.0.0.1'),(2198,'手册排序',1502090120,'admin','127.0.0.1'),(2199,'添加手册资料-Redis Blpop 命令',1502240220,'admin','127.0.0.1'),(2200,'手册排序',1502240237,'admin','127.0.0.1'),(2201,'添加手册资料-Redis Brpop 命令',1502240290,'admin','127.0.0.1'),(2202,'手册排序',1502240293,'admin','127.0.0.1'),(2203,'添加手册资料-Redis Brpoplpush 命令',1502240381,'admin','127.0.0.1'),(2204,'手册排序',1502240385,'admin','127.0.0.1'),(2205,'添加手册资料-Redis Lindex 命令',1502240443,'admin','127.0.0.1'),(2206,'手册排序',1502240446,'admin','127.0.0.1'),(2207,'添加手册资料-Redis Linsert 命令',1502240499,'admin','127.0.0.1'),(2208,'手册排序',1502240502,'admin','127.0.0.1'),(2209,'添加手册资料-Redis Llen 命令',1502240568,'admin','127.0.0.1'),(2210,'手册排序',1502240573,'admin','127.0.0.1'),(2211,'添加手册资料-Redis Lpop 命令',1502240644,'admin','127.0.0.1'),(2212,'手册排序',1502240647,'admin','127.0.0.1'),(2213,'添加手册资料-Redis Lpush 命令',1502240699,'admin','127.0.0.1'),(2214,'手册排序',1502240702,'admin','127.0.0.1'),(2215,'添加手册资料-Redis Lpushx 命令',1502240754,'admin','127.0.0.1'),(2216,'手册排序',1502240758,'admin','127.0.0.1'),(2217,'添加手册资料-Redis Lrange 命令',1502240812,'admin','127.0.0.1'),(2218,'手册排序',1502240817,'admin','127.0.0.1'),(2219,'添加手册资料-Redis Lrem 命令',1502240897,'admin','127.0.0.1'),(2220,'手册排序',1502240901,'admin','127.0.0.1'),(2221,'添加手册资料-Redis Lset 命令',1502240955,'admin','127.0.0.1'),(2222,'手册排序',1502240959,'admin','127.0.0.1'),(2223,'添加手册资料-Redis Ltrim 命令',1502241027,'admin','127.0.0.1'),(2224,'手册排序',1502241031,'admin','127.0.0.1'),(2225,'添加手册资料-Redis Rpop 命令',1502241098,'admin','127.0.0.1'),(2226,'手册排序',1502241102,'admin','127.0.0.1'),(2227,'添加手册资料-Redis Rpoplpush 命令',1502241151,'admin','127.0.0.1'),(2228,'添加手册资料-Redis Rpush 命令',1502241203,'admin','127.0.0.1'),(2229,'添加手册资料-Redis Rpushx 命令',1502241249,'admin','127.0.0.1'),(2230,'手册排序',1502241268,'admin','127.0.0.1'),(2231,'手册排序',1502241269,'admin','127.0.0.1'),(2232,'手册排序',1502241270,'admin','127.0.0.1'),(2233,'添加手册资料-Redis Sadd 命令',1502334022,'admin','127.0.0.1'),(2234,'更新手册资料-Redis Sadd 命令',1502334035,'admin','127.0.0.1'),(2235,'手册排序',1502334038,'admin','127.0.0.1'),(2236,'添加手册资料-Redis Scard 命令',1502334090,'admin','127.0.0.1'),(2237,'手册排序',1502334093,'admin','127.0.0.1'),(2238,'添加手册资料-Redis Sdiff 命令',1502334141,'admin','127.0.0.1'),(2239,'手册排序',1502334143,'admin','127.0.0.1'),(2240,'添加手册资料-Redis Sdiffstore 命令',1502334191,'admin','127.0.0.1'),(2241,'手册排序',1502334194,'admin','127.0.0.1'),(2242,'添加手册资料-Redis Sinter 命令',1502334246,'admin','127.0.0.1'),(2243,'手册排序',1502334249,'admin','127.0.0.1'),(2244,'添加手册资料-Redis Sinterstore 命令',1502334297,'admin','127.0.0.1'),(2245,'手册排序',1502334299,'admin','127.0.0.1'),(2246,'添加手册资料-Redis Sismember 命令',1502334348,'admin','127.0.0.1'),(2247,'手册排序',1502334350,'admin','127.0.0.1'),(2248,'添加手册资料-Redis Smembers 命令',1502334398,'admin','127.0.0.1'),(2249,'手册排序',1502334404,'admin','127.0.0.1'),(2250,'添加手册资料-Redis Smove 命令',1502334456,'admin','127.0.0.1'),(2251,'手册排序',1502334458,'admin','127.0.0.1'),(2252,'添加手册资料-Redis Spop 命令',1502334501,'admin','127.0.0.1'),(2253,'手册排序',1502334504,'admin','127.0.0.1'),(2254,'添加手册资料-Redis Srandmember 命令',1502334573,'admin','127.0.0.1'),(2255,'手册排序',1502334576,'admin','127.0.0.1'),(2256,'添加手册资料-Redis Srem 命令',1502334635,'admin','127.0.0.1'),(2257,'手册排序',1502334638,'admin','127.0.0.1'),(2258,'添加手册资料-Redis Sunion 命令',1502334695,'admin','127.0.0.1'),(2259,'手册排序',1502334699,'admin','127.0.0.1'),(2260,'添加手册资料-Redis Sunionstore 命令',1502334749,'admin','127.0.0.1'),(2261,'手册排序',1502334753,'admin','127.0.0.1'),(2262,'添加手册资料-Redis Sscan 命令',1502334798,'admin','127.0.0.1'),(2263,'手册排序',1502334803,'admin','127.0.0.1'),(2264,'添加手册资料-Redis Zadd 命令',1502334881,'admin','127.0.0.1'),(2265,'手册排序',1502334883,'admin','127.0.0.1'),(2266,'添加手册资料-Redis Zcard 命令',1502334940,'admin','127.0.0.1'),(2267,'手册排序',1502334943,'admin','127.0.0.1'),(2268,'添加手册资料-Redis Zcount 命令',1502334985,'admin','127.0.0.1'),(2269,'手册排序',1502334988,'admin','127.0.0.1'),(2270,'添加手册资料-Redis Zincrby 命令',1502335041,'admin','127.0.0.1'),(2271,'手册排序',1502335045,'admin','127.0.0.1'),(2272,'添加手册资料-Redis Zinterstore 命令',1502335123,'admin','127.0.0.1'),(2273,'手册排序',1502335126,'admin','127.0.0.1'),(2274,'添加手册资料-Redis Zlexcount 命令',1502335176,'admin','127.0.0.1'),(2275,'手册排序',1502335179,'admin','127.0.0.1'),(2276,'添加手册资料-Redis Zrange 命令',1502335233,'admin','127.0.0.1'),(2277,'手册排序',1502335236,'admin','127.0.0.1'),(2278,'添加手册资料-Redis Zrangebylex 命令',1502335357,'admin','127.0.0.1'),(2279,'手册排序',1502335362,'admin','127.0.0.1'),(2280,'添加手册资料-Redis Zrangebyscore 命令',1502335422,'admin','127.0.0.1'),(2281,'手册排序',1502335427,'admin','127.0.0.1'),(2282,'添加手册资料-Redis Zrank 命令',1502335475,'admin','127.0.0.1'),(2283,'手册排序',1502335479,'admin','127.0.0.1'),(2284,'添加手册资料-Redis Zrem 命令',1502335538,'admin','127.0.0.1'),(2285,'手册排序',1502335541,'admin','127.0.0.1'),(2286,'添加手册资料-Redis Zremrangebylex 命令',1502335597,'admin','127.0.0.1'),(2287,'手册排序',1502335600,'admin','127.0.0.1'),(2288,'添加手册资料-Redis Zremrangebyrank 命令',1502335890,'admin','127.0.0.1'),(2289,'手册排序',1502335894,'admin','127.0.0.1'),(2290,'添加手册资料-Redis Zremrangebyscore 命令',1502335942,'admin','127.0.0.1'),(2291,'手册排序',1502335945,'admin','127.0.0.1'),(2292,'添加手册资料-Redis Zrevrange 命令',1502335989,'admin','127.0.0.1'),(2293,'添加手册资料-Redis Zrevrangebyscore 命令',1502337589,'admin','127.0.0.1'),(2294,'添加手册资料-Redis Zrevrank 命令',1502337808,'admin','127.0.0.1'),(2295,'手册排序',1502343665,'admin','127.0.0.1'),(2296,'手册排序',1502343666,'admin','127.0.0.1'),(2297,'手册排序',1502343667,'admin','127.0.0.1'),(2298,'手册排序',1502343735,'admin','127.0.0.1'),(2299,'手册排序',1502343758,'admin','127.0.0.1'),(2300,'手册排序',1502343759,'admin','127.0.0.1'),(2301,'手册排序',1502343759,'admin','127.0.0.1'),(2302,'手册排序',1502343760,'admin','127.0.0.1'),(2303,'添加手册资料-Redis Zscore 命令',1502343820,'admin','127.0.0.1'),(2304,'添加手册资料-Redis Zunionstore 命令',1502343916,'admin','127.0.0.1'),(2305,'添加手册资料-Redis Zscan 命令',1502343958,'admin','127.0.0.1'),(2306,'手册排序',1502343979,'admin','127.0.0.1'),(2307,'手册排序',1502343980,'admin','127.0.0.1'),(2308,'手册排序',1502343981,'admin','127.0.0.1'),(2309,'添加手册资料-Redis Bgrewriteaof 命令',1502344060,'admin','127.0.0.1'),(2310,'手册排序',1502344064,'admin','127.0.0.1'),(2311,'添加手册资料-Redis Bgsave 命令',1502344124,'admin','127.0.0.1'),(2312,'手册排序',1502344127,'admin','127.0.0.1'),(2313,'添加手册资料-Redis Client Kill 命令',1502344189,'admin','127.0.0.1'),(2314,'手册排序',1502344192,'admin','127.0.0.1'),(2315,'添加手册资料-Redis Client List 命令',1502344324,'admin','127.0.0.1'),(2316,'手册排序',1502344327,'admin','127.0.0.1'),(2317,'添加手册资料-Redis Client Getname 命令',1502344381,'admin','127.0.0.1'),(2318,'手册排序',1502344384,'admin','127.0.0.1'),(2319,'添加手册资料-Redis Client Pause 命令',1502344424,'admin','127.0.0.1'),(2320,'手册排序',1502344426,'admin','127.0.0.1'),(2321,'添加手册资料-Redis Client Setname 命令',1502344477,'admin','127.0.0.1'),(2322,'手册排序',1502344480,'admin','127.0.0.1'),(2323,'添加手册资料-Redis Cluster Slots 命令',1502344530,'admin','127.0.0.1'),(2324,'手册排序',1502344536,'admin','127.0.0.1'),(2325,'添加手册资料-Redis Command 命令',1502344695,'admin','127.0.0.1'),(2326,'手册排序',1502344698,'admin','127.0.0.1'),(2327,'添加手册资料-Redis Command Count 命令',1502344751,'admin','127.0.0.1'),(2328,'手册排序',1502344755,'admin','127.0.0.1'),(2329,'添加手册资料-Redis Command Getkeys 命令',1502344798,'admin','127.0.0.1'),(2330,'手册排序',1502344801,'admin','127.0.0.1'),(2331,'添加手册资料-Redis Time 命令',1502344849,'admin','127.0.0.1'),(2332,'手册排序',1502344853,'admin','127.0.0.1'),(2333,'添加手册资料-Redis Command Info 命令',1502344907,'admin','127.0.0.1'),(2334,'手册排序',1502344911,'admin','127.0.0.1'),(2335,'添加手册资料-Redis Config Get 命令',1502344960,'admin','127.0.0.1'),(2336,'手册排序',1502344965,'admin','127.0.0.1'),(2337,'添加手册资料-Redis Config rewrite 命令',1502345081,'admin','127.0.0.1'),(2338,'添加手册资料-Redis Config Set 命令',1502345125,'admin','127.0.0.1'),(2339,'添加手册资料-Redis Config Resetstat 命令',1502345258,'admin','127.0.0.1'),(2340,'添加手册资料-Redis Dbsize 命令',1502345308,'admin','127.0.0.1'),(2341,'添加手册资料-Redis Debug Object 命令',1502345352,'admin','127.0.0.1'),(2342,'添加手册资料-Redis Debug Segfault 命令',1502345394,'admin','127.0.0.1'),(2343,'手册排序',1502345431,'admin','127.0.0.1'),(2344,'手册排序',1502345432,'admin','127.0.0.1'),(2345,'手册排序',1502345433,'admin','127.0.0.1'),(2346,'手册排序',1502345434,'admin','127.0.0.1'),(2347,'手册排序',1502345434,'admin','127.0.0.1'),(2348,'手册排序',1502345435,'admin','127.0.0.1'),(2349,'添加手册资料-Redis Flushall 命令',1502345484,'admin','127.0.0.1'),(2350,'添加手册资料-Redis Flushdb 命令',1502345534,'admin','127.0.0.1'),(2351,'添加手册资料-Redis Info 命令',1502345783,'admin','127.0.0.1'),(2352,'添加手册资料-Redis Lastsave 命令',1502345830,'admin','127.0.0.1'),(2353,'添加手册资料-Redis Monitor 命令',1502345875,'admin','127.0.0.1'),(2354,'添加手册资料-Redis Role 命令',1502345923,'admin','127.0.0.1'),(2355,'添加手册资料-Redis Save 命令',1502345966,'admin','127.0.0.1'),(2356,'添加手册资料-Redis Shutdown 命令',1502346121,'admin','127.0.0.1'),(2357,'添加手册资料-Redis Slaveof 命令',1502346171,'admin','127.0.0.1'),(2358,'添加手册资料-Redis Showlog 命令',1502351314,'admin','127.0.0.1'),(2359,'添加手册资料-Redis Sync 命令',1502351373,'admin','127.0.0.1'),(2360,'手册排序',1502351421,'admin','127.0.0.1'),(2361,'手册排序',1502351422,'admin','127.0.0.1'),(2362,'手册排序',1502351422,'admin','127.0.0.1'),(2363,'手册排序',1502351423,'admin','127.0.0.1'),(2364,'手册排序',1502351424,'admin','127.0.0.1'),(2365,'手册排序',1502351424,'admin','127.0.0.1'),(2366,'手册排序',1502351425,'admin','127.0.0.1'),(2367,'手册排序',1502351426,'admin','127.0.0.1'),(2368,'手册排序',1502351438,'admin','127.0.0.1'),(2369,'手册排序',1502351439,'admin','127.0.0.1'),(2370,'手册排序',1502351440,'admin','127.0.0.1');
/*!40000 ALTER TABLE `card_log` ENABLE KEYS */;

#
# Structure for table "card_manual"
#

DROP TABLE IF EXISTS `card_manual`;
CREATE TABLE `card_manual` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `uid` int(11) NOT NULL DEFAULT '0' COMMENT '用户ID',
  `pid` int(11) NOT NULL DEFAULT '0' COMMENT '分类',
  `type` int(1) NOT NULL DEFAULT '0' COMMENT '内容：1，页面：2',
  `title` varchar(255) NOT NULL DEFAULT '' COMMENT '标题',
  `en_title` varchar(255) NOT NULL DEFAULT '' COMMENT '英文名',
  `link` varchar(255) NOT NULL DEFAULT '' COMMENT '链接',
  `optime` int(11) NOT NULL DEFAULT '0' COMMENT '发布时间',
  `content` text NOT NULL COMMENT '内容',
  `views` int(11) NOT NULL DEFAULT '0' COMMENT '浏览人数',
  `sort` int(11) NOT NULL DEFAULT '0' COMMENT '排序',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=204 DEFAULT CHARSET=utf8 COMMENT='手册';

#
# Data for table "card_manual"
#

/*!40000 ALTER TABLE `card_manual` DISABLE KEYS */;
INSERT INTO `card_manual` VALUES (21,1,58,1,'Redis 教程','','',1501516800,'REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。\r\n\r\nRedis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。\r\n\r\n它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。\r\n\r\n![](../../Public/Uploads/manual/59804885df1a6.png)\r\n\r\n------------\r\n\r\n\r\n#### 谁适合阅读本教程？\r\n本教程是为专业的程序开发人员，通过本教程你可以一步一步了解 Redis 的应用。\r\n\r\n------------\r\n\r\n#### 阅读本教程前，您需要了解的知识\r\n在阅读本教程前，你需要了解基本的数据结构。',3,1),(22,1,58,1,'Redis 简介','','',1501516800,'Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。\r\nRedis 与其他 key - value 缓存产品有以下三个特点：\r\n- Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。\r\n- Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。\r\n- Redis支持数据的备份，即master-slave模式的数据备份。\r\n\r\n------------\r\n\r\n#### Redis 优势\r\n- 性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。\r\n- 丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。\r\n- 原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。\r\n- 丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。\r\n\r\n------------\r\n\r\n#### Redis与其他key-value存储有什么不同？\r\n- Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。\r\n- Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。',2,2),(23,1,58,1,'Redis 安装','','',1501516800,'#### Window 下安装\r\n下载地址：https://github.com/MSOpenTech/redis/releases。\r\nRedis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 Redis-x64-xxx.zip压缩包到 C 盘，解压后，将文件夹重新命名为 redis。\r\n\r\n![](../../Public/Uploads/manual/59804b9a95665.jpg)\r\n\r\n打开一个 cmd 窗口 使用cd命令切换目录到 C:\\redis 运行 redis-server.exe redis.windows.conf 。\r\n如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略，如果省略，会启用默认的。输入之后，会显示如下界面：\r\n\r\n![](../../Public/Uploads/manual/59804be98eef2.png)\r\n\r\n这时候另启一个cmd窗口，原来的不要关闭，不然就无法访问服务端了。\r\n切换到redis目录下运行 redis-cli.exe -h 127.0.0.1 -p 6379 。\r\n设置键值对 set myKey abc\r\n取出键值对 get myKey\r\n\r\n![](../../Public/Uploads/manual/59804bf543a86.jpg)\r\n\r\n\r\n------------\r\n\r\n#### Linux 下安装\r\n下载地址：http://redis.io/download，下载最新文档版本。\r\n本教程使用的最新文档版本为 2.8.17，下载并安装：\r\n```shell\r\n$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz\r\n$ tar xzf redis-2.8.17.tar.gz\r\n$ cd redis-2.8.17\r\n$ make\r\n```\r\nmake完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下：\r\n下面启动redis服务.\r\n```shell\r\n$ cd src\r\n$ ./redis-server\r\n```\r\n注意这种方式启动redis 使用的是默认配置。也可以通过启动参数告诉redis使用指定配置文件使用下面命令启动。\r\n```shell\r\n$ cd src\r\n$ ./redis-server redis.conf\r\n```\r\nredis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件。\r\n启动redis服务进程后，就可以使用测试客户端程序redis-cli和redis服务交互了。 比如：\r\n```shell\r\n$ cd src\r\n$ ./redis-cli\r\nredis&gt; set foo bar\r\nOK\r\nredis&gt; get foo\r\n&quot;bar&quot;\r\n```\r\n\r\n------------\r\n\r\n#### Ubuntu 下安装\r\n在 Ubuntu 系统安装 Redi 可以使用以下命令:\r\n```shell\r\n$sudo apt-get update\r\n$sudo apt-get install redis-server\r\n```\r\n启动 Redis\r\n```shell\r\n$ redis-server\r\n```\r\n查看 redis 是否启动？\r\n```shell\r\n$ redis-cli\r\n```\r\n以上命令将打开以下终端：\r\n```shell\r\nredis 127.0.0.1:6379&gt;\r\n```\r\n127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。\r\n```shell\r\nredis 127.0.0.1:6379&gt; ping\r\nPONG\r\n```\r\n以上说明我们已经成功安装了redis。',2,3),(24,1,58,1,'Redis 配置','','',1501516800,'Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf。\r\n你可以通过 CONFIG 命令查看或设置配置项。\r\n\r\n------------\r\n\r\n#### 语法\r\nRedis CONFIG 命令格式如下：\r\n```shell\r\nredis 127.0.0.1:6379&gt; CONFIG GET CONFIG_SETTING_NAME\r\n```\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; CONFIG GET loglevel\r\n\r\n1) &quot;loglevel&quot;\r\n2) &quot;notice&quot;\r\n```\r\n使用 * 号获取所有配置项：\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; CONFIG GET *\r\n\r\n  1) &quot;dbfilename&quot;\r\n  2) &quot;dump.rdb&quot;\r\n  3) &quot;requirepass&quot;\r\n  4) &quot;&quot;\r\n  5) &quot;masterauth&quot;\r\n  6) &quot;&quot;\r\n  7) &quot;unixsocket&quot;\r\n  8) &quot;&quot;\r\n  9) &quot;logfile&quot;\r\n 10) &quot;&quot;\r\n 11) &quot;pidfile&quot;\r\n 12) &quot;/var/run/redis.pid&quot;\r\n 13) &quot;maxmemory&quot;\r\n 14) &quot;0&quot;\r\n 15) &quot;maxmemory-samples&quot;\r\n 16) &quot;3&quot;\r\n 17) &quot;timeout&quot;\r\n 18) &quot;0&quot;\r\n 19) &quot;tcp-keepalive&quot;\r\n 20) &quot;0&quot;\r\n 21) &quot;auto-aof-rewrite-percentage&quot;\r\n 22) &quot;100&quot;\r\n 23) &quot;auto-aof-rewrite-min-size&quot;\r\n 24) &quot;67108864&quot;\r\n 25) &quot;hash-max-ziplist-entries&quot;\r\n 26) &quot;512&quot;\r\n 27) &quot;hash-max-ziplist-value&quot;\r\n 28) &quot;64&quot;\r\n 29) &quot;list-max-ziplist-entries&quot;\r\n 30) &quot;512&quot;\r\n 31) &quot;list-max-ziplist-value&quot;\r\n 32) &quot;64&quot;\r\n 33) &quot;set-max-intset-entries&quot;\r\n 34) &quot;512&quot;\r\n 35) &quot;zset-max-ziplist-entries&quot;\r\n 36) &quot;128&quot;\r\n 37) &quot;zset-max-ziplist-value&quot;\r\n 38) &quot;64&quot;\r\n 39) &quot;hll-sparse-max-bytes&quot;\r\n 40) &quot;3000&quot;\r\n 41) &quot;lua-time-limit&quot;\r\n 42) &quot;5000&quot;\r\n 43) &quot;slowlog-log-slower-than&quot;\r\n 44) &quot;10000&quot;\r\n 45) &quot;latency-monitor-threshold&quot;\r\n 46) &quot;0&quot;\r\n 47) &quot;slowlog-max-len&quot;\r\n 48) &quot;128&quot;\r\n 49) &quot;port&quot;\r\n 50) &quot;6379&quot;\r\n 51) &quot;tcp-backlog&quot;\r\n 52) &quot;511&quot;\r\n 53) &quot;databases&quot;\r\n 54) &quot;16&quot;\r\n 55) &quot;repl-ping-slave-period&quot;\r\n 56) &quot;10&quot;\r\n 57) &quot;repl-timeout&quot;\r\n 58) &quot;60&quot;\r\n 59) &quot;repl-backlog-size&quot;\r\n 60) &quot;1048576&quot;\r\n 61) &quot;repl-backlog-ttl&quot;\r\n 62) &quot;3600&quot;\r\n 63) &quot;maxclients&quot;\r\n 64) &quot;4064&quot;\r\n 65) &quot;watchdog-period&quot;\r\n 66) &quot;0&quot;\r\n 67) &quot;slave-priority&quot;\r\n 68) &quot;100&quot;\r\n 69) &quot;min-slaves-to-write&quot;\r\n 70) &quot;0&quot;\r\n 71) &quot;min-slaves-max-lag&quot;\r\n 72) &quot;10&quot;\r\n 73) &quot;hz&quot;\r\n 74) &quot;10&quot;\r\n 75) &quot;no-appendfsync-on-rewrite&quot;\r\n 76) &quot;no&quot;\r\n 77) &quot;slave-serve-stale-data&quot;\r\n 78) &quot;yes&quot;\r\n 79) &quot;slave-read-only&quot;\r\n 80) &quot;yes&quot;\r\n 81) &quot;stop-writes-on-bgsave-error&quot;\r\n 82) &quot;yes&quot;\r\n 83) &quot;daemonize&quot;\r\n 84) &quot;no&quot;\r\n 85) &quot;rdbcompression&quot;\r\n 86) &quot;yes&quot;\r\n 87) &quot;rdbchecksum&quot;\r\n 88) &quot;yes&quot;\r\n 89) &quot;activerehashing&quot;\r\n 90) &quot;yes&quot;\r\n 91) &quot;repl-disable-tcp-nodelay&quot;\r\n 92) &quot;no&quot;\r\n 93) &quot;aof-rewrite-incremental-fsync&quot;\r\n 94) &quot;yes&quot;\r\n 95) &quot;appendonly&quot;\r\n 96) &quot;no&quot;\r\n 97) &quot;dir&quot;\r\n 98) &quot;/home/deepak/Downloads/redis-2.8.13/src&quot;\r\n 99) &quot;maxmemory-policy&quot;\r\n100) &quot;volatile-lru&quot;\r\n101) &quot;appendfsync&quot;\r\n102) &quot;everysec&quot;\r\n103) &quot;save&quot;\r\n104) &quot;3600 1 300 100 60 10000&quot;\r\n105) &quot;loglevel&quot;\r\n106) &quot;notice&quot;\r\n107) &quot;client-output-buffer-limit&quot;\r\n108) &quot;normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60&quot;\r\n109) &quot;unixsocketperm&quot;\r\n110) &quot;0&quot;\r\n111) &quot;slaveof&quot;\r\n112) &quot;&quot;\r\n113) &quot;notify-keyspace-events&quot;\r\n114) &quot;&quot;\r\n115) &quot;bind&quot;\r\n116) &quot;&quot;\r\n```\r\n\r\n------------\r\n\r\n#### 编辑配置\r\n你可以通过修改 redis.conf 文件或使用 CONFIG set 命令来修改配置。\r\n##### 语法\r\nCONFIG SET 命令基本语法：\r\nredis 127.0.0.1:6379&gt; CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE\r\n##### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; CONFIG SET loglevel &quot;notice&quot;\r\nOK\r\nredis 127.0.0.1:6379&gt; CONFIG GET loglevel\r\n\r\n1) &quot;loglevel&quot;\r\n2) &quot;notice&quot;\r\n```\r\n\r\n------------\r\n\r\n#### 参数说明\r\nredis.conf 配置项说明如下：\r\n- 1.Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程\r\n-     `daemonize no`\r\n- 2.当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定\r\n-     `pidfile /var/run/redis.pid`\r\n- 3.指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字\r\n-     `port 6379`\r\n- 4.绑定的主机地址\r\n-     `bind 127.0.0.1`\r\n- 5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能\r\n-     `timeout 300`\r\n- 6.指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose\r\n-     `loglevel verbose`\r\n- 7.日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null\r\n-     `logfile stdout`\r\n- 8.设置数据库的数量，默认数据库为0，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库id\r\n-     `databases 16`\r\n- 9.指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合\r\n-     `save &lt;seconds&gt; &lt;changes&gt;`\r\n-     Redis默认配置文件中提供了三个条件：\r\n     `save 900 1\r\n     save 300 10\r\n     save 60 10000`\r\n-     分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。\r\n-  \r\n- 10.指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大\r\n-     `rdbcompression yes`\r\n- 11.指定本地数据库文件名，默认值为dump.rdb\r\n-     `dbfilename dump.rdb`\r\n- 12.指定本地数据库存放目录\r\n-     `dir ./`\r\n- 13.设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步\r\n-     `slaveof &lt;masterip&gt; &lt;masterport&gt;`\r\n- 14.当master服务设置了密码保护时，slav服务连接master的密码\r\n-     `masterauth &lt;master-password&gt;`\r\n- 15.设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH &lt;password&gt;命令提供密码，默认关闭\r\n-     `requirepass foobared`\r\n- 16.设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息\r\n-     `maxclients 128`\r\n- 17.指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区\r\n-     `maxmemory &lt;bytes&gt;`\r\n- 18.指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no\r\n-     `appendonly no`\r\n- 19.指定更新日志文件名，默认为appendonly.aof\r\n-      `appendfilename appendonly.aof`\r\n- 20.指定更新日志条件，共有3个可选值： \r\n-     `no：`表示等操作系统进行数据缓存同步到磁盘（快） \r\n-     `always：`表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） \r\n-     `everysec：`表示每秒同步一次（折衷，默认值）\r\n-     `appendfsync everysec`\r\n-  \r\n- 21.指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）\r\n-      `vm-enabled no`\r\n- 22.虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享\r\n-      `vm-swap-file /tmp/redis.swap`\r\n- 23.将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0\r\n-      `vm-max-memory 0`\r\n- 24.Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值\r\n-      `vm-page-size 32`\r\n- 25.设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。\r\n-      `vm-pages 134217728`\r\n- 26.设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4\r\n-      `vm-max-threads 4`\r\n- 27.设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启\r\n-     `glueoutputbuf yes`\r\n- 28.指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法\r\n     `hash-max-zipmap-entries 64\r\n     hash-max-zipmap-value 512`\r\n- 29.指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）\r\n-     `activerehashing yes`\r\n- 30.指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件\r\n-     `include /path/to/local.conf`',2,4),(25,1,58,1,'Redis 数据类型','','',1501516800,'Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。\r\n\r\n------------\r\n\r\n#### String（字符串）\r\nstring是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。\r\nstring类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。\r\nstring类型是Redis最基本的数据类型，一个键最大能存储512MB。\r\n##### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SET name &quot;runoob&quot;\r\nOK\r\nredis 127.0.0.1:6379&gt; GET name\r\n&quot;runoob&quot;\r\n```\r\n在以上实例中我们使用了 Redis 的 SET 和 GET 命令。键为 name，对应的值为 runoob。\r\n注意：一个键最大能存储512MB。\r\n\r\n------------\r\n\r\n#### Hash（哈希）\r\nRedis hash 是一个键名对集合。\r\nRedis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。\r\n##### 实例\r\n```shell\r\n127.0.0.1:6379&gt; HMSET user:1 username runoob password runoob points 200\r\nOK\r\n127.0.0.1:6379&gt; HGETALL user:1\r\n1) &quot;username&quot;\r\n2) &quot;runoob&quot;\r\n3) &quot;password&quot;\r\n4) &quot;runoob&quot;\r\n5) &quot;points&quot;\r\n6) &quot;200&quot;\r\n```\r\n以上实例中 hash 数据类型存储了包含用户脚本信息的用户对象。 实例中我们使用了 Redis HMSET, HGETALL 命令，user:1 为键值。\r\n每个 hash 可以存储 232 -1 键值对（40多亿）。\r\n\r\n------------\r\n\r\n#### List（列表）\r\nRedis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。\r\n实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; lpush runoob redis\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; lpush runoob mongodb\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; lpush runoob rabitmq\r\n(integer) 3\r\nredis 127.0.0.1:6379&gt; lrange runoob 0 10\r\n1) &quot;rabitmq&quot;\r\n2) &quot;mongodb&quot;\r\n3) &quot;redis&quot;\r\nredis 127.0.0.1:6379&gt;\r\n```\r\n列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。\r\n\r\n------------\r\n\r\n#### Set（集合）\r\nRedis的Set是string类型的无序集合。\r\n集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。\r\n##### sadd 命令\r\n添加一个string元素到,key对应的set集合中，成功返回1,如果元素已经在集合中返回0,key对应的set不存在返回错误。\r\n```shell\r\nsadd key member\r\n```\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; sadd runoob redis\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; sadd runoob mongodb\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; sadd runoob rabitmq\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; sadd runoob rabitmq\r\n(integer) 0\r\nredis 127.0.0.1:6379&gt; smembers runoob\r\n\r\n1) &quot;rabitmq&quot;\r\n2) &quot;mongodb&quot;\r\n3) &quot;redis&quot;\r\n```\r\n注意：以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。\r\n集合中最大的成员数为 232 - 1(4294967295, 每个集合可存储40多亿个成员)。\r\n\r\n------------\r\n\r\n#### zset(sorted set：有序集合)\r\nRedis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。\r\n不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。\r\nzset的成员是唯一的,但分数(score)却可以重复。\r\n##### zadd 命令\r\n添加元素到集合，元素在集合中存在则更新对应score\r\n```shell\r\nzadd key score member \r\n```\r\n##### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; zadd runoob 0 redis\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; zadd runoob 0 mongodb\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; zadd runoob 0 rabitmq\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; zadd runoob 0 rabitmq\r\n(integer) 0\r\nredis 127.0.0.1:6379&gt; ZRANGEBYSCORE runoob 0 1000\r\n\r\n1) &quot;redis&quot;\r\n2) &quot;mongodb&quot;\r\n3) &quot;rabitmq&quot;\r\n```',2,5),(26,1,59,1,'Redis 命令','','',1501516800,'Redis 命令用于在 redis 服务上执行操作。\r\n要在 redis 服务上执行命令需要一个 redis 客户端。Redis 客户端在我们之前下载的的 redis 的安装包中。\r\n##### 语法\r\nRedis 客户端的基本语法为：\r\n```shell\r\n$ redis-cli\r\n```\r\n##### 实例\r\n以下实例讲解了如何启动 redis 客户端：\r\n启动 redis 客户端，打开终端并输入命令 redis-cli。该命令会连接本地的 redis 服务。\r\n```shell\r\n$redis-cli\r\nredis 127.0.0.1:6379&gt;\r\nredis 127.0.0.1:6379&gt; PING\r\n\r\nPONG\r\n```\r\n在以上实例中我们连接到本地的 redis 服务并执行 PING 命令，该命令用于检测 redis 服务是否启动。\r\n\r\n------------\r\n\r\n#### 在远程服务上执行命令\r\n如果需要在远程 redis 服务上执行命令，同样我们使用的也是 redis-cli 命令。\r\n##### 语法\r\n```shell\r\n$ redis-cli -h host -p port -a password\r\n```\r\n##### 实例\r\n以下实例演示了如何连接到主机为 127.0.0.1，端口为 6379 ，密码为 mypass 的 redis 服务上。\r\n```shell\r\n$redis-cli -h 127.0.0.1 -p 6379 -a &quot;mypass&quot;\r\nredis 127.0.0.1:6379&gt;\r\nredis 127.0.0.1:6379&gt; PING\r\n\r\nPONG\r\n```',2,1),(27,1,60,1,'Redis 数据备份与恢复','','',1501516800,'Redis SAVE 命令用于创建当前数据库的备份。\r\n##### 语法\r\nredis Save 命令基本语法如下：\r\n```shell\r\nredis 127.0.0.1:6379&gt; SAVE \r\n```\r\n##### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SAVE \r\nOK\r\n```\r\n该命令将在 redis 安装目录中创建dump.rdb文件。\r\n\r\n------------\r\n\r\n#### 恢复数据\r\n如果需要恢复数据，只需将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可。获取 redis 目录可以使用 CONFIG 命令，如下所示：\r\n```shell\r\nredis 127.0.0.1:6379&gt; CONFIG GET dir\r\n1) &quot;dir&quot;\r\n2) &quot;/usr/local/redis/bin&quot;\r\n```\r\n以上命令 CONFIG GET dir 输出的 redis 安装目录为 `/usr/local/redis/bin。`\r\n\r\n------------\r\n\r\n#### Bgsave\r\n创建 redis 备份文件也可以使用命令 BGSAVE，该命令在后台执行。\r\n实例\r\n```shell\r\n127.0.0.1:6379&gt; BGSAVE\r\n\r\nBackground saving started\r\n```',2,1),(28,1,60,1,'Redis 安全','','',1501516800,'我们可以通过 redis 的配置文件设置密码参数，这样客户端连接到 redis 服务就需要密码验证，这样可以让你的 redis 服务更安全。\r\n##### 实例\r\n我们可以通过以下命令查看是否设置了密码验证：\r\n```shell\r\n127.0.0.1:6379&gt; CONFIG get requirepass\r\n1) &quot;requirepass&quot;\r\n2) &quot;&quot;\r\n```\r\n默认情况下 requirepass 参数是空的，这就意味着你无需通过密码验证就可以连接到 redis 服务。\r\n你可以通过以下命令来修改该参数：\r\n```shell\r\n127.0.0.1:6379&gt; CONFIG set requirepass &quot;runoob&quot;\r\nOK\r\n127.0.0.1:6379&gt; CONFIG get requirepass\r\n1) &quot;requirepass&quot;\r\n2) &quot;runoob&quot;\r\n```\r\n设置密码后，客户端连接 redis 服务就需要密码验证，否则无法执行命令。\r\n##### 语法\r\nAUTH 命令基本语法格式如下：\r\n```shell\r\n127.0.0.1:6379&gt; AUTH password\r\n```\r\n##### 实例\r\n```shell\r\n127.0.0.1:6379&gt; AUTH &quot;runoob&quot;\r\nOK\r\n127.0.0.1:6379&gt; SET mykey &quot;Test value&quot;\r\nOK\r\n127.0.0.1:6379&gt; GET mykey\r\n&quot;Test value&quot;\r\n```',1,2),(29,1,60,1,'Redis 性能测试','','',1501516800,'Redis 性能测试是通过同时执行多个命令实现的。\r\n##### 语法\r\nredis 性能测试的基本命令如下：\r\n```shell\r\nredis-benchmark [option] [option value]\r\n```\r\n##### 实例\r\n以下实例同时执行 10000 个请求来检测性能：\r\n```shell\r\nredis-benchmark -n 10000\r\n\r\nPING_INLINE: 141043.72 requests per second\r\nPING_BULK: 142857.14 requests per second\r\nSET: 141442.72 requests per second\r\nGET: 145348.83 requests per second\r\nINCR: 137362.64 requests per second\r\nLPUSH: 145348.83 requests per second\r\nLPOP: 146198.83 requests per second\r\nSADD: 146198.83 requests per second\r\nSPOP: 149253.73 requests per second\r\nLPUSH (needed to benchmark LRANGE): 148588.42 requests per second\r\nLRANGE_100 (first 100 elements): 58411.21 requests per second\r\nLRANGE_300 (first 300 elements): 21195.42 requests per second\r\nLRANGE_500 (first 450 elements): 14539.11 requests per second\r\nLRANGE_600 (first 600 elements): 10504.20 requests per second\r\nMSET (10 keys): 93283.58 requests per second\r\n```\r\nredis 性能测试工具可选参数如下所示：\r\n\r\n| ID  |  选项 | 描述  | 默认值  |\r\n| ------------ | ------------ | ------------ | ------------ |\r\n| 1  | -h  | 指定服务器主机名  | 127.0.0.1  |\r\n| 2  | -p  | 指定服务器端口  | 6379  |\r\n| 3  | -s  | 指定服务器  | socket  |\r\n| 4  | -c  | 指定并发连接数  | 50  |\r\n| 5  | -n  | 指定请求数  | 10000  |\r\n| 6  | -d  |  以字节的形式指定 SET/GET 值的数据大小 | 2  |\r\n| 7  | -k  | 1=keep alive 0=reconnect  | 1  |\r\n| 8  | -r  | SET/GET/INCR 使用随机 key, SADD 使用随机值  |   |\r\n| 9  | -P  | 通过管道传输 &lt;numreq&gt; 请求  | 1  |\r\n| 10  |  -q | 强制退出 redis。仅显示 query/sec 值  |   |\r\n| 11  | --csv  | 以 CSV 格式输出  |   |\r\n| 12  | -l  | 生成循环，永久执行测试  |   |\r\n| 13  | -t  | 仅运行以逗号分隔的测试命令列表。  |   |\r\n| 14  | -I  | Idle 模式。仅打开 N 个 idle 连接并等待。  |  | |\r\n\r\n##### 实例\r\n以下实例我们使用了多个参数来测试 redis 性能：\r\n```shell\r\nredis-benchmark -h 127.0.0.1 -p 6379 -t set,lpush -n 10000 -q\r\n\r\nSET: 146198.83 requests per second\r\nLPUSH: 145560.41 requests per second\r\n```\r\n以上实例中主机为 127.0.0.1，端口号为 6379，执行的命令为 set,lpush，请求数为 10000，通过 -q 参数让结果只显示每秒执行的请求数。',5,3),(30,1,60,1,'Redis 客户端连接','','',1501603200,'Redis 通过监听一个 TCP 端口或者 Unix socket 的方式来接收来自客户端的连接，当一个连接建立后，Redis 内部会进行以下一些操作：\r\n- 首先，客户端 socket 会被设置为非阻塞模式，因为 Redis 在网络事件处理上采用的是非阻塞多路复用模型。\r\n- 然后为这个 socket 设置 TCP_NODELAY 属性，禁用 Nagle 算法\r\n- 然后创建一个可读的文件事件用于监听这个客户端 socket 的数据发送\r\n\r\n------------\r\n\r\n#### 最大连接数\r\n在 Redis2.4 中，最大连接数是被直接硬编码在代码里面的，而在2.6版本中这个值变成可配置的。\r\nmaxclients 的默认值是 10000，你也可以在 redis.conf 中对这个值进行修改。\r\n```shell\r\nconfig get maxclients\r\n\r\n1) &quot;maxclients&quot;\r\n2) &quot;10000&quot;\r\n```\r\n##### 实例\r\n以下实例我们在服务启动时设置最大连接数为 100000：\r\n```shell\r\nredis-server --maxclients 100000\r\n```\r\n\r\n------------\r\n\r\n#### 客户端命令\r\n\r\n| S.N.  | 命令  | 描述  |\r\n| ------------ | ------------ | ------------ |\r\n| 1  | client list  |  返回连接到 redis 服务的客户端列表 |\r\n| 2  | client setname  | 设置当前连接的名称  |\r\n| 3  | client getname  | 获取通过 client setname 命令设置的服务名称  |\r\n| 4  | client pause  | 挂起客户端连接，指定挂起的时间以毫秒计  |\r\n| 5  | client kill  | 关闭客户端连接  |',2,4),(31,1,60,1,'Redis 管道技术','','',1501603200,'Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求会遵循以下步骤：\r\n- 客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。\r\n- 服务端处理命令，并将结果返回给客户端。\r\n\r\n------------\r\n\r\n#### Redis 管道技术\r\nRedis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。\r\n##### 实例\r\n查看 redis 管道，只需要启动 redis 实例并输入以下命令：\r\n```shell\r\n$(echo -en &quot;PING\\r\\n SET runoobkey redis\\r\\nGET runoobkey\\r\\nINCR visitor\\r\\nINCR visitor\\r\\nINCR visitor\\r\\n&quot;; sleep 10) | nc localhost 6379\r\n\r\n+PONG\r\n+OK\r\nredis\r\n:1\r\n:2\r\n:3\r\n```\r\n以上实例中我们通过使用 PING 命令查看redis服务是否可用， 之后我们们设置了 runoobkey 的值为 redis，然后我们获取 runoobkey 的值并使得 visitor 自增 3 次。\r\n在返回的结果中我们可以看到这些命令一次性向 redis 服务提交，并最终一次性读取所有服务端的响应\r\n\r\n------------\r\n\r\n#### 管道技术的优势\r\n管道技术最显著的优势是提高了 redis 服务的性能。\r\n##### 一些测试数据\r\n在下面的测试中，我们将使用Redis的Ruby客户端，支持管道技术特性，测试管道技术对速度的提升效果。\r\n```shell\r\nrequire \'rubygems\' \r\nrequire \'redis\'\r\ndef bench(descr) \r\nstart = Time.now \r\nyield \r\nputs &quot;#{descr} #{Time.now-start} seconds&quot; \r\nend\r\ndef without_pipelining \r\nr = Redis.new \r\n10000.times { \r\n\tr.ping \r\n} \r\nend\r\ndef with_pipelining \r\nr = Redis.new \r\nr.pipelined { \r\n\t10000.times { \r\n\t\tr.ping \r\n\t} \r\n} \r\nend\r\nbench(&quot;without pipelining&quot;) { \r\n\twithout_pipelining \r\n} \r\nbench(&quot;with pipelining&quot;) { \r\n\twith_pipelining \r\n}\r\n```\r\n从处于局域网中的Mac OS X系统上执行上面这个简单脚本的数据表明，开启了管道操作后，往返时延已经被改善得相当低了。\r\n```shell\r\nwithout pipelining 1.185238 seconds \r\nwith pipelining 0.250783 seconds\r\n```\r\n如你所见，开启管道后，我们的速度效率提升了5倍。',1,5),(32,1,60,1,'Redis 分区','','',1501603200,'分区是分割数据到多个Redis实例的处理过程，因此每个实例只保存key的一个子集。\r\n##### 分区的优势\r\n- 通过利用多台计算机内存的和值，允许我们构造更大的数据库。\r\n- 通过多核和多台计算机，允许我们扩展计算能力；通过多台计算机和网络适配器，允许我们扩展网络带宽。\r\n\r\n##### 分区的不足\r\nredis的一些特性在分区方面表现的不是很好：\r\n- 涉及多个key的操作通常是不被支持的。举例来说，当两个set映射到不同的redis实例上时，你就不能对这两个set执行交集操作。\r\n- 涉及多个key的redis事务不能使用。\r\n- 当使用分区时，数据处理较为复杂，比如你需要处理多个rdb/aof文件，并且从多个实例和主机备份持久化文件。\r\n- 增加或删除容量也比较复杂。redis集群大多数支持在运行时增加、删除节点的透明数据平衡的能力，但是类似于客户端分区、代理等其他系统则不支持这项特性。然而，一种叫做presharding的技术对此是有帮助的。\r\n\r\n------------\r\n\r\n#### 分区类型\r\nRedis 有两种类型分区。 假设有4个Redis实例 R0，R1，R2，R3，和类似user:1，user:2这样的表示用户的多个key，对既定的key有多种不同方式来选择这个key存放在哪个实例中。也就是说，有不同的系统来映射某个key到某个Redis服务。\r\n##### 范围分区\r\n最简单的分区方式是按范围分区，就是映射一定范围的对象到特定的Redis实例。\r\n比如，ID从0到10000的用户会保存到实例R0，ID从10001到 20000的用户会保存到R1，以此类推。\r\n这种方式是可行的，并且在实际中使用，不足就是要有一个区间范围到实例的映射表。这个表要被管理，同时还需要各 种对象的映射表，通常对Redis来说并非是好的方法。\r\n##### 哈希分区\r\n另外一种分区方法是hash分区。这对任何key都适用，也无需是object_name:这种形式，像下面描述的一样简单：\r\n- 用一个hash函数将key转换为一个数字，比如使用crc32 hash函数。对key foobar执行crc32(foobar)会输出类似93024922的整数。\r\n- 对这个整数取模，将其转化为0-3之间的数字，就可以将这个整数映射到4个Redis实例中的一个了。93024922 % 4 = 2，就是说key foobar应该被存到R2实例中。注意：取模操作是取除的余数，通常在多种编程语言中用%操作符实现。',1,6),(33,1,60,1,'Java 使用 Redis','','',1501603200,'#### 安装\r\n开始在 Java 中使用 Redis 前， 我们需要确保已经安装了 redis 服务及 Java redis 驱动，且你的机器上能正常使用 Java。 Java的安装配置可以参考我们的 Java开发环境配置 接下来让我们安装 Java redis 驱动：\r\n\r\n- 首先你需要下载驱动包，下载 jedis.jar，确保下载最新驱动包。\r\n- 在你的classpath中包含该驱动包。\r\n\r\n------------\r\n\r\n#### 连接到 redis 服务\r\n##### 实例\r\n```java\r\nimport redis.clients.jedis.Jedis;\r\n \r\npublic class RedisJava {\r\n    public static void main(String[] args) {\r\n        //连接本地的 Redis 服务\r\n        Jedis jedis = new Jedis(&quot;localhost&quot;);\r\n        System.out.println(&quot;连接成功&quot;);\r\n        //查看服务是否运行\r\n        System.out.println(&quot;服务正在运行: &quot;+jedis.ping());\r\n    }\r\n}\r\n```\r\n编译以上 Java 程序，确保驱动包的路径是正确的。\r\n```java\r\n连接成功\r\n服务正在运行: PONG\r\n```\r\n\r\n------------\r\n#### Redis Java String(字符串) 实例\r\n##### 实例\r\n```java\r\nimport redis.clients.jedis.Jedis;\r\npublic class RedisStringJava {\r\n   public static void main(String[] args) {\r\n      //连接本地的 Redis 服务\r\n      Jedis jedis = new Jedis(&quot;localhost&quot;);\r\n      System.out.println(&quot;Connection to server sucessfully&quot;);\r\n      //设置 redis 字符串数据\r\n      jedis.set(&quot;w3ckey&quot;, &quot;Redis tutorial&quot;);\r\n     // 获取存储的数据并输出\r\n     System.out.println(&quot;Stored string in redis:: &quot;+ jedis.get(&quot;w3ckey&quot;));\r\n }\r\n}\r\n```\r\n编译以上程序。\r\n```java\r\n$javac RedisStringJava.java\r\n$java RedisStringJava\r\nConnection to server sucessfully\r\nStored string in redis:: Redis tutorial\r\n```\r\n\r\n------------\r\n\r\n#### Redis Java List(列表) 实例\r\n```java\r\nimport redis.clients.jedis.Jedis;\r\npublic class RedisListJava {\r\n   public static void main(String[] args) {\r\n      //连接本地的 Redis 服务\r\n      Jedis jedis = new Jedis(&quot;localhost&quot;);\r\n      System.out.println(&quot;Connection to server sucessfully&quot;);\r\n      //存储数据到列表中\r\n      jedis.lpush(&quot;tutorial-list&quot;, &quot;Redis&quot;);\r\n      jedis.lpush(&quot;tutorial-list&quot;, &quot;Mongodb&quot;);\r\n      jedis.lpush(&quot;tutorial-list&quot;, &quot;Mysql&quot;);\r\n     // 获取存储的数据并输出\r\n     List&lt;String&gt; list = jedis.lrange(&quot;tutorial-list&quot;, 0 ,5);\r\n     for(int i=0; i&lt;list.size(); i++) {\r\n       System.out.println(&quot;Stored string in redis:: &quot;+list.get(i));\r\n     }\r\n }\r\n}\r\n```\r\n编译以上程序。\r\n```java\r\n$javac RedisListJava.java\r\n$java RedisListJava\r\nConnection to server sucessfully\r\nStored string in redis:: Redis\r\nStored string in redis:: Mongodb\r\nStored string in redis:: Mysql\r\n```\r\n\r\n------------\r\n\r\n#### Redis Java Keys 实例\r\n```java\r\nimport redis.clients.jedis.Jedis;\r\npublic class RedisKeyJava {\r\n   public static void main(String[] args) {\r\n      //连接本地的 Redis 服务\r\n      Jedis jedis = new Jedis(&quot;localhost&quot;);\r\n      System.out.println(&quot;Connection to server sucessfully&quot;);\r\n      \r\n     // 获取数据并输出\r\n     List&lt;String&gt; list = jedis.keys(&quot;*&quot;);\r\n     for(int i=0; i&lt;list.size(); i++) {\r\n       System.out.println(&quot;List of stored keys:: &quot;+list.get(i));\r\n     }\r\n   }\r\n}\r\n```\r\n编译以上程序。\r\n```java\r\n$javac RedisKeyJava.java\r\n$java RedisKeyJava\r\nConnection to server sucessfully\r\nList of stored keys:: tutorial-name\r\nList of stored keys:: tutorial-list\r\n```\r\n\r\n\r\n',1,7),(34,1,60,1,'PHP 使用 Redis','','',1501603200,'#### 安装\r\n开始在 PHP 中使用 Redis 前， 我们需要确保已经安装了 redis 服务及 PHP redis 驱动，且你的机器上能正常使用 PHP。 接下来让我们安装 PHP redis 驱动：下载地址为:https://github.com/phpredis/phpredis/releases。\r\n##### PHP安装redis扩展\r\n以下操作需要在下载的 phpredis 目录中完成：\r\n```shell\r\n$ wget https://github.com/phpredis/phpredis/archive/2.2.4.tar.gz\r\n$ cd phpredis-2.2.7                      # 进入 phpredis 目录\r\n$ /usr/local/php/bin/phpize              # php安装后的路径\r\n$ ./configure --with-php-config=/usr/local/php/bin/php-config\r\n$ make &amp;&amp; make install\r\n```\r\n&gt; 如果你是 PHP7 版本，则需要下载指定分支：\r\n```shell\r\ngit clone -b php7 https://github.com/phpredis/phpredis.git\r\n```\r\n\r\n修改php.ini文件\r\n```shell\r\nvi /usr/local/php/lib/php.ini\r\n```\r\n增加如下内容:\r\n```shell\r\nextension_dir = &quot;/usr/local/php/lib/php/extensions/no-debug-zts-20090626&quot;\r\n\r\nextension=redis.so\r\n```\r\n安装完成后重启php-fpm 或 apache。查看phpinfo信息，就能看到redis扩展。\r\n![](../../Public/Uploads/manual/59812364d2a8e.jpg)\r\n\r\n------------\r\n\r\n\r\n#### 连接到 redis 服务\r\n```php\r\n&lt;?php\r\n    //连接本地的 Redis 服务\r\n   $redis = new Redis();\r\n   $redis-&gt;connect(\'127.0.0.1\', 6379);\r\n   echo &quot;Connection to server sucessfully&quot;;\r\n         //查看服务是否运行\r\n   echo &quot;Server is running: &quot; . $redis-&gt;ping();\r\n?&gt;\r\n```\r\n执行脚本，输出结果为：\r\n```php\r\nConnection to server sucessfully\r\nServer is running: PONG\r\n```\r\n\r\n------------\r\n\r\n#### Redis PHP String(字符串) 实例\r\n```php\r\n&lt;?php\r\n   //连接本地的 Redis 服务\r\n   $redis = new Redis();\r\n   $redis-&gt;connect(\'127.0.0.1\', 6379);\r\n   echo &quot;Connection to server sucessfully&quot;;\r\n   //设置 redis 字符串数据\r\n   $redis-&gt;set(&quot;tutorial-name&quot;, &quot;Redis tutorial&quot;);\r\n   // 获取存储的数据并输出\r\n   echo &quot;Stored string in redis:: &quot; . $redis-&gt;get(&quot;tutorial-name&quot;);\r\n?&gt;\r\n```\r\n执行脚本，输出结果为：\r\n```php\r\nConnection to server sucessfully\r\nStored string in redis:: Redis tutorial\r\n```\r\n\r\n------------\r\n\r\n#### Redis PHP List(列表) 实例\r\n```php\r\n&lt;?php\r\n   //连接本地的 Redis 服务\r\n   $redis = new Redis();\r\n   $redis-&gt;connect(\'127.0.0.1\', 6379);\r\n   echo &quot;Connection to server sucessfully&quot;;\r\n   //存储数据到列表中\r\n   $redis-&gt;lpush(&quot;tutorial-list&quot;, &quot;Redis&quot;);\r\n   $redis-&gt;lpush(&quot;tutorial-list&quot;, &quot;Mongodb&quot;);\r\n   $redis-&gt;lpush(&quot;tutorial-list&quot;, &quot;Mysql&quot;);\r\n   // 获取存储的数据并输出\r\n   $arList = $redis-&gt;lrange(&quot;tutorial-list&quot;, 0 ,5);\r\n   echo &quot;Stored string in redis&quot;;\r\n   print_r($arList);\r\n?&gt;\r\n```\r\n执行脚本，输出结果为：\r\n```php\r\nConnection to server sucessfully\r\nStored string in redis\r\nRedis\r\nMongodb\r\nMysql\r\n```\r\n\r\n------------\r\n\r\n#### Redis PHP Keys 实例\r\n```php\r\n&lt;?php\r\n   //连接本地的 Redis 服务\r\n   $redis = new Redis();\r\n   $redis-&gt;connect(\'127.0.0.1\', 6379);\r\n   echo &quot;Connection to server sucessfully&quot;;\r\n   // 获取数据并输出\r\n   $arList = $redis-&gt;keys(&quot;*&quot;);\r\n   echo &quot;Stored keys in redis:: &quot;;\r\n   print_r($arList);\r\n?&gt;\r\n```\r\n执行脚本，输出结果为：\r\n```php\r\nConnection to server sucessfully\r\nStored string in redis::\r\ntutorial-name\r\ntutorial-list\r\n```',7,8),(35,1,59,1,'Redis 键(key)','','',1501689600,'Redis 键命令用于管理 redis 的键。\r\n##### 语法\r\nRedis 键命令的基本语法如下：\r\n```shell\r\nredis 127.0.0.1:6379&gt; COMMAND KEY_NAME\r\n```\r\n##### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SET runoobkey redis\r\nOK\r\nredis 127.0.0.1:6379&gt; DEL runoobkey\r\n(integer) 1\r\n```\r\n在以上实例中 DEL 是一个命令， runoobkey 是一个键。 如果键被删除成功，命令执行后输出 (integer) 1，否则将输出 (integer) 0\r\n\r\n------------\r\n\r\n#### Redis keys 命令\r\n下表给出了与 Redis 键相关的基本命令：\r\n\r\n| ID  | 命令  | 描述  |\r\n| ------------ | ------------ | ------------ |\r\n| 1  | del key  | 该命令用于在 key 存在时删除 key。  |\r\n| 2  | dump key  | 序列化给定 key ，并返回被序列化的值。  |\r\n| 3  | exists key  | 检查给定 key 是否存在。  |\r\n| 4  | expire key seconds  | 为给定 key 设置过期时间。  |\r\n| 5  | expireat key timestamp  | expireat 的作用和 expire 类似，都用于为 key 设置过期时间。 不同在于 expireat 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。  |\r\n| 6  | pexpire key milliseconds  | 设置 key 的过期时间以毫秒计。  |\r\n| 7  | pexpireat key milliseconds-timestamp  | 设置 key 过期时间的时间戳(unix timestamp) 以毫秒计  |\r\n| 8  | keys pattern  | 查找所有符合给定模式( pattern)的 key 。  |\r\n| 9  | move key db  | 将当前数据库的 key 移动到给定的数据库 db 当中。  |\r\n| 10 | persist key | 移除 key 的过期时间，key 将持久保持。  |\r\n| 11 | pttl key  | 以毫秒为单位返回 key 的剩余的过期时间。  |\r\n| 12 | ttl key  | 以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。  |\r\n| 13 | pandomkey  | 从当前数据库中随机返回一个 key 。 |\r\n| 14 | rename key newkey  |  修改 key 的名称 |\r\n| 15 | renamenx key newkey  | 仅当 newkey 不存在时，将 key 改名为 newkey 。  |\r\n| 16 | type key  | 返回 key 所储存的值的类型。  |\r\n更多命令请参考：https://redis.io/commands',7,2),(36,1,59,1,'Redis 字符串(String)','','',1501689600,'Redis 字符串数据类型的相关命令用于管理 redis 字符串值，基本语法如下：\r\n##### 语法\r\n```shell\r\nredis 127.0.0.1:6379&gt; command key_name\r\n```\r\n##### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; set runoobkey redis\r\nOK\r\nredis 127.0.0.1:6379&gt; get runoobkey\r\n&quot;redis&quot;\r\n```\r\n在以上实例中我们使用了 SET 和 GET 命令，键为 runoobkey。\r\n\r\n------------\r\n\r\n#### Redis 字符串命令\r\n下表列出了常用的 redis 字符串命令：\r\n\r\n| ID  | 命令  | 描述  |\r\n| ------------ | ------------ | ------------ |\r\n| 1  | set key value  | 设置指定 key 的值  |\r\n| 2  | get key  | 获取指定 key 的值。  |\r\n| 3  | getrange key start end  | 返回 key 中字符串值的子字符  |\r\n| 4  | getset key value  | 将给定 key 的值设为 value ，并返回 key 的旧值(old value)。  |\r\n| 5  | getbit key offset  | 对 key 所储存的字符串值，获取指定偏移量上的位(bit)。  |\r\n| 6  | mget key1 [key2..]  | 获取所有(一个或多个)给定 key 的值。  |\r\n| 7  | setbit key offset value  | 对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。  |\r\n| 8  | setex key seconds value  | 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。 |\r\n| 9  | setnx key value  | 只有在 key 不存在时设置 key 的值。  |\r\n| 10  | setrange key offset value  | 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。  |\r\n| 11  | strlen key  | 返回 key 所储存的字符串值的长度。  |\r\n| 12  | mset key value [key value ...]  | 同时设置一个或多个 key-value 对。  |\r\n| 13  | msetnx key value [key value ...]  | 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。  |\r\n| 14  | psetex key milliseconds value  | 这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。  |\r\n| 15  | incr key  | 将 key 中储存的数字值增一。  |\r\n| 16  | incrby key increment  | 将 key 所储存的值加上给定的增量值（increment） 。  |\r\n| 17  | incrbyfloat key increment | 将 key 所储存的值加上给定的浮点增量值（increment） 。  |\r\n| 18  | decr key  | 将 key 中储存的数字值减一。  |\r\n| 19  | decrby key decrement  | key 所储存的值减去给定的减量值（decrement） 。  |\r\n| 20  | append key value  | 如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。  |\r\n更多命令请参考：https://redis.io/commands\r\n\r\n',2,3),(37,1,59,1,'Redis 哈希(Hash)','','',1501689600,'Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。\r\nRedis 中每个 hash 可以存储 232 - 1 键值对（40多亿）。\r\n##### 实例\r\n```shell\r\n127.0.0.1:6379&gt;  hmset runoobkey name &quot;redis tutorial&quot; description &quot;redis basic commands for caching&quot; likes 20 visitors 23000\r\nOK\r\n127.0.0.1:6379&gt;  hgetall runoobkey\r\n1) &quot;name&quot;\r\n2) &quot;redis tutorial&quot;\r\n3) &quot;description&quot;\r\n4) &quot;redis basic commands for caching&quot;\r\n5) &quot;likes&quot;\r\n6) &quot;20&quot;\r\n7) &quot;visitors&quot;\r\n8) &quot;23000&quot;\r\n```\r\n在以上实例中，我们设置了 redis 的一些描述信息(name, description, likes, visitors) 到哈希表的 runoobkey 中。\r\n\r\n------------\r\n\r\n#### Redis hash 命令\r\n下表列出了 redis hash 基本的相关命令：\r\n\r\n| ID  | 命令  | 描述  |\r\n| ------------ | ------------ | ------------ |\r\n| 1  | hdel key field2 [field2]  | 删除一个或多个哈希表字段  |\r\n| 2  | hexists key field  | 查看哈希表 key 中，指定的字段是否存在。  |\r\n| 3  | hget key field  | 获取存储在哈希表中指定字段的值。  |\r\n| 4  | hgetall key  | 获取在哈希表中指定 key 的所有字段和值  |\r\n| 5  | hincrby key field increment  | 为哈希表 key 中的指定字段的整数值加上增量 increment 。  |\r\n| 6  | hincrbyfloat key field increment  | 为哈希表 key 中的指定字段的浮点数值加上增量 increment 。  |\r\n| 7  | hkeys key  | 获取所有哈希表中的字段  |\r\n| 8  | hlen key  | 获取哈希表中字段的数量  |\r\n| 9  | hmget key field1 [field2]  |  获取所有给定字段的值 |\r\n| 10  | hmset key field1 value1 [field2 value2 ]  | 同时将多个 field-value (域-值)对设置到哈希表 key 中。  |\r\n| 11  | hset key field value  | 将哈希表 key 中的字段 field 的值设为 value 。  |\r\n| 12  | hsetnx key field value  | 只有在字段 field 不存在时，设置哈希表字段的值。  |\r\n| 13  | hvals key  | 获取哈希表中所有值  |\r\n| 14  | hscan key cursor [match pattern] [count count]  | 迭代哈希表中的键值对。  |\r\n更多命令请参考：https://redis.io/commands',0,4),(38,1,59,1,'Redis 列表(List)','','',1501689600,'Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）\r\n一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。\r\n##### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; lpush runoobkey redis\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; lpush runoobkey mongodb\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; lpush runoobkey mysql\r\n(integer) 3\r\nredis 127.0.0.1:6379&gt; lrange runoobkey 0 10\r\n\r\n1) &quot;mysql&quot;\r\n2) &quot;mongodb&quot;\r\n3) &quot;redis&quot;\r\n```\r\n在以上实例中我们使用了 LPUSH 将三个值插入了名为 runoobkey 的列表当中。\r\n\r\n------------\r\n\r\n#### Redis 列表命令\r\n下表列出了列表相关的基本命令：\r\n\r\n| ID  | 命令  | 描述  |\r\n| ------------ | ------------ | ------------ |\r\n| 1  | blpop key1 [key2 ] timeout  | 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。  |\r\n| 2  | brpop key1 [key2 ] timeout  | 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。  |\r\n| 3  | brpoplpush source destination timeout  | 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。  |\r\n| 4  | lindex key index  | 通过索引获取列表中的元素 |\r\n| 5  | linsert key BEFORE|AFTER pivot value  | 在列表的元素前或者后插入元素  |\r\n| 6  | llen key  | 获取列表长度  |\r\n| 7  | lpop key  | 移出并获取列表的第一个元素  |\r\n| 8  | lpush key value1 [value2]  | 将一个或多个值插入到列表头部  |\r\n| 9  | lpushx key value  | 将一个值插入到已存在的列表头部  |\r\n| 10  | lrange key start stop  | 获取列表指定范围内的元素  |\r\n| 11  | lrem key count value  | 移除列表元素  |\r\n| 12  | lset key index value  | 通过索引设置列表元素的值  |\r\n| 13  | ltrim key start stop  | 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。  |\r\n| 14  | rpop key  | 移除并获取列表最后一个元素  |\r\n| 15  | rpoplpush source destination  | 移除列表的最后一个元素，并将该元素添加到另一个列表并返回  |\r\n| 16  | rpush key value1 [value2]  | 在列表中添加一个或多个值  |\r\n| 17  | rpushx key value  | 为已存在的列表添加值  |\r\n',0,5),(39,1,59,1,'Redis 集合(Set)','','',1501689600,'Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。\r\nRedis 中 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。\r\n集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。\r\n##### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; sadd runoobkey redis\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; sadd runoobkey mongodb\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; sadd runoobkey mysql\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; sadd runoobkey mysql\r\n(integer) 0\r\nredis 127.0.0.1:6379&gt; smembers runoobkey\r\n\r\n1) &quot;mysql&quot;\r\n2) &quot;mongodb&quot;\r\n3) &quot;redis&quot;\r\n```\r\n在以上实例中我们通过 SADD 命令向名为 runoobkey 的集合插入的三个元素。\r\n\r\n------------\r\n\r\n#### Redis 集合命令\r\n下表列出了 Redis 集合基本命令：\r\n\r\n| ID  | 命令  | 描述  |\r\n| ------------ | ------------ | ------------ |\r\n| 1  | sadd key member1 [member2]  | 向集合添加一个或多个成员  |\r\n| 2  | scard key  | 获取集合的成员数  |\r\n| 3  | sdiff key1 [key2]  | 返回给定所有集合的差集  |\r\n| 4  | sdiffstore destination key1 [key2]  | 返回给定所有集合的差集并存储在 destination 中  |\r\n| 5  | sinter key1 [key2]  | 返回给定所有集合的交集  |\r\n| 6  | sinterstore destination key1 [key2]  | 返回给定所有集合的交集并存储在 destination 中  |\r\n| 7  | sismember key member  | 判断 member 元素是否是集合 key 的成员 |\r\n| 8  | smembers key  |  返回集合中的所有成员 |\r\n| 9  | smove source destination member  | 将 member 元素从 source 集合移动到 destination 集合  |\r\n| 10  | spop key  | 移除并返回集合中的一个随机元素  |\r\n| 11  | srandmember key [count]  | 返回集合中一个或多个随机数  |\r\n| 12  | srem key member1 [member2]  | 移除集合中一个或多个成员  |\r\n| 13  | sunion key1 [key2]  | 返回所有给定集合的并集  |\r\n| 14  | sunionstore destination key1 [key2]  | 所有给定集合的并集存储在 destination 集合中  |\r\n| 15  | sscan key cursor [match pattern] [COUNT count]  | 迭代集合中的元素  |\r\n\r\n',0,6),(40,1,59,1,'Redis 有序集合(sorted set)','','',1501689600,'Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。\r\n不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。\r\n有序集合的成员是唯一的,但分数(score)却可以重复。\r\n集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。\r\n##### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; zadd runoobkey 1 redis\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; zadd runoobkey 2 mongodb\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; zadd runoobkey 3 mysql\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; zadd runoobkey 3 mysql\r\n(integer) 0\r\nredis 127.0.0.1:6379&gt; zadd runoobkey 4 mysql\r\n(integer) 0\r\nredis 127.0.0.1:6379&gt; zrange runoobkey 0 10 withscores\r\n\r\n1) &quot;redis&quot;\r\n2) &quot;1&quot;\r\n3) &quot;mongodb&quot;\r\n4) &quot;2&quot;\r\n5) &quot;mysql&quot;\r\n6) &quot;4&quot;\r\n```\r\n在以上实例中我们通过命令 ZADD 向 redis 的有序集合中添加了三个值并关联上分数。\r\n\r\n------------\r\n\r\n#### Redis 有序集合命令\r\n下表列出了 redis 有序集合的基本命令:\r\n\r\n| ID  | 命令  | 描述  |\r\n| ------------ | ------------ | ------------ |\r\n| 1  | zadd key score1 member1 [score2 member2]  | 向有序集合添加一个或多个成员，或者更新已存在成员的分数  |\r\n| 2  | zcard key  | 获取有序集合的成员数  |\r\n| 3  | zcount key min max  | 计算在有序集合中指定区间分数的成员数  |\r\n| 4  | zincrby key increment member  | 有序集合中对指定成员的分数加上增量 increment  |\r\n| 5  | zinterstore destination numkeys key [key ...]  | 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中  |\r\n| 6  | zlexcount key min max  | 在有序集合中计算指定字典区间内成员数量  |\r\n| 7  | zrange key start stop [withscores]  | 通过索引区间返回有序集合成指定区间内的成员  |\r\n| 8  | zrangebylex key min max [limit offset count]  | 通过字典区间返回有序集合的成员  |\r\n| 9  | zrangebyscore key min max [withscores] [limit]  | 通过分数返回有序集合指定区间内的成员  |\r\n| 10  | zrank key member  | 返回有序集合中指定成员的索引  |\r\n| 11  | zrem key member [member ...]  | 移除有序集合中的一个或多个成员  |\r\n| 12  | zremrangebylex key min max  | 移除有序集合中给定的字典区间的所有成员  |\r\n| 13  | zremrangebyrank key start stop  | 移除有序集合中给定的排名区间的所有成员  |\r\n| 14  | zremrangebyscore key min max  | 移除有序集合中给定的分数区间的所有成员  |\r\n| 15  | zrevrange key start stop [WITHSCORES]  | 返回有序集中指定区间内的成员，通过索引，分数从高到底  |\r\n| 16  | zrevrangebyscore key max min [WITHSCORES]  | 返回有序集中指定分数区间内的成员，分数从高到低排序  |\r\n| 17  | zrevrank key member  | 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序  |\r\n| 18  | zscore key member   | 返回有序集中，成员的分数值  |\r\n| 19  | zunionstore destination numkeys key [key ...]  | 计算给定的一个或多个有序集的并集，并存储在新的 key 中  |\r\n| 20  | zscan key cursor [match pattern] [COUNT count]  | 迭代有序集合中的元素（包括元素成员和元素分值）  |\r\n',0,7),(41,1,59,1,'Redis HyperLogLog','','',1501689600,'Redis 在 2.8.9 版本添加了 HyperLogLog 结构。\r\n\r\nRedis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。\r\n\r\n在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。\r\n\r\n但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。\r\n\r\n------------\r\n\r\n#### 什么是基数?\r\n比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。\r\n##### 实例\r\n以下实例演示了 HyperLogLog 的工作过程：\r\n```shell\r\nredis 127.0.0.1:6379&gt; pfadd runoobkey &quot;redis&quot;\r\n\r\n1) (integer) 1\r\n\r\nredis 127.0.0.1:6379&gt; pfadd runoobkey &quot;mongodb&quot;\r\n\r\n1) (integer) 1\r\n\r\nredis 127.0.0.1:6379&gt; pfadd runoobkey &quot;mysql&quot;\r\n\r\n1) (integer) 1\r\n\r\nredis 127.0.0.1:6379&gt; pfcount runoobkey\r\n\r\n(integer) 3\r\n```\r\n\r\n------------\r\n\r\n#### Redis HyperLogLog 命令\r\n下表列出了 redis HyperLogLog 的基本命令：\r\n| ID  | 命令  | 描述  |\r\n| ------------ | ------------ | ------------ |\r\n| 1  | pfadd key element [element ...]  | 添加指定元素到 HyperLogLog 中。  |\r\n| 2  | pfcount key [key ...]  | 返回给定 HyperLogLog 的基数估算值。  |\r\n| 3  | pfmerge destkey sourcekey [sourcekey ...]  | 将多个 HyperLogLog 合并为一个 HyperLogLog  |\r\n',0,8),(42,1,59,1,'Redis 发布订阅','','',1501689600,'Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。\r\n\r\nRedis 客户端可以订阅任意数量的频道。\r\n\r\n下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：\r\n\r\n![](../../Public/Uploads/manual/5982d29906e62.png)\r\n\r\n当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：\r\n\r\n![](../../Public/Uploads/manual/5982d2abd8e11.png)\r\n\r\n------------\r\n\r\n\r\n#### 实例\r\n以下实例演示了发布订阅是如何工作的。在我们实例中我们创建了订阅频道名为 redisChat:\r\n```shell\r\nredis 127.0.0.1:6379&gt; subscribe redisChat\r\n\r\nReading messages... (press Ctrl-C to quit)\r\n1) &quot;subscribe&quot;\r\n2) &quot;redisChat&quot;\r\n3) (integer) 1\r\n```\r\n现在，我们先重新开启个 redis 客户端，然后在同一个频道 redisChat 发布两次消息，订阅者就能接收到消息。\r\n```shell\r\nredis 127.0.0.1:6379&gt; publist redisChat &quot;Redis is a great caching technique&quot;\r\n\r\n(integer) 1\r\n\r\nredis 127.0.0.1:6379&gt; publist redisChat &quot;Learn redis by runoob.com&quot;\r\n\r\n(integer) 1\r\n\r\n# 订阅者的客户端会显示如下消息\r\n1) &quot;message&quot;\r\n2) &quot;redisChat&quot;\r\n3) &quot;Redis is a great caching technique&quot;\r\n1) &quot;message&quot;\r\n2) &quot;redisChat&quot;\r\n3) &quot;Learn redis by runoob.com&quot;\r\n```\r\n\r\n------------\r\n\r\n#### Redis 发布订阅命令\r\n下表列出了 redis 发布订阅常用命令：\r\n\r\n| ID  | 命令  | 描述  |\r\n| ------------ | ------------ | ------------ |\r\n| 1  | psubscribe pattern [pattern ...]  | 订阅一个或多个符合给定模式的频道。  |\r\n| 2  | pubsub subcommand [argument [argument ...]]  | 查看订阅与发布系统状态。  |\r\n| 3  | publish channel message  | 将信息发送到指定的频道。  |\r\n| 4  | punsubscribe [pattern [pattern ...]]  | 退订所有给定模式的频道。  |\r\n| 5  | subscribe channel [channel ...]  | 订阅给定的一个或多个频道的信息。  |\r\n| 6  | unsubscribe [channel [channel ...]]  | 指退订给定的频道。  |\r\n',1,9),(43,1,59,1,'Redis 事务','','',1501689600,'Redis 事务可以一次执行多个命令， 并且带有以下两个重要的保证：\r\n- 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。\r\n- 事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。\r\n\r\n一个事务从开始到执行会经历以下三个阶段：\r\n- 开始事务。\r\n- 命令入队。\r\n- 执行事务。\r\n\r\n------------\r\n\r\n#### 实例\r\n以下是一个事务的例子， 它先以 MULTI 开始一个事务， 然后将多个命令入队到事务中， 最后由 EXEC 命令触发事务， 一并执行事务中的所有命令：\r\n```shell\r\nredis 127.0.0.1:6379&gt; multi\r\nOK\r\n\r\nredis 127.0.0.1:6379&gt; set book-name &quot;Mastering C++ in 21 days&quot;\r\nQUEUED\r\n\r\nredis 127.0.0.1:6379&gt; get book-name\r\nQUEUED\r\n\r\nredis 127.0.0.1:6379&gt; sadd tag &quot;C++&quot; &quot;Programming&quot; &quot;Mastering Series&quot;\r\nQUEUED\r\n\r\nredis 127.0.0.1:6379&gt; smembers tag\r\nQUEUED\r\n\r\nredis 127.0.0.1:6379&gt; exec\r\n1) OK\r\n2) &quot;Mastering C++ in 21 days&quot;\r\n3) (integer) 3\r\n4) 1) &quot;Mastering Series&quot;\r\n   2) &quot;C++&quot;\r\n   3) &quot;Programming&quot;\r\n```\r\n\r\n------------\r\n\r\n#### Redis 事务命令\r\n下表列出了 redis 事务的相关命令：\r\n\r\n| ID  |  命令 | 描述  |\r\n| ------------ | ------------ | ------------ |\r\n| 1  | discard  | 取消事务，放弃执行事务块内的所有命令。  |\r\n| 2  | exec  | 执行所有事务块内的命令。  |\r\n| 3  | multi  | 标记一个事务块的开始。  |\r\n| 4  | unwatch | 取消 WATCH 命令对所有 key 的监视。  |\r\n| 5  | watch key [key ...]  | 监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。  |\r\n',0,10),(44,1,59,1,'Redis 脚本','','',1501689600,'Redis 脚本使用 Lua 解释器来执行脚本。 Reids 2.6 版本通过内嵌支持 Lua 环境。执行脚本的常用命令为 EVAL。\r\n##### 语法\r\nEval 命令的基本语法如下：\r\n```shell\r\nredis 127.0.0.1:6379&gt; eval script numkeys key [key ...] arg [arg ...]\r\n```\r\n##### 实例\r\n以下实例演示了 redis 脚本工作过程：\r\n```shell\r\nredis 127.0.0.1:6379&gt; eval &quot;return {keys[1],keys[2],argv[1],argv[2]}&quot; 2 key1 key2 first second\r\n\r\n1) &quot;key1&quot;\r\n2) &quot;key2&quot;\r\n3) &quot;first&quot;\r\n4) &quot;second&quot;\r\n```\r\n\r\n------------\r\n\r\n#### Redis 脚本命令\r\n下表列出了 redis 脚本常用命令：\r\n\r\n| ID  | 命令 | 描述  |\r\n| ------------ | ------------ | ------------ |\r\n| 1  | eval script numkeys key [key ...] arg [arg ...]  | 执行 Lua 脚本。  |\r\n| 2  | evalsha sha1 numkeys key [key ...] arg [arg ...]  | 执行 Lua 脚本。  |\r\n| 3  | script exists script [script ...]  | 查看指定的脚本是否已经被保存在缓存当中。  |\r\n| 4  | script flush  | 从脚本缓存中移除所有脚本。  |\r\n| 5  | script kill | 杀死当前正在运行的 Lua 脚本。  |\r\n| 6  | script load script  | 将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。  |\r\n',0,11),(45,1,59,1,'Redis 连接','','',1501689600,'Redis 连接命令主要是用于连接 redis 服务。\r\n##### 实例\r\n以下实例演示了客户端如何通过密码验证连接到 redis 服务，并检测服务是否在运行：\r\n```shell\r\nredis 127.0.0.1:6379&gt; auth &quot;password&quot;\r\nOK\r\nredis 127.0.0.1:6379&gt; ping\r\nPONG\r\n```\r\n\r\n------------\r\n\r\n#### Redis 连接命令\r\n下表列出了 redis 连接的基本命令：\r\n\r\n| ID  | 命令  | 描述  |\r\n| ------------ | ------------ | ------------ |\r\n| 1  | auth password  | 验证密码是否正确  |\r\n| 2  | echo message  | 打印字符串  |\r\n| 3  | ping  | 查看服务是否运行  |\r\n| 4  | quit  | 关闭当前连接  |\r\n| 5  | select index  | 切换到指定的数据库  |\r\n',0,12),(46,1,59,1,'Redis 服务器','','',1501689600,'Redis 服务器命令主要是用于管理 redis 服务。\r\n##### 实例\r\n以下实例演示了如何获取 redis 服务器的统计信息：\r\n```shell\r\nredis 127.0.0.1:6379&gt; info\r\n\r\n# Server\r\nredis_version:2.8.13\r\nredis_git_sha1:00000000\r\nredis_git_dirty:0\r\nredis_build_id:c2238b38b1edb0e2\r\nredis_mode:standalone\r\nos:Linux 3.5.0-48-generic x86_64\r\narch_bits:64\r\nmultiplexing_api:epoll\r\ngcc_version:4.7.2\r\nprocess_id:3856\r\nrun_id:0e61abd297771de3fe812a3c21027732ac9f41fe\r\ntcp_port:6379\r\nuptime_in_seconds:11554\r\nuptime_in_days:0\r\nhz:10\r\nlru_clock:16651447\r\nconfig_file:\r\n\r\n# Clients\r\nconnected_clients:1\r\nclient-longest_output_list:0\r\nclient-biggest_input_buf:0\r\nblocked_clients:0\r\n\r\n# Memory\r\nused_memory:589016\r\nused_memory_human:575.21K\r\nused_memory_rss:2461696\r\nused_memory_peak:667312\r\nused_memory_peak_human:651.67K\r\nused_memory_lua:33792\r\nmem_fragmentation_ratio:4.18\r\nmem_allocator:jemalloc-3.6.0\r\n\r\n# Persistence\r\nloading:0\r\nrdb_changes_since_last_save:3\r\nrdb_bgsave_in_progress:0\r\nrdb_last_save_time:1409158561\r\nrdb_last_bgsave_status:ok\r\nrdb_last_bgsave_time_sec:0\r\nrdb_current_bgsave_time_sec:-1\r\naof_enabled:0\r\naof_rewrite_in_progress:0\r\naof_rewrite_scheduled:0\r\naof_last_rewrite_time_sec:-1\r\naof_current_rewrite_time_sec:-1\r\naof_last_bgrewrite_status:ok\r\naof_last_write_status:ok\r\n\r\n# Stats\r\ntotal_connections_received:24\r\ntotal_commands_processed:294\r\ninstantaneous_ops_per_sec:0\r\nrejected_connections:0\r\nsync_full:0\r\nsync_partial_ok:0\r\nsync_partial_err:0\r\nexpired_keys:0\r\nevicted_keys:0\r\nkeyspace_hits:41\r\nkeyspace_misses:82\r\npubsub_channels:0\r\npubsub_patterns:0\r\nlatest_fork_usec:264\r\n\r\n# Replication\r\nrole:master\r\nconnected_slaves:0\r\nmaster_repl_offset:0\r\nrepl_backlog_active:0\r\nrepl_backlog_size:1048576\r\nrepl_backlog_first_byte_offset:0\r\nrepl_backlog_histlen:0\r\n\r\n# CPU\r\nused_cpu_sys:10.49\r\nused_cpu_user:4.96\r\nused_cpu_sys_children:0.00\r\nused_cpu_user_children:0.01\r\n\r\n# Keyspace\r\ndb0:keys=94,expires=1,avg_ttl=41638810\r\ndb1:keys=1,expires=0,avg_ttl=0\r\ndb3:keys=1,expires=0,avg_ttl=0\r\n```\r\n\r\n------------\r\n\r\n#### Redis 服务器命令\r\n下表列出了 redis 服务器的相关命令:\r\n\r\n| ID  | 命令  | 描述  |\r\n| ------------ | ------------ | ------------ |\r\n| 1  | bgrewriteaof  | 异步执行一个 AOF（AppendOnly File） 文件重写操作  |\r\n| 2  | bgsave | 在后台异步保存当前数据库的数据到磁盘  |\r\n| 3  | client kill [ip:port] [id client-id]  | 关闭客户端连接  |\r\n| 4  | client list  | 获取连接到服务器的客户端连接列表  |\r\n| 5  | client getname  | 获取连接的名称  |\r\n| 6  | client pause timeout  | 在指定时间内终止运行来自客户端的命令  |\r\n| 7  | client setname connection-name  |  设置当前连接的名称 |\r\n| 8  | CLUSTER slots | 获取集群节点的映射数组  |\r\n| 9  | command | 获取 Redis 命令详情数组  |\r\n| 10  | command count  | 获取 Redis 命令总数  |\r\n| 11  | command getkeys  | 获取给定命令的所有键  |\r\n| 12  | time  | 返回当前服务器时间  |\r\n| 13  | command info command-name [command-name ...]  | 获取指定 Redis 命令描述的数组  |\r\n| 14  | config get parameter  | 获取指定配置参数的值  |\r\n| 15  | config rewrite | 对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写  |\r\n| 16  | config set parameter value  | 修改 redis 配置参数，无需重启  |\r\n| 17  | config resetstat | 重置 INFO 命令中的某些统计数据  |\r\n| 18  | dbsize | 返回当前数据库的 key 的数量  |\r\n| 19  | debug object key  | 获取 key 的调试信息  |\r\n| 20  | debug segfault |  让 Redis 服务崩溃 |\r\n| 21  | flushall | 删除所有数据库的所有key  |\r\n| 22  | flushdb  | 删除当前数据库的所有key  |\r\n| 23  | info [section]  | 获取 Redis 服务器的各种信息和统计数值  |\r\n| 24  | lastsave | 返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示  |\r\n| 25  | monitor  | 实时打印出 Redis 服务器接收到的命令，调试用  |\r\n| 26  | role  | 返回主从实例所属的角色  |\r\n| 27  | save  | 异步保存数据到硬盘  |\r\n| 28  | shutdown [nosave] [save]  | 异步保存数据到硬盘，并关闭服务器  |\r\n| 29  | slaveof host port  | 将当前服务器转变为指定服务器的从属服务器(slave server)  |\r\n| 30  | slowlog subcommand [argument]  | 管理 redis 的慢日志  |\r\n| 31  | sync  | 用于复制功能(replication)的内部命令  |',1,13),(47,1,61,1,'Redis del 命令','','',1501689600,'### Redis DEL 命令 - 该命令用于在 key 存在是删除 key。\r\n\r\n------------\r\n\r\nRedis DEL 命令用于删除已存在的键。不存在的 key 会被忽略。\r\n\r\n#### 语法\r\nredis DEL 命令基本语法如下：\r\n```shell\r\nredis 127.0.0.1:6379&gt; del key_name\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n被删除 key 的数量。\r\n\r\n#### 实例\r\n首先，我们在 redis 中创建一个 key 并设置值。\r\n```shell\r\nredis 127.0.0.1:6379&gt; set w3ckey redis\r\nOK\r\n```\r\n现在我们删除已创建的 key。\r\n```shell\r\nredis 127.0.0.1:6379&gt; del w3ckey\r\n(integer) 1\r\n```',4,1),(48,1,61,1,'Redis dump 命令','','',1501689600,'### Redis dump  命令 - 序列化给定 key ，并返回被序列化的值。\r\n\r\n------------\r\n\r\nRedis dump  命令用于序列化给定 key ，并返回被序列化的值。\r\n\r\n#### 语法\r\nredis dump  命令基本语法如下：\r\n```shell\r\nredis 127.0.0.1:6379&gt; dump key_name\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.6.0\r\n\r\n#### 返回值\r\n如果 key 不存在，那么返回 nil 。 否则，返回序列化之后的值。\r\n\r\n#### 实例\r\n首先，我们在 redis 中创建一个 key 并设置值。\r\n```shell\r\nredis&gt; set greeting &quot;hello, dumping world!&quot;\r\nOK\r\n```\r\n现在使用 dump 序列化键值。\r\n```shell\r\nredis&gt; dump greeting\r\n&quot;\\x00\\x15hello, dumping world!\\x06\\x00E\\xa0Z\\x82\\xd8r\\xc1\\xde&quot;\r\n \r\nredis&gt; dump not-exists-key\r\n(nil)\r\n```',4,2),(49,1,61,1,'Redis exists命令','','',1501689600,'### Redis exists 命令 - 检查给定 key 是否存在。\r\n\r\n------------\r\n\r\nRedis exists 命令用于检查给定 key 是否存在。\r\n\r\n#### 语法\r\nredis exists 命令基本语法如下：\r\n```shell\r\nredis 127.0.0.1:6379&gt; exists key_name\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n若 key 存在返回 1 ，否则返回 0 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; exists w3cschoolcc-new-key\r\n(integer) 0\r\n```\r\n现在我们创建一个名为 w3cschoolcc-new-key 的键并赋值，再使用 exists 命令。\r\n```shell\r\nredis 127.0.0.1:6379&gt; set w3cschoolcc-new-key newkey\r\nOK\r\nredis 127.0.0.1:6379&gt; exists w3cschoolcc-new-key\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt;\r\n```',4,3),(50,1,61,1,'Redis expire 命令','','',1501689600,'### Redis expire 命令 - seconds 为给定 key 设置过期时间。\r\n\r\n------------\r\n\r\nRedis expir  命令用于设置 key 的过期时间。key 过期后将不再可用。\r\n\r\n#### 语法\r\nredis expire 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; expire key_name time_in_seconds\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n设置成功返回 1 。 当 key 不存在或者不能为 key 设置过期时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的过期时间)返回 0 。\r\n\r\n#### 实例\r\n首先创建一个 key 并赋值：\r\n```shell\r\nredis 127.0.0.1:6379&gt; set w3ckey redis\r\nOK\r\n```\r\n为 key 设置过期时间：\r\n```shell\r\nredis 127.0.0.1:6379&gt; expire w3ckey 60\r\n(integer) 1\r\n```\r\n以上实例中我们为键 w3ckey 设置了过期时间为 1 分钟，1分钟后该键会自动删除。',3,4),(51,1,61,1,'Redis expireat 命令','','',1501689600,'### Redis Expireat 命令 - EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。\r\n\r\n------------\r\n\r\nRedis Expireat 命令用于以 UNIX 时间戳(unix timestamp)格式设置 key 的过期时间。key 过期后将不再可用。\r\n\r\n#### 语法\r\nredis Expireat 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; expireat keyk_name time_in_unix_timestamp\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n设置成功返回 1 。 当 key 不存在或者不能为 key 设置过期时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的过期时间)返回 0 。\r\n\r\n#### 实例\r\n首先创建一个 key 并赋值：\r\n```shell\r\nredis 127.0.0.1:6379&gt; set w3ckey redis\r\nOK\r\n```\r\n为 key 设置过期时间：\r\n```shell\r\nredis 127.0.0.1:6379&gt; expireat w3ckey 1293840000\r\n(integer) 1\r\nexists w3ckey\r\n(integer) 0\r\n```',5,5),(52,1,61,1,'Redis pexpire 命令','','',1501689600,'### Redis pexpire  命令 - 设置 key 的过期时间亿以毫秒计。\r\n\r\n------------\r\n\r\n这个命令和EXPIRE命令的作用类似，但是它以毫秒为单位设置 key 的生存时间，而不像EXPIRE命令那样，以秒为单位。\r\n\r\n#### 可用版本\r\n\r\n\\&gt;= 2.6.0\r\n\r\n#### 返回值\r\n\r\ninteger-reply, 只有以下两种值:\r\n- 设置成功，返回 1\r\n- key 不存在或设置失败，返回 0\r\n\r\n#### 实例\r\n```shell\r\nredis&gt; set mykey &quot;Hello&quot;\r\nOK\r\nredis&gt; PEXPIRE mykey 1500\r\n(integer) 1\r\nredis&gt; TTL mykey\r\n(integer) 1\r\nredis&gt; PTTL mykey\r\n(integer) 1499\r\nredis&gt; \r\n```\r\n',6,6),(53,1,61,1,'Redis pexpireat 命令','','',1501689600,'### Redis pexpireat  命令 - 设置 key 过期时间的时间戳(unix timestamp) 以毫秒计\r\n\r\n------------\r\n\r\nRedis pexpireat  命令用于设置 key 的过期时间，已毫秒技。key 过期后将不再可用。\r\n\r\n#### 语法\r\nredis pexpireat  命令基本语法如下：\r\n```shell\r\nredis 127.0.0.1:6379&gt; pexpireat key_name time_in_milliseconds_on_unix_timestamp\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n设置成功返回 1 。 当 key 不存在或者不能为 key 设置过期时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的过期时间)返回 0 。\r\n\r\n#### 实例\r\n首先创建一个 key 并赋值：\r\n```shell\r\nredis 127.0.0.1:6379&gt; set w3ckey redis\r\nOK\r\n```\r\n为 key 设置过期时间：\r\n```shell\r\nredis 127.0.0.1:6379&gt; pexpireat  tutorialspoint 1555555555005\r\n(integer) 1\r\n```',3,7),(54,1,61,1,'Redis Keys 命令','','',1501689600,'Redis Keys 命令 - 查找所有符合给定模式( pattern)的 key 。\r\n\r\n------------\r\n\r\nRedis Keys 命令用于查找所有符合给定模式 pattern 的 key 。。\r\n\r\n#### 语法\r\nredis KEYS 命令基本语法如下：\r\n```shell\r\nredis 127.0.0.1:6379&gt; keys pattern\r\n```\r\n#### 可用版本\r\n\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n符合给定模式的 key 列表 (Array)。\r\n\r\n#### 实例\r\n首先创建一些 key，并赋上对应值：\r\n```shell\r\nredis 127.0.0.1:6379&gt; set w3c1 redis\r\nOK\r\nredis 127.0.0.1:6379&gt; set w3c2 mysql\r\nOK\r\nredis 127.0.0.1:6379&gt; set w3c3 mongodb\r\nOK\r\n```\r\n查找以 w3c 为开头的 key：\r\n```shell\r\nredis 127.0.0.1:6379&gt; keys w3c*\r\n1) &quot;w3c3&quot;\r\n2) &quot;w3c1&quot;\r\n3) &quot;w3c2&quot;\r\n```\r\n获取 redis 中所有的 key 可用使用 *。\r\n```shell\r\nredis 127.0.0.1:6379&gt; keys *\r\n1) &quot;w3c3&quot;\r\n2) &quot;w3c1&quot;\r\n3) &quot;w3c2&quot;\r\n```',3,8),(55,1,61,1,'Redis Move 命令','','',1501689600,'### Redis Move 命令 - 将当前数据库的 key 移动到给定的数据库 db 当中。\r\n\r\n------------\r\n\r\nRedis MOVE 命令用于将当前数据库的 key 移动到给定的数据库 db 当中。\r\n\r\n#### 语法\r\nredis Move 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; move key_name destination_database\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n移动成功返回 1 ，失败则返回 0 。\r\n\r\n#### 实例\r\n```shell\r\n# key 存在于当前数据库\r\n \r\nredis&gt; SELECT 0                             # redis默认使用数据库 0，为了清晰起见，这里再显式指定一次。\r\nOK\r\n \r\nredis&gt; SET song &quot;secret base - Zone&quot;\r\nOK\r\n \r\nredis&gt; MOVE song 1                          # 将 song 移动到数据库 1\r\n(integer) 1\r\n \r\nredis&gt; EXISTS song                          # song 已经被移走\r\n(integer) 0\r\n \r\nredis&gt; SELECT 1                             # 使用数据库 1\r\nOK\r\n \r\nredis:1&gt; EXISTS song                        # 证实 song 被移到了数据库 1 (注意命令提示符变成了&quot;redis:1&quot;，表明正在使用数据库 1)\r\n(integer) 1\r\n \r\n \r\n# 当 key 不存在的时候\r\n \r\nredis:1&gt; EXISTS fake_key\r\n(integer) 0\r\n \r\nredis:1&gt; MOVE fake_key 0                    # 试图从数据库 1 移动一个不存在的 key 到数据库 0，失败\r\n(integer) 0\r\n \r\nredis:1&gt; select 0                           # 使用数据库0\r\nOK\r\n \r\nredis&gt; EXISTS fake_key                      # 证实 fake_key 不存在\r\n(integer) 0\r\n \r\n \r\n# 当源数据库和目标数据库有相同的 key 时\r\n \r\nredis&gt; SELECT 0                             # 使用数据库0\r\nOK\r\nredis&gt; SET favorite_fruit &quot;banana&quot;\r\nOK\r\n \r\nredis&gt; SELECT 1                             # 使用数据库1\r\nOK\r\nredis:1&gt; SET favorite_fruit &quot;apple&quot;\r\nOK\r\n \r\nredis:1&gt; SELECT 0                           # 使用数据库0，并试图将 favorite_fruit 移动到数据库 1\r\nOK\r\n \r\nredis&gt; MOVE favorite_fruit 1                # 因为两个数据库有相同的 key，MOVE 失败\r\n(integer) 0\r\n \r\nredis&gt; GET favorite_fruit                   # 数据库 0 的 favorite_fruit 没变\r\n&quot;banana&quot;\r\n \r\nredis&gt; SELECT 1\r\nOK\r\n \r\nredis:1&gt; GET favorite_fruit                 # 数据库 1 的 favorite_fruit 也是\r\n&quot;apple&quot;\r\n```',2,9),(56,1,61,1,'Redis persist 命令','','',1501689600,'### Redis persist  命令 - 移除 key 的过期时间，key 将持久保持。\r\n\r\n------------\r\n\r\nRedis PERSIST 命令用于移除给定 key 的过期时间，使得 key 永不过期。\r\n\r\n#### 语法\r\nredis PERSIST 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; persist key_name\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.2.0\r\n\r\n#### 返回值\r\n当过期时间移除成功时，返回 1 。 如果 key 不存在或 key 没有设置过期时间，返回 0 。\r\n\r\n#### 实例\r\n```shell\r\nredis&gt; set mykey &quot;Hello&quot;\r\nOK\r\n \r\nredis&gt; expire mykey 10  # 为 key 设置生存时间\r\n(integer) 1\r\n \r\nredis&gt; ttl mykey\r\n(integer) 10\r\n \r\nredis&gt; persist  mykey    # 移除 key 的生存时间\r\n(integer) 1\r\n \r\nredis&gt; ttl mykey\r\n(integer) -1\r\n```',1,10),(57,1,61,1,'Redis Pttl 命令','','',1501689600,'### Redis Pttl 命令 - 以毫秒为单位返回 key 的剩余的过期时间。\r\n\r\n------------\r\n\r\nRedis Pttl 命令以毫秒为单位返回 key 的剩余过期时间。\r\n\r\n#### 语法\r\nredis Pttl 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; pttl key_name\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.6.0\r\n\r\n#### 返回值\r\n当 key 不存在时，返回 -2 。 当 key 存在但没有设置剩余生存时间时，返回 -1 。 否则，以毫秒为单位，返回 key 的剩余生存时间。\r\n\r\n注意：在 Redis 2.8 以前，当 key 不存在，或者 key 没有设置剩余生存时间时，命令都返回 -1 。\r\n\r\n#### 实例\r\n```shell\r\n# 不存在的 key\r\n \r\nredis&gt; flushdb\r\nOK\r\n \r\nredis&gt; PTTL key\r\n(integer) -2\r\n \r\n \r\n# key 存在，但没有设置剩余生存时间\r\n \r\nredis&gt; SET key value\r\nOK\r\n \r\nredis&gt; PTTL key\r\n(integer) -1\r\n \r\n \r\n# 有剩余生存时间的 key\r\n \r\nredis&gt; pexpirE key 10086\r\n(integer) 1\r\n \r\nredis&gt; PTTL key\r\n(integer) 6179\r\n```',1,11),(58,1,61,1,'Redis randomkey 命令','','',1501689600,'### Redis randomkey  命令 - 从当前数据库中随机返回一个 key 。\r\n\r\n------------\r\n\r\nRedis RANDOMKEY 命令从当前数据库中随机返回一个 key 。\r\n\r\n#### 语法\r\nredis RANDOMKEY 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; randomkey\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n当数据库不为空时，返回一个 key 。 当数据库为空时，返回 nil 。\r\n\r\n#### 实例\r\n```shell\r\n# 数据库不为空\r\n \r\nredis&gt; mset fruit &quot;apple&quot; drink &quot;beer&quot; food &quot;cookies&quot;   # 设置多个 key\r\nOK\r\n \r\nredis&gt; randomkey\r\n&quot;fruit&quot;\r\n \r\nredis&gt; randomkey\r\n&quot;food&quot;\r\n \r\nredis&gt; KEYS *    # 查看数据库内所有key，证明 randomkey 并不删除 key\r\n1) &quot;food&quot;\r\n2) &quot;drink&quot;\r\n3) &quot;fruit&quot;\r\n \r\n \r\n# 数据库为空\r\n \r\nredis&gt; flushdb  # 删除当前数据库所有 key\r\nOK\r\n \r\nredis&gt; randomkey\r\n(nil)\r\n```',1,13),(59,1,61,1,'Redis Rename 命令','','',1501689600,'### Redis Rename 命令 - 修改 key 的名称\r\n\r\n------------\r\n\r\nRedis Rename 命令用于修改 key 的名称 。\r\n\r\n#### 语法语法\r\nredis Rename 命令基本语法如下：\r\n```shell\r\nredis 127.0.0.1:6379&gt; rename old_key_name new_key_name\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n改名成功时提示 OK ，失败时候返回一个错误。\r\n\r\n当 OLD_KEY_NAME 和 NEW_KEY_NAME 相同，或者 OLD_KEY_NAME 不存在时，返回一个错误。\r\n\r\n当 NEW_KEY_NAME 已经存在时， RENAME 命令将覆盖旧值。\r\n\r\n#### 实例\r\n```shell\r\n# key 存在且 newkey 不存在\r\n \r\nredis&gt; SET message &quot;hello world&quot;\r\nOK\r\n \r\nredis&gt; RENAME message greeting\r\nOK\r\n \r\nredis&gt; EXISTS message               # message 不复存在\r\n(integer) 0\r\n \r\nredis&gt; EXISTS greeting              # greeting 取而代之\r\n(integer) 1\r\n \r\n \r\n# 当 key 不存在时，返回错误\r\n \r\nredis&gt; RENAME fake_key never_exists\r\n(error) ERR no such key\r\n \r\n \r\n# newkey 已存在时， RENAME 会覆盖旧 newkey\r\n \r\nredis&gt; SET pc &quot;lenovo&quot;\r\nOK\r\n \r\nredis&gt; SET personal_computer &quot;dell&quot;\r\nOK\r\n \r\nredis&gt; RENAME pc personal_computer\r\nOK\r\n \r\nredis&gt; GET pc\r\n(nil)\r\n \r\nredis:1&gt; GET personal_computer      # 原来的值 dell 被覆盖了\r\n&quot;lenovo&quot;\r\n```',1,14),(60,1,61,1,'Redis Renamenx 命令','','',1501689600,'### Redis Renamenx 命令 - 仅当 newkey 不存在时，将 key 改名为 newkey 。\r\n\r\n------------\r\n\r\nRedis Renamenx 命令用于在新的 key 不存在时修改 key 的名称 。\r\n\r\n#### 语法\r\nredis Renamenx 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; renamenx old_key_name new_key_name\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n修改成功时，返回 1 。 如果 NEW_KEY_NAME 已经存在，返回 0 。\r\n\r\n#### 实例\r\n```shell\r\n# newkey 不存在，改名成功\r\n \r\nredis&gt; SET player &quot;MPlyaer&quot;\r\nOK\r\n \r\nredis&gt; EXISTS best_player\r\n(integer) 0\r\n \r\nredis&gt; RENAMENX player best_player\r\n(integer) 1\r\n \r\n \r\n# newkey存在时，失败\r\n \r\nredis&gt; SET animal &quot;bear&quot;\r\nOK\r\n \r\nredis&gt; SET favorite_animal &quot;butterfly&quot;\r\nOK\r\n \r\nredis&gt; RENAMENX animal favorite_animal\r\n(integer) 0\r\n \r\nredis&gt; get animal\r\n&quot;bear&quot;\r\n \r\nredis&gt; get favorite_animal\r\n&quot;butterfly&quot;\r\n```',1,15),(61,1,61,1,'Redis Type 命令','','',1501689600,'### Redis Renamenx 命令 - 仅当 newkey 不存在时，将 key 改名为 newkey 。\r\n\r\n------------\r\n\r\nRedis Renamenx 命令用于在新的 key 不存在时修改 key 的名称 。\r\n\r\n#### 语法\r\nredis Renamenx 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; renamenx old_key_name new_key_name\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n修改成功时，返回 1 。 如果 NEW_KEY_NAME 已经存在，返回 0 。\r\n\r\n#### 实例\r\n```shell\r\n# newkey 不存在，改名成功\r\n \r\nredis&gt; SET player &quot;MPlyaer&quot;\r\nOK\r\n \r\nredis&gt; EXISTS best_player\r\n(integer) 0\r\n \r\nredis&gt; RENAMENX player best_player\r\n(integer) 1\r\n \r\n \r\n# newkey存在时，失败\r\n \r\nredis&gt; SET animal &quot;bear&quot;\r\nOK\r\n \r\nredis&gt; SET favorite_animal &quot;butterfly&quot;\r\nOK\r\n \r\nredis&gt; RENAMENX animal favorite_animal\r\n(integer) 0\r\n \r\nredis&gt; get animal\r\n&quot;bear&quot;\r\n \r\nredis&gt; get favorite_animal\r\n&quot;butterfly&quot;\r\n```',4,16),(62,1,61,1,'Redis TTL 命令','','',1501689600,'### Redis TTL 命令 - 以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。\r\n\r\n------------\r\n\r\nRedis TTL 命令以秒为单位返回 key 的剩余过期时间。\r\n\r\n#### 语法\r\nredis TTL 命令基本语法如下：\r\n```shell\r\nredis 127.0.0.1:6379&gt; TTL KEY_NAME\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n当 key 不存在时，返回 -2 。 当 key 存在但没有设置剩余生存时间时，返回 -1 。 否则，以毫秒为单位，返回 key 的剩余生存时间。\r\n\r\n注意：在 Redis 2.8 以前，当 key 不存在，或者 key 没有设置剩余生存时间时，命令都返回 -1 。\r\n\r\n#### 实例\r\n```shell\r\n# 不存在的 key\r\n \r\nredis&gt; FLUSHDB\r\nOK\r\n \r\nredis&gt; TTL key\r\n(integer) -2\r\n \r\n \r\n# key 存在，但没有设置剩余生存时间\r\n \r\nredis&gt; SET key value\r\nOK\r\n \r\nredis&gt; TTL key\r\n(integer) -1\r\n \r\n \r\n# 有剩余生存时间的 key\r\n \r\nredis&gt; EXPIRE key 10086\r\n(integer) 1\r\n \r\nredis&gt; TTL key\r\n(integer) 10084\r\n```',1,12),(63,1,62,1,'Redis SET 命令','','',1501689600,'### Redis SET 命令 - 设置指定 key 的值\r\n\r\n------------\r\n\r\nRedis SET 命令用于设置给定 key 的值。如果 key 已经存储其他值， SET 就覆写旧值，且无视类型。\r\n\r\n#### 语法\r\nredis SET 命令基本语法如下：\r\n```shell\r\nredis 127.0.0.1:6379&gt; SET KEY_NAME VALUE\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n在 Redis 2.6.12 以前版本， SET 命令总是返回 OK 。\r\n\r\n从 Redis 2.6.12 版本开始， SET 在设置操作成功完成时，才返回 OK 。\r\n\r\n#### 实例\r\n首先，我们在 redis 中创建一个 key 并设置值。\r\n\r\n```shell\r\n# 对不存在的键进行设置\r\n \r\nredis 127.0.0.1:6379&gt; SET key &quot;value&quot;\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; GET key\r\n&quot;value&quot;\r\n \r\n \r\n# 对已存在的键进行设置\r\n \r\nredis 127.0.0.1:6379&gt; SET key &quot;new-value&quot;\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; GET key\r\n&quot;new-value&quot;\r\n```',2,1),(64,1,62,1,'Redis Get 命令','','',1501689600,'### Redis Get 命令 - 获取指定 key 的值。\r\n\r\n------------\r\n\r\nRedis Get 命令用于获取指定 key 的值。如果 key 不存在，返回 nil 。如果key 储存的值不是字符串类型，返回一个错误。\r\n\r\n#### 语法\r\nredis Get 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; GET KEY_NAME\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n返回 key 的值，如果 key 不存在时，返回 nil。 如果 key 不是字符串类型，那么返回一个错误。\r\n\r\n#### 实例\r\n```shell\r\n# 对不存在的 key 或字符串类型 key 进行 GET\r\n \r\nredis&gt; GET db\r\n(nil)\r\n \r\nredis&gt; SET db redis\r\nOK\r\n \r\nredis&gt; GET db\r\n&quot;redis&quot;\r\n \r\n \r\n# 对不是字符串类型的 key 进行 GET\r\n \r\nredis&gt; DEL db\r\n(integer) 1\r\n \r\nredis&gt; LPUSH db redis mongodb mysql\r\n(integer) 3\r\n \r\nredis&gt; GET db\r\n(error) ERR Operation against a key holding the wrong kind of value\r\n```',3,2),(65,1,62,1,'Redis Getrange 命令','','',1501689600,'### Redis Get 命令 - 获取指定 key 的值。\r\n\r\n------------\r\n\r\nRedis Get 命令用于获取指定 key 的值。如果 key 不存在，返回 nil 。如果key 储存的值不是字符串类型，返回一个错误。\r\n\r\n#### 语法\r\nredis Get 命令基本语法如下：\r\n```shell\r\nredis 127.0.0.1:6379&gt; GET KEY_NAME\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n返回 key 的值，如果 key 不存在时，返回 nil。 如果 key 不是字符串类型，那么返回一个错误。\r\n\r\n#### 实例\r\n```shell\r\n# 对不存在的 key 或字符串类型 key 进行 GET\r\n \r\nredis&gt; GET db\r\n(nil)\r\n \r\nredis&gt; SET db redis\r\nOK\r\n \r\nredis&gt; GET db\r\n&quot;redis&quot;\r\n \r\n \r\n# 对不是字符串类型的 key 进行 GET\r\n \r\nredis&gt; DEL db\r\n(integer) 1\r\n \r\nredis&gt; LPUSH db redis mongodb mysql\r\n(integer) 3\r\n \r\nredis&gt; GET db\r\n(error) ERR Operation against a key holding the wrong kind of value\r\n```',1,3),(66,1,62,1,'Redis Getset 命令','','',1501689600,'### Redis Getset 命令 - 将给定 key 的值设为 value ，并返回 key 的旧值(old value)。\r\n\r\n------------\r\n\r\nRedis Getset 命令用于设置指定 key 的值，并返回 key 旧的值。\r\n\r\n#### 语法\r\nredis Getset 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; GETSET KEY_NAME VALUE\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n返回给定 key 的旧值。 当 key 没有旧值时，即 key 不存在时，返回 nil 。\r\n\r\n当 key 存在但不是字符串类型时，返回一个错误。\r\n\r\n#### 实例\r\n首先，设置 mykey 的值并截取字符串。\r\n```shell\r\nredis 127.0.0.1:6379&gt; GETSET mynewkey &quot;This is my test key&quot;\r\n(nil)\r\nredis 127.0.0.1:6379&gt; GETSET mynewkey &quot;This is my new value to test getset&quot;\r\n&quot;This is my test key&quot;\r\n```',1,4),(67,1,62,1,'Redis Getbit 命令','','',1501689600,'### Redis Getbit 命令 - 对 key 所储存的字符串值，获取指定偏移量上的位(bit)。\r\n\r\n------------\r\n\r\nRedis Getbit 命令用于对 key 所储存的字符串值，获取指定偏移量上的位(bit)。\r\n\r\n#### 语法\r\nredis Getbit 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; GETBIT KEY_NAME OFFSET\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.2.0\r\n\r\n#### 返回值\r\n字符串值指定偏移量上的位(bit)。\r\n\r\n当偏移量 OFFSET 比字符串值的长度大，或者 key 不存在时，返回 0 。\r\n\r\n#### 实例\r\n```shell\r\n# 对不存在的 key 或者不存在的 offset 进行 GETBIT， 返回 0\r\n \r\nredis&gt; EXISTS bit\r\n(integer) 0\r\n \r\nredis&gt; GETBIT bit 10086\r\n(integer) 0\r\n \r\n \r\n# 对已存在的 offset 进行 GETBIT\r\n \r\nredis&gt; SETBIT bit 10086 1\r\n(integer) 0\r\n \r\nredis&gt; GETBIT bit 10086\r\n(integer) 1\r\n```',4,5),(68,1,62,1,'Redis Mget 命令','','',1501689600,'### Redis Mget 命令 - 获取所有(一个或多个)给定 key 的值。\r\n\r\n------------\r\n\r\nRedis Mget 命令返回所有(一个或多个)给定 key 的值。 如果给定的 key 里面，有某个 key 不存在，那么这个 key 返回特殊值 nil 。\r\n\r\n#### 语法\r\nredis Mget 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; MGET KEY1 KEY2 .. KEYN\r\n```\r\n#### 可用版本\r\n\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n一个包含所有给定 key 的值的列表。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SET key1 &quot;hello&quot;\r\nOK\r\nredis 127.0.0.1:6379&gt; SET key2 &quot;world&quot;\r\nOK\r\nredis 127.0.0.1:6379&gt; MGET key1 key2 someOtherKey\r\n1) &quot;Hello&quot;\r\n2) &quot;World&quot;\r\n3) (nil)\r\n```',2,6),(69,1,62,1,'Redis Setbit 命令','','',1501689600,'### Redis Setbit 命令 - 对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。\r\n\r\n------------\r\n\r\nRedis Setbit 命令用于对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。\r\n\r\n#### 语法\r\nredis Setbit 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; Setbit KEY_NAME OFFSET\r\n```\r\n#### 可用版本\r\n\r\n\\&gt;= 2.2.0\r\n\r\n#### 返回值\r\n指定偏移量原来储存的位。\r\n\r\n#### 实例\r\n```shell\r\nredis&gt; SETBIT bit 10086 1\r\n(integer) 0\r\n \r\nredis&gt; GETBIT bit 10086\r\n(integer) 1\r\n \r\nredis&gt; GETBIT bit 100   # bit 默认被初始化为 0\r\n(integer) 0\r\n```',0,7),(70,1,62,1,'Redis Setex 命令','','',1501689600,'### Redis Setex 命令 - 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。\r\n\r\n------------\r\n\r\nRedis Setex 命令为指定的 key 设置值及其过期时间。如果 key 已经存在， SETEX 命令将会替换旧的值。\r\n\r\n#### 语法\r\nredis Setex 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SETEX KEY_NAME TIMEOUT VALUE\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n设置成功时返回 OK 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SETEX mykey 60 redis\r\nOK\r\nredis 127.0.0.1:6379&gt; TTL mykey\r\n60\r\nredis 127.0.0.1:6379&gt; GET mykey\r\n&quot;redis\r\n```',0,8),(71,1,62,1,'Redis Setnx 命令','','',1501689600,'### Redis Setnx 命令 - 只有在 key 不存在时设置 key 的值。\r\n\r\n------------\r\n\r\nRedis Setnx（SET if Not eXists） 命令在指定的 key 不存在时，为 key 设置指定的值。\r\n\r\n#### 语法\r\nredis Setnx 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SETNX KEY_NAME VALUE\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n设置成功，返回 1 。 设置失败，返回 0 。\r\n\r\n#### 实例\r\n```shell\r\nredis&gt; EXISTS job                # job 不存在\r\n(integer) 0\r\n \r\nredis&gt; SETNX job &quot;programmer&quot;    # job 设置成功\r\n(integer) 1\r\n \r\nredis&gt; SETNX job &quot;code-farmer&quot;   # 尝试覆盖 job ，失败\r\n(integer) 0\r\n \r\nredis&gt; GET job                   # 没有被覆盖\r\n&quot;programmer&quot;\r\n```',0,9),(72,1,62,1,'Redis Setrange 命令','','',1501689600,'### Redis Setrange 命令 - 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。\r\n\r\n------------\r\n\r\nRedis Setrange 命令用指定的字符串覆盖给定 key 所储存的字符串值，覆盖的位置从偏移量 offset 开始。\r\n\r\n#### 语法\r\nredis Setrange 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SETRANGE KEY_NAME OFFSET VALUE\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.2.0\r\n\r\n#### 返回值\r\n被修改后的字符串长度。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SET key1 &quot;Hello World&quot;\r\nOK\r\nredis 127.0.0.1:6379&gt; SETRANGE key1 6 &quot;Redis&quot;\r\n(integer) 11\r\nredis 127.0.0.1:6379&gt; GET key1\r\n&quot;Hello Redis&quot;\r\n```',0,10),(73,1,62,1,'Redis Strlen 命令','','',1501689600,'### Redis Strlen 命令 - 返回 key 所储存的字符串值的长度。\r\n\r\n------------\r\n\r\nRedis Strlen 命令用于获取指定 key 所储存的字符串值的长度。当 key 储存的不是字符串值时，返回一个错误。\r\n\r\n#### 语法\r\nredis Strlen 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; STRLEN KEY_NAME\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.2.0\r\n\r\n#### 返回值\r\n字符串值的长度。 当 key 不存在时，返回 0。\r\n\r\n#### 实例\r\n```shell\r\n# 获取字符串的长度\r\n \r\nredis&gt; SET mykey &quot;Hello world&quot;\r\nOK\r\n \r\nredis&gt; STRLEN mykey\r\n(integer) 11\r\n \r\n \r\n# 不存在的 key 长度为 0\r\n \r\nredis&gt; STRLEN nonexisting\r\n(integer) 0\r\n```',0,11),(74,1,62,1,'Redis Mset 命令','','',1501689600,'### Redis Mset 命令 - 同时设置一个或多个 key-value 对。\r\n\r\n------------\r\n\r\nRedis Mset 命令用于同时设置一个或多个 key-value 对。\r\n\r\n#### 语法\r\nredis Mset 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; MSET key1 value1 key2 value2 .. keyN valueN \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.1\r\n\r\n#### 返回值\r\n总是返回 OK 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; MSET key1 &quot;Hello&quot; key2 &quot;World&quot;\r\nOK\r\nredis 127.0.0.1:6379&gt; GET key1\r\n&quot;Hello&quot;\r\nredis 127.0.0.1:6379&gt; GET key2\r\n1) &quot;World&quot;\r\n```',0,12),(75,1,62,1,'Redis Msetnx 命令','','',1501689600,'### Redis Msetnx 命令 - 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。\r\n\r\n------------\r\n\r\nRedis Msetnx 命令用于所有给定 key 都不存在时，同时设置一个或多个 key-value 对。\r\n\r\n#### 语法\r\nredis Msetnx 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; MSETNX key1 value1 key2 value2 .. keyN valueN \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.1\r\n\r\n#### 返回值\r\n当所有 key 都成功设置，返回 1 。 如果所有给定 key 都设置失败(至少有一个 key 已经存在)，那么返回 0 。\r\n\r\n#### 实例\r\n```shell\r\n# 对不存在的 key 进行 MSETNX\r\n \r\nredis&gt; MSETNX rmdbs &quot;MySQL&quot; nosql &quot;MongoDB&quot; key-value-store &quot;redis&quot;\r\n(integer) 1\r\n \r\nredis&gt; MGET rmdbs nosql key-value-store\r\n1) &quot;MySQL&quot;\r\n2) &quot;MongoDB&quot;\r\n3) &quot;redis&quot;\r\n \r\n \r\n# MSET 的给定 key 当中有已存在的 key\r\n \r\nredis&gt; MSETNX rmdbs &quot;Sqlite&quot; language &quot;python&quot;  # rmdbs 键已经存在，操作失败\r\n(integer) 0\r\n \r\nredis&gt; EXISTS language                          # 因为 MSET 是原子性操作，language 没有被设置\r\n(integer) 0\r\n \r\nredis&gt; GET rmdbs                                # rmdbs 也没有被修改\r\n&quot;MySQL&quot;\r\n```',0,13),(76,1,62,1,'Redis Psetex 命令','','',1501689600,'### Redis Psetex 命令 - 这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。\r\n\r\n------------\r\n\r\nRedis Psetex 命令以毫秒为单位设置 key 的生存时间。\r\n\r\n#### 语法\r\nredis Psetex 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; PSETEX key1 EXPIRY_IN_MILLISECONDS value1 \r\n```\r\n#### 可用版本\r\n\\&gt;= 2.6.0\r\n\r\n#### 返回值\r\n设置成功时返回 OK 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; PSETEX mykey 1000 &quot;Hello&quot;\r\nOK\r\nredis 127.0.0.1:6379&gt; PTTL mykey\r\n999\r\nredis 127.0.0.1:6379&gt; GET mykey\r\n1) &quot;Hello&quot;\r\n```',0,14),(77,1,62,1,'Redis Incr 命令','','',1501689600,'### Redis Incr 命令 - 将 key 中储存的数字值增一。\r\n\r\n------------\r\n\r\nRedis Incr 命令将 key 中储存的数字值增一。\r\n\r\n如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作。\r\n\r\n如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。\r\n\r\n本操作的值限制在 64 位(bit)有符号数字表示之内。\r\n\r\n#### 语法\r\nredis Incr 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; INCR KEY_NAME\r\n``` \r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n执行 INCR 命令之后 key 的值。\r\n\r\n#### 实例\r\n```shell\r\nredis&gt; SET page_view 20\r\nOK\r\n \r\nredis&gt; INCR page_view\r\n(integer) 21\r\n \r\nredis&gt; GET page_view    # 数字值在 Redis 中以字符串的形式保存\r\n&quot;21&quot;\r\n```',0,15),(78,1,62,1,'Redis Incrby 命令','','',1501689600,'### Redis Incrby 命令 - 将 key 所储存的值加上给定的增量值（increment） 。\r\n\r\n------------\r\n\r\nRedis Incrby 命令将 key 中储存的数字加上指定的增量值。\r\n\r\n如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCRBY 命令。\r\n\r\n如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。\r\n\r\n本操作的值限制在 64 位(bit)有符号数字表示之内。\r\n\r\n#### 语法\r\nredis Incrby 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; INCRBY KEY_NAME INCR_AMOUNT\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n加上指定的增量值之后， key 的值。\r\n\r\n#### 实例\r\n```shell\r\n# key 存在且是数字值\r\n \r\nredis&gt; SET rank 50\r\nOK\r\n \r\nredis&gt; INCRBY rank 20\r\n(integer) 70\r\n \r\nredis&gt; GET rank\r\n&quot;70&quot;\r\n \r\n \r\n# key 不存在时\r\n \r\nredis&gt; EXISTS counter\r\n(integer) 0\r\n \r\nredis&gt; INCRBY counter 30\r\n(integer) 30\r\n \r\nredis&gt; GET counter\r\n&quot;30&quot;\r\n \r\n \r\n# key 不是数字值时\r\n \r\nredis&gt; SET book &quot;long long ago...&quot;\r\nOK\r\n \r\nredis&gt; INCRBY book 200\r\n(error) ERR value is not an integer or out of range\r\n```',0,16),(79,1,62,1,'Redis Incrbyfloat 命令','','',1501689600,'### Redis Incrbyfloat 命令 - 将 key 所储存的值加上给定的浮点增量值（increment） 。\r\n\r\n------------\r\n\r\nRedis Incrbyfloat 命令为 key 中所储存的值加上指定的浮点数增量值。\r\n\r\n如果 key 不存在，那么 INCRBYFLOAT 会先将 key 的值设为 0 ，再执行加法操作。\r\n\r\n#### 语法\r\nredis Incrbyfloat 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; INCRBYFLOAT KEY_NAME INCR_AMOUNT\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.6.0\r\n\r\n#### 返回值\r\n执行命令之后 key 的值。\r\n\r\n#### 实例\r\n```shell\r\n# 值和增量都不是指数符号\r\n \r\nredis&gt; SET mykey 10.50\r\nOK\r\n \r\nredis&gt; INCRBYFLOAT mykey 0.1\r\n&quot;10.6&quot;\r\n \r\n \r\n# 值和增量都是指数符号\r\n \r\nredis&gt; SET mykey 314e-2\r\nOK\r\n \r\nredis&gt; GET mykey                # 用 SET 设置的值可以是指数符号\r\n&quot;314e-2&quot;\r\n \r\nredis&gt; INCRBYFLOAT mykey 0      # 但执行 INCRBYFLOAT 之后格式会被改成非指数符号\r\n&quot;3.14&quot;\r\n \r\n \r\n# 可以对整数类型执行\r\n \r\nredis&gt; SET mykey 3\r\nOK\r\n \r\nredis&gt; INCRBYFLOAT mykey 1.1\r\n&quot;4.1&quot;\r\n \r\n \r\n# 后跟的 0 会被移除\r\n \r\nredis&gt; SET mykey 3.0\r\nOK\r\n \r\nredis&gt; GET mykey                                    # SET 设置的值小数部分可以是 0\r\n&quot;3.0&quot;\r\n \r\nredis&gt; INCRBYFLOAT mykey 1.000000000000000000000    # 但 INCRBYFLOAT 会将无用的 0 忽略掉，有需要的话，将浮点变为整数\r\n&quot;4&quot;\r\n \r\nredis&gt; GET mykey\r\n&quot;4&quot;\r\n```',0,17),(80,1,62,1,'Redis Decr 命令','','',1501689600,'### Redis Decr 命令 - 将 key 中储存的数字值减一。\r\n\r\n------------\r\n\r\nRedis Decr 命令将 key 中储存的数字值减一。\r\n\r\n如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 DECR 操作。\r\n\r\n如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。\r\n\r\n本操作的值限制在 64 位(bit)有符号数字表示之内。\r\n\r\n#### 语法\r\nredis Decr 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; DECR KEY_NAME \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n执行命令之后 key 的值。\r\n\r\n#### 实例\r\n```shell\r\n# 对存在的数字值 key 进行 DECR\r\n \r\nredis&gt; SET failure_times 10\r\nOK\r\n \r\nredis&gt; DECR failure_times\r\n(integer) 9\r\n \r\n \r\n# 对不存在的 key 值进行 DECR\r\n \r\nredis&gt; EXISTS count\r\n(integer) 0\r\n \r\nredis&gt; DECR count\r\n(integer) -1\r\n \r\n \r\n# 对存在但不是数值的 key 进行 DECR\r\n \r\nredis&gt; SET company YOUR_CODE_SUCKS.LLC\r\nOK\r\n \r\nredis&gt; DECR company\r\n(error) ERR value is not an integer or out of range\r\n```',1,18),(81,1,62,1,'Redis Decrby 命令','','',1501689600,'### Redis Decrby 命令 - key 所储存的值减去给定的减量值（decrement） 。\r\n\r\n------------\r\n\r\nRedis Decrby 命令将 key 所储存的值减去指定的减量值。\r\n\r\n如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 DECRBY 操作。\r\n\r\n如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。\r\n\r\n本操作的值限制在 64 位(bit)有符号数字表示之内。\r\n\r\n#### 语法\r\nredis Decrby 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; DECRBY KEY_NAME DECREMENT_AMOUNT\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n减去指定减量值之后， key 的值。\r\n\r\n#### 实例\r\n```shell\r\n# 对已存在的 key 进行 DECRBY\r\n \r\nredis&gt; SET count 100\r\nOK\r\n \r\nredis&gt; DECRBY count 20\r\n(integer) 80\r\n \r\n \r\n# 对不存在的 key 进行DECRBY\r\n \r\nredis&gt; EXISTS pages\r\n(integer) 0\r\n \r\nredis&gt; DECRBY pages 10\r\n(integer) -10\r\n```',1,19),(82,1,62,1,'Redis Append 命令','','',1501689600,'### Redis Append 命令 - 如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。\r\n\r\n------------\r\n\r\nRedis Append 命令用于为指定的 key 追加值。\r\n\r\n如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。\r\n\r\n如果 key 不存在， APPEND 就简单地将给定 key 设为 value ，就像执行 SET key value 一样。\r\n\r\n#### 语法\r\nredis Append 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; APPEND KEY_NAME NEW_VALUE\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n追加指定值之后， key 中字符串的长度。\r\n\r\n#### 实例\r\n```shell\r\n# 对不存在的 key 执行 APPEND\r\n \r\nredis&gt; EXISTS myphone               # 确保 myphone 不存在\r\n(integer) 0\r\n \r\nredis&gt; APPEND myphone &quot;nokia&quot;       # 对不存在的 key 进行 APPEND ，等同于 SET myphone &quot;nokia&quot;\r\n(integer) 5                         # 字符长度\r\n \r\n \r\n# 对已存在的字符串进行 APPEND\r\n \r\nredis&gt; APPEND myphone &quot; - 1110&quot;     # 长度从 5 个字符增加到 12 个字符\r\n(integer) 12\r\n \r\nredis&gt; GET myphone\r\n&quot;nokia - 1110&quot;\r\n```',4,20),(83,1,67,1,'Redis Pfadd 命令','','',1501689600,'### Redis Pfadd 命令 - 添加指定元素到 HyperLogLog 中。\r\n\r\n------------\r\n\r\nRedis Pfadd 命令将所有元素参数添加到 HyperLogLog 数据结构中。\r\n\r\n#### 语法\r\nredis Pfadd 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; PFADD key element [element ...]\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.8.9\r\n\r\n#### 返回值\r\n整型，如果至少有个元素被添加返回 1， 否则返回 0。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; PFADD mykey a b c d e f g h i j\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; PFCOUNT mykey\r\n(integer) 10\r\n```',0,1),(84,1,67,1,'Redis Pfcount 命令','','',1501689600,'### Redis Pfcount 命令 - 返回给定 HyperLogLog 的基数估算值。\r\n\r\n------------\r\n\r\nRedis Pfcount 命令返回给定 HyperLogLog 的基数估算值。\r\n\r\n#### 语法\r\nredis Pfcount 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; PFCOUNT key [key ...]\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.8.9\r\n\r\n#### 返回值\r\n整数，返回给定 HyperLogLog 的基数值，如果多个 HyperLogLog 则返回基数估值之和。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; PFADD hll foo bar zap\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; PFADD hll zap zap zap\r\n(integer) 0\r\nredis 127.0.0.1:6379&gt; PFADD hll foo bar\r\n(integer) 0\r\nredis 127.0.0.1:6379&gt; PFCOUNT hll\r\n(integer) 3\r\nredis 127.0.0.1:6379&gt; PFADD some-other-hll 1 2 3\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; PFCOUNT hll some-other-hll\r\n(integer) 6\r\nredis&gt; \r\n```',0,2),(85,1,67,1,'Redis Pgmerge 命令','','',1501689600,'### Redis Pgmerge 命令 - 将多个 HyperLogLog 合并为一个 HyperLogLog\r\n\r\n------------\r\n\r\nRedis Pgmerge 命令将多个 HyperLogLog 合并为一个 HyperLogLog ，合并后的 HyperLogLog 的基数估算值是通过对所有 给定 HyperLogLog 进行并集计算得出的。\r\n\r\n#### 语法\r\nredis Pgmerge 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; PFMERGE destkey sourcekey [sourcekey ...]\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.8.9\r\n\r\n#### 返回值\r\n返回 OK。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; PFADD hll1 foo bar zap a\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; PFADD hll2 a b c foo\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; PFMERGE hll3 hll1 hll2\r\nOK\r\nredis 127.0.0.1:6379&gt; PFCOUNT hll3\r\n(integer) 6\r\nredis&gt; \r\n```',0,3),(86,1,68,1,'Redis Psubscribe 命令','','',1501689600,'### Redis Psubscribe 命令 - 订阅一个或多个符合给定模式的频道。\r\n\r\n------------\r\n\r\nRedis Psubscribe 命令订阅一个或多个符合给定模式的频道。\r\n\r\n每个模式以 * 作为匹配符，比如 it * 匹配所有以 it 开头的频道( it.news 、 it.blog 、 it.tweets 等等)。 news.* 匹配所有以 news. 开头的频道( news.it 、 news.global.today 等等)，诸如此类。\r\n\r\n#### 语法\r\nredis Psubscribe 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; PSUBSCRIBE pattern [pattern ...]\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n接收到的信息。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; PSUBSCRIBE mychannel\r\nReading messages... (press Ctrl-C to quit)\r\n1) &quot;psubscribe&quot;\r\n2) &quot;mychannel&quot;\r\n3) (integer) 1\r\n```',6,1),(87,1,68,1,'Redis Pubsub 命令','','',1501689600,'### Redis Pubsub 命令 - 查看订阅与发布系统状态。\r\n\r\n------------\r\n\r\nRedis Pubsub 命令用于查看订阅与发布系统状态，它由数个不同格式的子命令组成。\r\n\r\n#### 语法\r\nredis Pubsub 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; PUBSUB &lt;subcommand&gt; [argument [argument ...]]\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.8.0\r\n\r\n返回值\r\n由活跃频道组成的列表。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; PUBSUB CHANNELS\r\n(empty list or set)\r\n```',1,2),(88,1,68,1,'Redis Publish 命令','','',1501689600,'### Redis Publish 命令 - 将信息发送到指定的频道。\r\n\r\n------------\r\n\r\nRedis Publish 命令用于将信息发送到指定的频道。\r\n\r\n#### 语法\r\nredis Publish 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; PUBLISH channel message\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n接收到信息的订阅者数量。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; PUBLISH mychannel &quot;hello, i m here&quot;\r\n(integer) 1\r\n```',0,3),(89,1,68,1,'Redis Punsubscribe 命令','','',1501689600,'### Redis Punsubscribe 命令 - 退订所有给定模式的频道。\r\n\r\n------------\r\n\r\nRedis Punsubscribe 命令用于退订所有给定模式的频道。\r\n\r\n#### 语法\r\nredis Punsubscribe 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; PUNSUBSCRIBE [pattern [pattern ...]]\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n这个命令在不同的客户端中有不同的表现。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; PUNSUBSCRIBE mychannel \r\n1) &quot;punsubscribe&quot;\r\n2) &quot;a&quot;\r\n3) (integer) 1\r\n```',0,4),(90,1,68,1,'Redis Subscribe 命令','','',1501689600,'### Redis Subscribe 命令 - 订阅给定的一个或多个频道的信息。\r\n\r\n------------\r\n\r\nRedis Subscribe 命令用于订阅给定的一个或多个频道的信息。。\r\n\r\n#### 语法\r\nredis Subscribe 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SUBSCRIBE channel [channel ...]\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n接收到的信息\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SUBSCRIBE mychannel \r\nReading messages... (press Ctrl-C to quit)\r\n1) &quot;subscribe&quot;\r\n2) &quot;mychannel&quot;\r\n3) (integer) 1\r\n1) &quot;message&quot;\r\n2) &quot;mychannel&quot;\r\n3) &quot;a&quot;\r\n```',1,5),(91,1,68,1,'Redis Unsubscribe 命令','','',1501689600,'### Redis Unsubscribe 命令 - 指退订给定的频道。\r\n\r\n------------\r\n\r\nRedis Unsubscribe 命令用于退订给定的一个或多个频道的信息。\r\n\r\n#### 语法\r\nredis Unsubscribe 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; UNSUBSCRIBE channel [channel ...]\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n这个命令在不同的客户端中有不同的表现。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; UNSUBSCRIBE mychannel \r\n1) &quot;unsubscribe&quot;\r\n2) &quot;a&quot;\r\n3) (integer) 0\r\n```',5,6),(92,1,69,1,'Redis Discard 命令','','',1501862400,'### Redis Discard 命令 - 取消事务，放弃执行事务块内的所有命令。\r\n\r\n------------\r\n\r\nRedis Discard 命令用于取消事务，放弃执行事务块内的所有命令。\r\n\r\n#### 语法\r\nredis Discard 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; discard\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n总是返回 OK 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; multi\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; ping\r\nQUEUED\r\n \r\nredis 127.0.0.1:6379&gt; set greeting &quot;hello&quot;\r\nQUEUED\r\n \r\nredis 127.0.0.1:6379&gt; discard\r\nOK\r\n```',0,1),(93,1,69,1,'Redis Exec 命令','','',1501862400,'### Redis Exec 命令 - 执行所有事务块内的命令。\r\n\r\n------------\r\n\r\nRedis Exec 命令用于执行所有事务块内的命令。\r\n\r\n#### 语法\r\nredis Exec 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; Exec\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.2.0\r\n\r\n#### 返回值\r\n事务块内所有命令的返回值，按命令执行的先后顺序排列。 当操作被打断时，返回空值 nil 。\r\n\r\n#### 实例\r\n```shell\r\n# 事务被成功执行\r\n \r\nredis 127.0.0.1:6379&gt; MULTI\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; INCR user_id\r\nQUEUED\r\n \r\nredis 127.0.0.1:6379&gt; INCR user_id\r\nQUEUED\r\n \r\nredis 127.0.0.1:6379&gt; INCR user_id\r\nQUEUED\r\n \r\nredis 127.0.0.1:6379&gt; PING\r\nQUEUED\r\n \r\nredis 127.0.0.1:6379&gt; EXEC\r\n1) (integer) 1\r\n2) (integer) 2\r\n3) (integer) 3\r\n4) PONG\r\n \r\n \r\n# 监视 key ，且事务成功执行\r\n \r\nredis 127.0.0.1:6379&gt; WATCH lock lock_times\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; MULTI\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; SET lock &quot;huangz&quot;\r\nQUEUED\r\n \r\nredis 127.0.0.1:6379&gt; INCR lock_times\r\nQUEUED\r\n \r\nredis 127.0.0.1:6379&gt; EXEC\r\n1) OK\r\n2) (integer) 1\r\n \r\n \r\n# 监视 key ，且事务被打断\r\n \r\nredis 127.0.0.1:6379&gt; WATCH lock lock_times\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; MULTI\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; SET lock &quot;joe&quot;        # 就在这时，另一个客户端修改了 lock_times 的值\r\nQUEUED\r\n \r\nredis 127.0.0.1:6379&gt; INCR lock_times\r\nQUEUED\r\n \r\nredis 127.0.0.1:6379&gt; EXEC                  # 因为 lock_times 被修改， joe 的事务执行失败\r\n(nil)\r\n```',0,2),(94,1,69,1,'Redis Multi 命令','','',1501862400,'### Redis Multi 命令 - 标记一个事务块的开始。\r\n\r\n------------\r\n\r\nRedis Multi 命令用于标记一个事务块的开始。\r\n\r\n事务块内的多条命令会按照先后顺序被放进一个队列当中，最后由 EXEC 命令原子性(atomic)地执行。\r\n\r\n#### 语法\r\nredis Multi 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; Multi\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.2.0\r\n\r\n#### 返回值\r\n总是返回 OK 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; MULTI            # 标记事务开始\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; INCR user_id     # 多条命令按顺序入队\r\nQUEUED\r\n \r\nredis 127.0.0.1:6379&gt; INCR user_id\r\nQUEUED\r\n \r\nredis 127.0.0.1:6379&gt; INCR user_id\r\nQUEUED\r\n \r\nredis 127.0.0.1:6379&gt; PING\r\nQUEUED\r\n \r\nredis 127.0.0.1:6379&gt; EXEC             # 执行\r\n1) (integer) 1\r\n2) (integer) 2\r\n3) (integer) 3\r\n4) PONG\r\n```',0,3),(95,1,69,1,'Redis Unwatch 命令','','',1501862400,'### Redis Unwatch 命令 - 取消 WATCH 命令对所有 key 的监视。\r\n\r\n------------\r\n\r\nRedis Unwatch 命令用于取消 WATCH 命令对所有 key 的监视。\r\n\r\n#### 语法\r\nredis Unwatch 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; UNWATCH \r\n```\r\n#### 可用版本\r\n\\&gt;= 2.2.0\r\n\r\n#### 返回值\r\n总是返回 OK 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; WATCH lock lock_times\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; UNWATCH\r\nOK\r\n```',0,4),(96,1,69,1,'Redis Watch 命令','','',1501862400,'### Redis Watch 命令 - 监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。\r\n\r\n------------\r\n\r\nRedis Watch 命令用于监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断\r\n\r\n#### 语法\r\nredis Watch 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; Watch \r\n```\r\n#### 可用版本\r\n\\&gt;= 2.2.0\r\n\r\n#### 返回值\r\n总是返回 OK 。\r\n\r\n#### 实例\r\n```shell\r\nredis&gt; WATCH lock lock_times\r\nOK\r\n```',1,5),(97,1,70,1,'Redis Eval 命令','','',1501862400,'### Redis Eval 命令 - 执行 Lua 脚本。\r\n\r\n------------\r\n\r\nRedis Eval 命令使用 Lua 解释器执行脚本。\r\n\r\n#### 语法\r\nredis Eval 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; EVAL script numkeys key [key ...] arg [arg ...] \r\n```\r\n#### 参数说明：\r\n\r\n`script：` 参数是一段 Lua 5.1 脚本程序。脚本不必(也不应该)定义为一个 Lua 函数。\r\n`numkeys：` 用于指定键名参数的个数。\r\n`key [key ...]：` 从 EVAL 的第三个参数开始算起，表示在脚本中所用到的那些 Redis 键(key)，这些键名参数可以在 Lua 中通过全局变量 KEYS 数组，用 1 为基址的形式访问( KEYS[1] ， KEYS[2] ，以此类推)。\r\n`arg [arg ...]：` 附加参数，在 Lua 中通过全局变量 ARGV 数组访问，访问的形式和 KEYS 变量类似( ARGV[1] 、 ARGV[2] ，诸如此类)。\r\n#### 可用版本\r\n\\&gt;= 2.6.0\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; eval &quot;return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}&quot; 2 key1 key2 first second\r\n1) &quot;key1&quot;\r\n2) &quot;key2&quot;\r\n3) &quot;first&quot;\r\n4) &quot;second&quot;\r\n```',0,1),(98,1,70,1,'Redis Evalsha 命令','','',1501862400,'### Redis Evalsha 命令 - 执行 Lua 脚本。\r\n\r\n------------\r\n\r\nRedis Evalsha 命令根据给定的 sha1 校验码，执行缓存在服务器中的脚本。\r\n\r\n#### 语法\r\nredis Evalsha 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; EVALSHA sha1 numkeys key [key ...] arg [arg ...]\r\n``` \r\n#### 参数说明：\r\n\r\n`script：` 参数是一段 Lua 5.1 脚本程序。脚本不必(也不应该)定义为一个 Lua 函数。\r\n`numkeys：` 用于指定键名参数的个数。\r\n`key [key ...]：` 从 EVAL 的第三个参数开始算起，表示在脚本中所用到的那些 Redis 键(key)，这些键名参数可以在 Lua 中通过全局变量 KEYS 数组，用 1 为基址的形式访问( KEYS[1] ， KEYS[2] ，以此类推)。\r\n`arg [arg ...]：` 附加参数，在 Lua 中通过全局变量 ARGV 数组访问，访问的形式和 KEYS 变量类似( ARGV[1] 、 ARGV[2] ，诸如此类)。\r\n#### 可用版本\r\n\\&gt;= 2.6.0\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SCRIPT LOAD &quot;return \'hello moto\'&quot;\r\n&quot;232fd51614574cf0867b83d384a5e898cfd24e5a&quot;\r\n \r\nredis 127.0.0.1:6379&gt; EVALSHA &quot;232fd51614574cf0867b83d384a5e898cfd24e5a&quot; 0\r\n&quot;hello moto&quot;\r\n```',0,2),(99,1,70,1,'Redis Script Exists 命令','','',1501862400,'### Redis Script Exists 命令 - 查看指定的脚本是否已经被保存在缓存当中。\r\n\r\n------------\r\n\r\nRedis Script Exists 命令用于校验指定的脚本是否已经被保存在缓存当中。\r\n\r\n#### 语法\r\nredis Script Exists 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; EVALSHA sha1 numkeys key [key ...] arg [arg ...] \r\n```\r\n#### 可用版本\r\n\\&gt;= 2.6.0\r\n\r\n#### 返回值\r\n一个列表，包含 0 和 1 ，前者表示脚本不存在于缓存，后者表示脚本已经在缓存里面了。\r\n\r\n列表中的元素和给定的 SHA1 校验和保持对应关系，比如列表的第三个元素的值就表示第三个 SHA1 校验和所指定的脚本在缓存中的状态。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SCRIPT LOAD &quot;return \'hello moto\'&quot;    # 载入一个脚本\r\n&quot;232fd51614574cf0867b83d384a5e898cfd24e5a&quot;\r\n \r\nredis 127.0.0.1:6379&gt; SCRIPT EXISTS 232fd51614574cf0867b83d384a5e898cfd24e5a\r\n1) (integer) 1\r\n \r\nredis 127.0.0.1:6379&gt; SCRIPT FLUSH     # 清空缓存\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; SCRIPT EXISTS 232fd51614574cf0867b83d384a5e898cfd24e5a\r\n1) (integer) 0\r\n```',0,3),(100,1,70,1,'Redis Script Flush 命令','','',1501862400,'### Redis Script Flush 命令 - 从脚本缓存中移除所有脚本。\r\n\r\n------------\r\n\r\nRedis Script Flush 命令用于清除所有 Lua 脚本缓存。\r\n\r\n#### 语法\r\nredis Script Flush 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SCRIPT FLUSH\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.6.0\r\n\r\n#### 返回值\r\n总是返回 OK\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SCRIPT FLUSH\r\nOK\r\n```',0,4),(101,1,70,1,'Redis Script kill 命令','','',1501862400,'### Redis Script kill 命令 - 杀死当前正在运行的 Lua 脚本。\r\n\r\n------------\r\n\r\nRedis Script kill 命令用于杀死当前正在运行的 Lua 脚本，当且仅当这个脚本没有执行过任何写操作时，这个命令才生效。\r\n\r\n这个命令主要用于终止运行时间过长的脚本，比如一个因为 BUG 而发生无限循环的脚本。\r\n\r\nSCRIPT KILL 执行之后，当前正在运行的脚本会被杀死，执行这个脚本的客户端会从 EVAL 命令的阻塞当中退出，并收到一个错误作为返回值。\r\n\r\n#### 语法\r\nredis Script kill 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SCRIPT KILL\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.6.0\r\n\r\n#### 返回值\r\n总是返回 OK\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SCRIPT KILL\r\nOK\r\n```',1,5),(102,1,70,1,'Redis Script Load 命令','','',1501862400,'### Redis Script Load 命令 - 将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。\r\n\r\n------------\r\n\r\nRedis Script Load 命令用于将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。\r\n\r\nEVAL 命令也会将脚本添加到脚本缓存中，但是它会立即对输入的脚本进行求值。\r\n\r\n如果给定的脚本已经在缓存里面了，那么不执行任何操作。\r\n\r\n在脚本被加入到缓存之后，通过 EVALSHA 命令，可以使用脚本的 SHA1 校验和来调用这个脚本。\r\n\r\n脚本可以在缓存中保留无限长的时间，直到执行 SCRIPT FLUSH 为止。\r\n\r\n关于使用 Redis 对 Lua 脚本进行求值的更多信息，请参见 EVAL 命令。\r\n\r\n#### 语法\r\nredis Script Load 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SCRIPT LOAD script\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.6.0\r\n\r\n#### 返回值\r\n给定脚本的 SHA1 校验和\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SCRIPT LOAD &quot;return 1&quot;\r\n&quot;e0e1f9fabfc9d4800c877a703b823ac0578ff8db&quot;\r\n```',5,6),(103,1,71,1,'Redis Auth 命令','','',1502035200,'### Redis Auth 命令 - 验证密码是否正确\r\n\r\n------------\r\n\r\nRedis Auth 命令用于检测给定的密码和配置文件中的密码是否相符。\r\n\r\n#### 语法\r\nredis Auth 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; AUTH PASSWORD\r\n``` \r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n密码匹配时返回 OK ，否则返回一个错误。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; AUTH PASSWORD\r\n(error) ERR Client sent AUTH, but no password is set\r\nredis 127.0.0.1:6379&gt; CONFIG SET requirepass &quot;mypass&quot;\r\nOK\r\nredis 127.0.0.1:6379&gt; AUTH mypass\r\nOk\r\n```',0,1),(104,1,71,1,'Redis Echo 命令','','',1502035200,'### Redis Echo 命令 - 打印字符串\r\n\r\n------------\r\n\r\nRedis Echo 命令用于打印给定的字符串。\r\n\r\n#### 语法\r\nredis Echo 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ECHO message\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n返回字符串本身。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; ECHO &quot;Hello World&quot;\r\n&quot;Hello World&quot;\r\n```',1,2),(105,1,71,1,'Redis Ping 命令','','',1502035200,'### Redis Ping 命令 - 查看服务是否运行\r\n\r\n------------\r\n\r\nRedis Ping 命令使用客户端向 Redis 服务器发送一个 PING ，如果服务器运作正常的话，会返回一个 PONG 。\r\n\r\n通常用于测试与服务器的连接是否仍然生效，或者用于测量延迟值。\r\n\r\n#### 语法\r\nredis Ping 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; PING\r\n``` \r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n如果连接正常就返回一个 PONG ，否则返回一个连接错误。\r\n\r\n#### 实例\r\n```shell\r\n# 客户端和服务器连接正常\r\n \r\nredis 127.0.0.1:6379&gt; PING\r\nPONG\r\n \r\n# 客户端和服务器连接不正常(网络不正常或服务器未能正常运行)\r\n \r\nredis 127.0.0.1:6379&gt; PING\r\nCould not connect to Redis at 127.0.0.1:6379: Connection refused\r\n```',0,3),(106,1,71,1,'Redis Quit 命令','','',1502035200,'### Redis Quit 命令 - 关闭当前连接\r\n\r\n------------\r\n\r\nRedis Quit 命令用于关闭与当前客户端与redis服务的连接。\r\n\r\n一旦所有等待中的回复(如果有的话)顺利写入到客户端，连接就会被关闭。\r\n\r\n#### 语法\r\nredis Quit 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; QUIT\r\n``` \r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n总是返回 OK 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; QUIT\r\nOK\r\n```',0,4),(107,1,71,1,'Redis Select 命令','','',1502035200,'### Redis Select 命令 - 切换到指定的数据库\r\n\r\n------------\r\n\r\nRedis Select 命令用于切换到指定的数据库，数据库索引号 index 用数字值指定，以 0 作为起始索引值。\r\n\r\n#### 语法\r\nredis Select 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SELECT index\r\n``` \r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n总是返回 OK 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SET db_number 0         # 默认使用 0 号数据库\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; SELECT 1                # 使用 1 号数据库\r\nOK\r\n \r\nredis 127.0.0.1:6379[1]&gt; GET db_number        # 已经切换到 1 号数据库，注意 Redis 现在的命令提示符多了个 [1]\r\n(nil)\r\n \r\nredis 127.0.0.1:6379[1]&gt; SET db_number 1\r\nOK\r\n \r\nredis 127.0.0.1:6379[1]&gt; GET db_number\r\n&quot;1&quot;\r\n \r\nredis 127.0.0.1:6379[1]&gt; SELECT 3             # 再切换到 3 号数据库\r\nOK\r\n \r\nredis 127.0.0.1:6379[3]&gt;                      # 提示符从 [1] 改变成了 [3]\r\n```',10,5),(108,1,63,1,'Redis Hdel 命令','','',1502035200,'### Redis Hdel 命令 - 删除一个或多个哈希表字段\r\n\r\n------------\r\n\r\nRedis Hdel 命令用于删除哈希表 key 中的一个或多个指定字段，不存在的字段将被忽略。\r\n\r\n#### 语法\r\nredis Hdel 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; HDEL KEY_NAME FIELD1.. FIELDN\r\n``` \r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n被成功删除字段的数量，不包括被忽略的字段。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; HDEL myhash field1\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; HDEL myhash field2\r\n(integer) 0\r\n```',0,1),(109,1,63,1,'Redis Hexists 命令','','',1502035200,'### Redis Hexists 命令 - 查看哈希表 key 中，指定的字段是否存在。\r\n\r\n------------\r\n\r\nRedis Hexists 命令用于查看哈希表的指定字段是否存在。\r\n\r\n#### 语法\r\nredis Hexists 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; HEXISTS KEY_NAME FIELD_NAME \r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n如果哈希表含有给定字段，返回 1 。 如果哈希表不含有给定字段，或 key 不存在，返回 0 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; HEXISTS myhash field1\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; HEXISTS myhash field2\r\n(integer) 0\r\n```',0,2),(110,1,63,1,'Redis Hget 命令','','',1502035200,'### Redis Hget 命令 - 获取存储在哈希表中指定字段的值\r\n\r\n------------\r\n\r\nRedis Hget 命令用于返回哈希表中指定字段的值。\r\n\r\n#### 语法\r\nredis Hget 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; HGET KEY_NAME FIELD_NAME \r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n返回给定字段的值。如果给定的字段或 key 不存在时，返回 nil 。\r\n\r\n#### 实例\r\n```shell\r\n# 字段存在\r\n \r\nredis&gt; HSET site redis redis.com\r\n(integer) 1\r\n \r\nredis&gt; HGET site redis\r\n&quot;redis.com&quot;\r\n \r\n \r\n# 字段不存在\r\n \r\nredis&gt; HGET site mysql\r\n(nil)\r\n```',0,3),(111,1,63,1,'Redis Hgetall 命令','','',1502035200,'### Redis Hgetall 命令 - 获取在哈希表中指定 key 的所有字段和值\r\n\r\n------------\r\n\r\nRedis Hgetall 命令用于返回哈希表中，所有的字段和值。\r\n\r\n在返回值里，紧跟每个字段名(field name)之后是字段的值(value)，所以返回值的长度是哈希表大小的两倍。\r\n\r\n#### 语法\r\nredis Hgetall 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; HGETALL KEY_NAME \r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n以列表形式返回哈希表的字段及字段值。 若 key 不存在，返回空列表。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; HSET myhash field2 &quot;bar&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; HGETALL myhash\r\n1) &quot;field1&quot;\r\n2) &quot;Hello&quot;\r\n3) &quot;field2&quot;\r\n4) &quot;World&quot;\r\n```',0,4),(112,1,63,1,'Redis Hincrby 命令','','',1502035200,'### Redis Hincrby 命令 - 为哈希表 key 中的指定字段的整数值加上增量 increment 。\r\n\r\n------------\r\n\r\nRedis Hincrby 命令用于为哈希表中的字段值加上指定增量值。\r\n\r\n增量也可以为负数，相当于对指定字段进行减法操作。\r\n\r\n如果哈希表的 key 不存在，一个新的哈希表被创建并执行 HINCRBY 命令。\r\n\r\n如果指定的字段不存在，那么在执行命令前，字段的值被初始化为 0 。\r\n\r\n对一个储存字符串值的字段执行 HINCRBY 命令将造成一个错误。\r\n\r\n本操作的值被限制在 64 位(bit)有符号数字表示之内。\r\n\r\n#### 语法\r\nredis Hincrby 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; HINCRBY KEY_NAME FIELD_NAME INCR_BY_NUMBER \r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n执行 HINCRBY 命令之后，哈希表中字段的值。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; HSET myhash field1 20\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; HINCRBY myhash field 1\r\n(integer) 21\r\nredis 127.0.0.1:6379&gt; HINCRBY myhash field -1\r\n(integer) 20\r\n```',0,5),(113,1,63,1,'Redis Hincrbyfloat 命令','','',1502035200,'### Redis Hincrbyfloat 命令 - 为哈希表 key 中的指定字段的浮点数值加上增量 increment 。\r\n\r\n------------\r\n\r\nRedis Hincrbyfloat 命令用于为哈希表中的字段值加上指定浮点数增量值。\r\n\r\n如果指定的字段不存在，那么在执行命令前，字段的值被初始化为 0 。\r\n\r\n#### 语法\r\nredis Hincrbyfloat 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; HINCRBYFLOAT KEY_NAME FIELD_NAME INCR_BY_NUMBER\r\n``` \r\n#### 可用版本\r\n\\&gt;= 2.6.0\r\n\r\n#### 返回值\r\n执行 Hincrbyfloat 命令之后，哈希表中字段的值。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; HSET myhash field 20.50\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; HINCRBYFLOAT mykey field 0.1\r\n&quot;20.60&quot;\r\n```',0,6),(114,1,63,1,'Redis Hkeys 命令','','',1502035200,'### Redis Hkeys 命令 - 获取所有哈希表中的字段\r\n\r\n------------\r\n\r\nRedis Hkeys 命令用于获取哈希表中的所有字段名。\r\n\r\n#### 语法\r\nredis Hkeys 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; HKEYS KEY_NAME FIELD_NAME INCR_BY_NUMBER \r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n包含哈希表中所有字段的列表。 当 key 不存在时，返回一个空列表。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; HSET myhash field2 &quot;bar&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; HKEYS myhash\r\n1) &quot;field1&quot;\r\n2) &quot;field2&quot;\r\n```',0,7),(115,1,63,1,'Redis Hlen 命令','','',1502035200,'### Redis Hlen 命令 - 获取哈希表中字段的数量\r\n\r\n------------\r\n\r\nRedis Hlen 命令用于获取哈希表中字段的数量。\r\n\r\n#### 语法\r\nredis Hlen 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; HLEN KEY_NAME \r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n哈希表中字段的数量。 当 key 不存在时，返回 0 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; HSET myhash field2 &quot;bar&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; HLEN myhash\r\n(integer) 2\r\n```',0,8),(116,1,63,1,'Redis Hmget 命令','','',1502035200,'### Redis Hmget 命令 - 获取所有给定字段的值\r\n\r\n------------\r\n\r\nRedis Hmget 命令用于返回哈希表中，一个或多个给定字段的值。\r\n\r\n如果指定的字段不存在于哈希表，那么返回一个 nil 值。\r\n\r\n#### 语法\r\nredis Hmget 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; HMGET KEY_NAME FIELD1...FIELDN \r\n```\r\n####可用版本\r\n\\&gt;= 2.0.0\r\n\r\n####返回值\r\n一个包含多个给定字段关联值的表，表值的排列顺序和指定字段的请求顺序一样。\r\n\r\n####实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; HSET myhash field2 &quot;bar&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; HMGET myhash field1 field2 nofield\r\n1) &quot;foo&quot;\r\n2) &quot;bar&quot;\r\n3) (nil)\r\n```',0,9);
INSERT INTO `card_manual` VALUES (117,1,63,1,'Redis Hmset 命令','','',1502035200,'### Redis Hmset 命令 - 同时将多个 field-value (域-值)对设置到哈希表 key 中。\r\n\r\n------------\r\n\r\nRedis Hmset 命令用于同时将多个 field-value (字段-值)对设置到哈希表中。\r\n\r\n此命令会覆盖哈希表中已存在的字段。\r\n\r\n如果哈希表不存在，会创建一个空哈希表，并执行 HMSET 操作。\r\n\r\n#### 语法\r\nredis Hmset 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; HMSET KEY_NAME FIELD1 VALUE1 ...FIELDN VALUEN  \r\n``` \r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n如果命令执行成功，返回 OK 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot; field2 &quot;bar&quot;\r\nOK\r\nredis 127.0.0.1:6379&gt; HGET myhash field1\r\n&quot;foo&quot;\r\nredis 127.0.0.1:6379&gt; HMGET myhash field2\r\n&quot;bar&quot;\r\n```',0,10),(118,1,63,1,'Redis Hset 命令','','',1502035200,'### Redis Hset 命令 - 将哈希表 key 中的字段 field 的值设为 value 。\r\n\r\n------------\r\n\r\nRedis Hset 命令用于为哈希表中的字段赋值 。\r\n\r\n如果哈希表不存在，一个新的哈希表被创建并进行 HSET 操作。\r\n\r\n如果字段已经存在于哈希表中，旧值将被覆盖。\r\n\r\n#### 语法\r\nredis Hset 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; HSET KEY_NAME FIELD VALUE \r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n如果字段是哈希表中的一个新建字段，并且值设置成功，返回 1 。 如果哈希表中域字段已经存在且旧值已被新值覆盖，返回 0 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;\r\nOK\r\nredis 127.0.0.1:6379&gt; HGET myhash field1\r\n&quot;foo&quot;\r\n \r\nredis 127.0.0.1:6379&gt; HSET website google &quot;www.g.cn&quot;       # 设置一个新域\r\n(integer) 1\r\n \r\nredis 127.0.0.1:6379&gt;HSET website google &quot;www.google.com&quot; # 覆盖一个旧域\r\n(integer) 0\r\n```',0,11),(119,1,63,1,'Redis Hsetnx 命令','','',1502035200,'### Redis Hsetnx 命令 - 只有在字段 field 不存在时，设置哈希表字段的值。\r\n\r\n------------\r\n\r\nRedis Hsetnx 命令用于为哈希表中不存在的的字段赋值 。\r\n\r\n如果哈希表不存在，一个新的哈希表被创建并进行 HSET 操作。\r\n\r\n如果字段已经存在于哈希表中，操作无效。\r\n\r\n如果 key 不存在，一个新哈希表被创建并执行 HSETNX 命令。\r\n\r\n#### 语法\r\nredis Hsetnx 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; HSETNX KEY_NAME FIELD VALUE\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n设置成功，返回 1 。 如果给定字段已经存在且没有操作被执行，返回 0 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; HSETNX myhash field1 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; HSETNX myhash field1 &quot;bar&quot;\r\n(integer) 0\r\nredis 127.0.0.1:6379&gt; HGET myhash field1\r\n&quot;foo&quot;\r\n \r\nredis 127.0.0.1:6379&gt; HSETNX nosql key-value-store redis\r\n(integer) 1\r\n \r\nredis 127.0.0.1:6379&gt; HSETNX nosql key-value-store redis       # 操作无效， key-value-store 已存在\r\n(integer) 0\r\n```',0,12),(120,1,63,1,'Redis Hvals 命令','','',1502035200,'### Redis Hvals 命令 - 获取哈希表中所有值\r\n\r\n------------\r\n\r\nRedis Hvals 命令返回哈希表所有字段的值。\r\n\r\n#### 语法\r\nredis Hvals 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; HVALS KEY_NAME FIELD VALUE \r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n一个包含哈希表中所有值的表。 当 key 不存在时，返回一个空表。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; HSET myhash field2 &quot;bar&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; HVALS myhash\r\n1) &quot;foo&quot;\r\n2) &quot;bar&quot;\r\n \r\n# 空哈希表/不存在的key\r\n \r\nredis 127.0.0.1:6379&gt; EXISTS not_exists\r\n(integer) 0\r\n \r\nredis 127.0.0.1:6379&gt; HVALS not_exists\r\n(empty list or set)\r\n```',0,13),(121,1,64,1,'Redis Blpop 命令','','',1502208000,'### Redis Blpop 命令 - 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\r\n\r\n------------\r\n\r\nRedis Blpop 命令移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\r\n\r\n#### 语法\r\nredis Blpop 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; BLPOP LIST1 LIST2 .. LISTN TIMEOUT\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n如果列表为空，返回一个 nil 。 否则，返回一个含有两个元素的列表，第一个元素是被弹出元素所属的 key ，第二个元素是被弹出元素的值。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; BLPOP list1 100\r\n```\r\n在以上实例中，操作会被阻塞，如果指定的列表 key list1 存在数据则会返回第一个元素，否则在等待100秒后会返回nil 。\r\n```shell\r\n(nil)\r\n(100.06s)\r\n```',0,1),(122,1,64,1,'Redis Brpop 命令','','',1502208000,'### Redis Brpop 命令 - 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\r\n\r\n------------\r\n\r\nRedis Brpop 命令移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\r\n\r\n#### 语法\r\nredis Blpop 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; BRPOP LIST1 LIST2 .. LISTN TIMEOUT\r\n``` \r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n假如在指定时间内没有任何元素被弹出，则返回一个 nil 和等待时长。 反之，返回一个含有两个元素的列表，第一个元素是被弹出元素所属的 key ，第二个元素是被弹出元素的值。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; BRPOP list1 100\r\n```\r\n在以上实例中，操作会被阻塞，如果指定的列表 key list1 存在数据则会返回第一个元素，否则在等待100秒后会返回 nil 。\r\n\r\n```shell\r\n(nil)\r\n(100.06s)\r\n```',0,2),(123,1,64,1,'Redis Brpoplpush 命令','','',1502208000,'### Redis Brpoplpush 命令 - 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\r\n\r\n------------\r\n\r\nRedis Brpoplpush 命令从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\r\n\r\n#### 语法\r\nredis Brpoplpush 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; BRPOPLPUSH LIST1 ANOTHER_LIST TIMEOUT \r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n假如在指定时间内没有任何元素被弹出，则返回一个 nil 和等待时长。 反之，返回一个含有两个元素的列表，第一个元素是被弹出元素的值，第二个元素是等待时长。\r\n\r\n#### 实例\r\n```shell\r\n# 非空列表\r\n \r\nredis 127.0.0.1:6379&gt; BRPOPLPUSH msg reciver 500\r\n&quot;hello moto&quot;                        # 弹出元素的值\r\n(3.38s)                             # 等待时长\r\n \r\nredis 127.0.0.1:6379&gt; LLEN reciver\r\n(integer) 1\r\n \r\nredis 127.0.0.1:6379&gt; LRANGE reciver 0 0\r\n1) &quot;hello moto&quot;\r\n \r\n \r\n# 空列表\r\n \r\nredis 127.0.0.1:6379&gt; BRPOPLPUSH msg reciver 1\r\n(nil)\r\n(1.34s)\r\n&lt;pre&gt;\r\n(nil)\r\n(100.06s)\r\n```',0,3),(124,1,64,1,'Redis Lindex 命令','','',1502208000,'### Redis Lindex 命令 - 通过索引获取列表中的元素\r\n\r\n------------\r\n\r\nRedis Lindex 命令用于通过索引获取列表中的元素。你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。\r\n\r\n#### 语法\r\nredis Lindex 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; LINDEX KEY_NAME INDEX_POSITION \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n列表中下标为指定索引值的元素。 如果指定索引值不在列表的区间范围内，返回 nil 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; LPUSH mylist &quot;World&quot;\r\n(integer) 1\r\n \r\nredis 127.0.0.1:6379&gt; LPUSH mylist &quot;Hello&quot;\r\n(integer) 2\r\n \r\nredis 127.0.0.1:6379&gt; LINDEX mylist 0\r\n&quot;Hello&quot;\r\n \r\nredis 127.0.0.1:6379&gt; LINDEX mylist -1\r\n&quot;World&quot;\r\n \r\nredis 127.0.0.1:6379&gt; LINDEX mylist 3        # index不在 mylist 的区间范围内\r\n(nil)\r\n```',0,4),(125,1,64,1,'Redis Linsert 命令','','',1502208000,'### Redis Linsert 命令 - 在列表的元素前或者后插入元素\r\n\r\n------------\r\n\r\nRedis Linsert 命令用于在列表的元素前或者后插入元素。 当指定元素不存在于列表中时，不执行任何操作。 当列表不存在时，被视为空列表，不执行任何操作。 如果 key 不是列表类型，返回一个错误。\r\n\r\n#### 语法\r\nredis Linsert 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; LINSERT KEY_NAME BEFORE EXISTING_VALUE NEW_VALUE\r\n``` \r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n如果命令执行成功，返回插入操作完成之后，列表的长度。 如果没有找到指定元素 ，返回 -1 。 如果 key 不存在或为空列表，返回 0 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; RPUSH list1 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; RPUSH list1 &quot;bar&quot;\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; LINSERT list1 BEFORE &quot;bar&quot; &quot;Yes&quot;\r\n(integer) 3\r\nredis 127.0.0.1:6379&gt; LRANGE mylist 0 -1\r\n1) &quot;foo&quot;\r\n2) &quot;Yes&quot;\r\n3) &quot;bar&quot;\r\n```',1,5),(126,1,64,1,'Redis Llen 命令','','',1502208000,'### Redis Llen 命令 - 获取列表长度\r\n\r\n------------\r\n\r\nRedis Llen 命令用于返回列表的长度。 如果列表 key 不存在，则 key 被解释为一个空列表，返回 0 。 如果 key 不是列表类型，返回一个错误。\r\n\r\n#### 语法\r\nredis Llen 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; LLEN KEY_NAME \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n列表的长度。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; RPUSH list1 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; RPUSH list1 &quot;bar&quot;\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; LLEN list1\r\n(integer) 2\r\n```',0,6),(127,1,64,1,'Redis Lpop 命令','','',1502208000,'### Redis Lpop 命令 - 移出并获取列表的第一个元素\r\n\r\n------------\r\n\r\nRedis Lpop 命令用于移除并返回列表的第一个元素。\r\n\r\n#### 语法\r\nredis Lpop 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; LLEN KEY_NAME \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n列表的第一个元素。 当列表 key 不存在时，返回 nil 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; RPUSH list1 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; RPUSH list1 &quot;bar&quot;\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; LPOP list1\r\n&quot;foo&quot;\r\n```',0,7),(128,1,64,1,'Redis Lpush 命令','','',1502208000,'### Redis Lpush 命令 - 将一个或多个值插入到列表头部\r\n\r\n------------\r\n\r\nRedis Lpush 命令将一个或多个值插入到列表头部。 如果 key 不存在，一个空列表会被创建并执行 LPUSH 操作。 当 key 存在但不是列表类型时，返回一个错误。\r\n\r\n注意：在Redis 2.4版本以前的 LPUSH 命令，都只接受单个 value 值。\r\n\r\n#### 语法\r\nredis Lpush 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; LPUSH KEY_NAME VALUE1.. VALUEN\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n执行 LPUSH 命令后，列表的长度。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; LPUSH list1 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; LPUSH list1 &quot;bar&quot;\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; LRANGE list1 0 -1\r\n1) &quot;foo&quot;\r\n2) &quot;bar\r\n```',0,8),(129,1,64,1,'Redis Lpushx 命令','','',1502208000,'### Redis Lpushx 命令 - 将一个或多个值插入到已存在的列表头部\r\n\r\n------------\r\n\r\nRedis Lpushx 将一个或多个值插入到已存在的列表头部，列表不存在时操作无效。\r\n\r\n#### 语法\r\nredis Lpushx 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; LPUSHX KEY_NAME VALUE1.. VALUEN\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.2.0\r\n\r\n#### 返回值\r\nLPUSHX 命令执行之后，列表的长度。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; LPUSH list1 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; LPUSHX list1 &quot;bar&quot;\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; LPUSHX list2 &quot;bar&quot;\r\n(integer) 0\r\nredis 127.0.0.1:6379&gt; LRANGE list1 0 -1\r\n1) &quot;foo&quot;\r\n2) &quot;bar&quot;\r\n```',0,9),(130,1,64,1,'Redis Lrange 命令','','',1502208000,'### Redis Lrange 命令 - 获取列表指定范围内的元素\r\n\r\n------------\r\n\r\nRedis Lrange 返回列表中指定区间内的元素，区间以偏移量 START 和 END 指定。 其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。\r\n\r\n#### 语法\r\nredis Lrange 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; LRANGE KEY_NAME START END\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n一个列表，包含指定区间内的元素。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; LPUSH list1 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; LPUSH list1 &quot;bar&quot;\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; LPUSHX list1 &quot;bar&quot;\r\n(integer) 0\r\nredis 127.0.0.1:6379&gt; LRANGE list1 0 -1\r\n1) &quot;foo&quot;\r\n2) &quot;bar&quot;\r\n3) &quot;bar&quot;\r\n```',0,10),(131,1,64,1,'Redis Lrem 命令','','',1502208000,'### Redis Lrem 命令 - 移除列表元素\r\n\r\n------------\r\n\r\nRedis Lrem 根据参数 COUNT 的值，移除列表中与参数 VALUE 相等的元素。\r\n\r\nCOUNT 的值可以是以下几种：\r\n\r\n`count &gt; 0 :` 从表头开始向表尾搜索，移除与 VALUE 相等的元素，数量为 COUNT 。\r\n`count &lt; 0 :` 从表尾开始向表头搜索，移除与 VALUE 相等的元素，数量为 COUNT 的绝对值。\r\n`count = 0 :` 移除表中所有与 VALUE 相等的值。\r\n#### 语法\r\nredis Lrem 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; LREM KEY_NAME COUNT VALUE\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n被移除元素的数量。 列表不存在时返回 0 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;foo&quot;\r\n(integer) 3\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;\r\n(integer) 4\r\nredis 127.0.0.1:6379&gt; LREM mylist -2 &quot;hello&quot;\r\n(integer) 2\r\n```',0,11),(132,1,64,1,'Redis Lset 命令','','',1502208000,'### Redis Lset 命令 - 通过索引设置列表元素的值\r\n\r\n------------\r\n\r\nRedis Lset 通过索引来设置元素的值。\r\n\r\n当索引参数超出范围，或对一个空列表进行 LSET 时，返回一个错误。\r\n\r\n关于列表下标的更多信息，请参考 LINDEX 命令。\r\n\r\n#### 语法\r\nredis Lset 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; LSET KEY_NAME INDEX VALUE\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n操作成功返回 ok ，否则返回错误信息。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;foo&quot;\r\n(integer) 3\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;\r\n(integer) 4\r\nredis 127.0.0.1:6379&gt; LSET mylist 0 &quot;bar&quot;\r\nOK\r\nredis 127.0.0.1:6379&gt; LRANGE mylist 0 -1\r\n1: &quot;bar&quot;\r\n2) &quot;hello&quot;\r\n3) &quot;foo&quot;\r\n4) &quot;hello&quot;\r\n```',0,12),(133,1,64,1,'Redis Ltrim 命令','','',1502208000,'### Redis Ltrim 命令 - 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。\r\n\r\n------------\r\n\r\nRedis Ltrim 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。\r\n\r\n下标 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。\r\n\r\n#### 语法\r\nredis Ltrim 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; LTRIM KEY_NAME START STOP\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n命令执行成功时，返回 ok 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;foo&quot;\r\n(integer) 3\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;bar&quot;\r\n(integer) 4\r\nredis 127.0.0.1:6379&gt; LTRIM mylist 1 -1\r\nOK\r\nredis 127.0.0.1:6379&gt; LRANGE mylist 0 -1\r\n1) &quot;hello&quot;\r\n2) &quot;foo&quot;\r\n3) &quot;bar&quot;\r\n```',0,13),(134,1,64,1,'Redis Rpop 命令','','',1502208000,'### Redis Rpop 命令 - 移除并获取列表最后一个元素\r\n\r\n------------\r\n\r\nRedis Rpop 命令用于移除并返回列表的最后一个元素。\r\n\r\n#### 语法\r\nredis Rpop 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; RPOP KEY_NAME\r\n``` \r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n列表的最后一个元素。 当列表不存在时，返回 nil 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;foo&quot;\r\n(integer) 3\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;bar&quot;\r\n(integer) 4\r\nredis 127.0.0.1:6379&gt; RPOP mylist\r\nOK\r\nredis 127.0.0.1:6379&gt; LRANGE mylist 0 -1\r\n1) &quot;hello&quot;\r\n2) &quot;hello&quot;\r\n3) &quot;foo&quot;\r\n```',0,14),(135,1,64,1,'Redis Rpoplpush 命令','','',1502208000,'### Redis Rpoplpush 命令 - 移除列表的最后一个元素，并将该元素添加到另一个列表并返回\r\n\r\n------------\r\n\r\nRedis Rpoplpush 命令用于移除列表的最后一个元素，并将该元素添加到另一个列表并返回。\r\n\r\n#### 语法\r\nredis Rpoplpush 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; RPOPLPUSH SOURCE_KEY_NAME DESTINATION_KEY_NAME\r\n```\r\n#### #### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n被弹出的元素。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;foo&quot;\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;bar&quot;\r\n(integer) 3\r\nredis 127.0.0.1:6379&gt; RPOPLPUSH mylist myotherlist\r\n&quot;bar&quot;\r\nredis 127.0.0.1:6379&gt; LRANGE mylist 0 -1\r\n1) &quot;hello&quot;\r\n2) &quot;foo&quot;\r\n```',0,15),(136,1,64,1,'Redis Rpush 命令','','',1502208000,'### Redis Rpush 命令 - 在列表中添加一个或多个值\r\n\r\n------------\r\n\r\nRedis Rpush 命令用于将一个或多个值插入到列表的尾部(最右边)。\r\n\r\n如果列表不存在，一个空列表会被创建并执行 RPUSH 操作。 当列表存在但不是列表类型时，返回一个错误。\r\n\r\n注意：在 Redis 2.4 版本以前的 RPUSH 命令，都只接受单个 value 值。\r\n\r\n#### 语法\r\nredis Rpush 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; RPUSH KEY_NAME VALUE1..VALUEN\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n执行 RPUSH 操作后，列表的长度。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;foo&quot;\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;bar&quot;\r\n(integer) 3\r\nredis 127.0.0.1:6379&gt; LRANGE mylist 0 -1\r\n1) &quot;hello&quot;\r\n2) &quot;foo&quot;\r\n3) &quot;bar&quot;\r\n```',0,16),(137,1,64,1,'Redis Rpushx 命令','','',1502208000,'### Redis Rpushx 命令 - 为已存在的列表添加值\r\n\r\n------------\r\n\r\nRedis Rpushx 命令用于将一个或多个值插入到已存在的列表尾部(最右边)。如果列表不存在，操作无效。\r\n\r\n#### 语法\r\nredis Rpushx 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; RPUSHX KEY_NAME VALUE1..VALUEN\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.2.0\r\n\r\n#### 返回值\r\n执行 Rpushx 操作后，列表的长度。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; RPUSH mylist &quot;foo&quot;\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; RPUSHX mylist2 &quot;bar&quot;\r\n(integer) 0\r\nredis 127.0.0.1:6379&gt; LRANGE mylist 0 -1\r\n1) &quot;hello&quot;\r\n2) &quot;foo&quot;\r\n```',0,17),(138,1,65,1,'Redis Sadd 命令','','',1502294400,'### Redis Sadd 命令 - 向集合添加一个或多个成员\r\n\r\n------------\r\n\r\nRedis Sadd 命令将一个或多个成员元素加入到集合中，已经存在于集合的成员元素将被忽略。\r\n\r\n假如集合 key 不存在，则创建一个只包含添加的元素作成员的集合。\r\n\r\n当集合 key 不是集合类型时，返回一个错误。\r\n\r\n注意：在Redis2.4版本以前， SADD 只接受单个成员值。\r\n\r\n#### 语法\r\nredis Sadd 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SADD KEY_NAME VALUE1..VALUEN\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n被添加到集合中的新元素的数量，不包括被忽略的元素。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SADD myset &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset &quot;hello&quot;\r\n(integer) 0\r\nredis 127.0.0.1:6379&gt; SMEMBERS myset\r\n1) &quot;hello&quot;\r\n2) &quot;foo&quot;\r\n```',0,1),(139,1,65,1,'Redis Scard 命令','','',1502294400,'### Redis Scard 命令 - 获取集合的成员数\r\n\r\n------------\r\n\r\nRedis Scard 命令返回集合中元素的数量。\r\n\r\n#### 语法\r\nredis Scard 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SCARD KEY_NAME \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n集合的数量。 当集合 key 不存在时，返回 0 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SADD myset &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset &quot;hello&quot;\r\n(integer) 0\r\nredis 127.0.0.1:6379&gt; SCARD myset\r\n(integer) 2\r\n```',0,2),(140,1,65,1,'Redis Sdiff 命令','','',1502294400,'### Redis Sdiff 命令 - 返回给定所有集合的差集\r\n\r\n------------\r\n\r\nRedis Sdiff 命令返回给定集合之间的差集。不存在的集合 key 将视为空集。\r\n\r\n#### 语法\r\nredis Sdiff 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SDIFF FIRST_KEY OTHER_KEY1..OTHER_KEYN \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n包含差集成员的列表。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SADD myset &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset &quot;bar&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset2 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset2 &quot;world&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SDIFF myset myset2\r\n1) &quot;foo&quot;\r\n2) &quot;bar&quot;\r\n```',0,3),(141,1,65,1,'Redis Sdiffstore 命令','','',1502294400,'### Redis Sdiffstore 命令 - 返回给定所有集合的差集并存储在 destination 中\r\n\r\n------------\r\n\r\nRedis Sdiffstore 命令将给定集合之间的差集存储在指定的集合中。如果指定的集合 key 已存在，则会被覆盖。\r\n\r\n#### 语法\r\nredis Sdiffstore 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SDIFFSTORE DESTINATION_KEY KEY1..KEYN \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n结果集中的元素数量。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SADD myset &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset &quot;bar&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset2 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset2 &quot;world&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SDIFFSTORE destset myset myset2\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; SMEMBERS destset\r\n1) &quot;foo&quot;\r\n2) &quot;bar&quot;\r\n```',0,4),(142,1,65,1,'Redis Sinter 命令','','',1502294400,'### Redis Sinter 命令 - 返回给定所有集合的交集\r\n\r\n------------\r\n\r\nRedis Sinter 命令返回给定所有给定集合的交集。 不存在的集合 key 被视为空集。 当给定集合当中有一个空集时，结果也为空集(根据集合运算定律)。\r\n\r\n#### 语法\r\nredis Sinter 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SINTER KEY KEY1..KEYN\r\n``` \r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n交集成员的列表。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SADD myset &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset &quot;bar&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset2 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset2 &quot;world&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SINTER myset myset2\r\n1) &quot;hello&quot;\r\n```',0,5),(143,1,65,1,'Redis Sinterstore 命令','','',1502294400,'### Redis Sinterstore 命令 - 返回给定所有集合的交集并存储在 destination 中\r\n\r\n------------\r\n\r\nRedis Sinterstore 命令将给定集合之间的交集存储在指定的集合中。如果指定的集合已经存在，则将其覆盖。\r\n\r\n#### 语法\r\nredis Sinterstore 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SINTERSTORE DESTINATION_KEY KEY KEY1..KEYN\r\n``` \r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n交集成员的列表。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;bar&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset2 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset2 &quot;world&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SINTERSTORE myset myset1 myset2\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SMEMBERS myset\r\n1) &quot;hello&quot;\r\n```',0,6),(144,1,65,1,'Redis Sismember 命令','','',1502294400,'### Redis Sismember 命令 - 判断 member 元素是否是集合 key 的成员\r\n\r\n------------\r\n\r\nRedis Sismember 命令判断成员元素是否是集合的成员。\r\n\r\n#### 语法\r\nredis Sismember 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SISMEMBER KEY VALUE\r\n``` \r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n如果成员元素是集合的成员，返回 1 。 如果成员元素不是集合的成员，或 key 不存在，返回 0 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SISMEMBER myset1 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SISMEMBER myset1 &quot;world&quot;\r\n(integer) 0\r\n```',0,7),(145,1,65,1,'Redis Smembers 命令','','',1502294400,'### Redis Smembers 命令 - 返回集合中的所有成员\r\n\r\n------------\r\n\r\nRedis Smembers 命令返回集合中的所有的成员。 不存在的集合 key 被视为空集合。\r\n\r\n#### 语法\r\nredis Smembers 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SMEMBERS KEY VALUE \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n集合中的所有成员。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;world&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SMEMBERS myset1\r\n1) &quot;World&quot;\r\n2) &quot;Hello&quot;\r\n```',0,8),(146,1,65,1,'Redis Smove 命令','','',1502294400,'### Redis Smove 命令 - 将 member 元素从 source 集合移动到 destination 集合\r\n\r\n------------\r\n\r\nRedis Smove 命令将指定成员 member 元素从 source 集合移动到 destination 集合。\r\n\r\nSMOVE 是原子性操作。\r\n\r\n如果 source 集合不存在或不包含指定的 member 元素，则 SMOVE 命令不执行任何操作，仅返回 0 。否则， member 元素从 source 集合中被移除，并添加到 destination 集合中去。\r\n\r\n当 destination 集合已经包含 member 元素时， SMOVE 命令只是简单地将 source 集合中的 member 元素删除。\r\n\r\n当 source 或 destination 不是集合类型时，返回一个错误。\r\n\r\n#### 语法\r\nredis Smove 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SMOVE SOURCE DESTINATION MEMBER \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n如果成员元素被成功移除，返回 1 。 如果成员元素不是 source 集合的成员，并且没有任何操作对 destination 集合执行，那么返回 0 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;world&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;bar&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset2 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SMOVE myset1 myset2 &quot;bar&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SMEMBERS myset1\r\n1) &quot;World&quot;\r\n2) &quot;Hello&quot;\r\nredis 127.0.0.1:6379&gt; SMEMBERS myset2\r\n1) &quot;foo&quot;\r\n2) &quot;bar&quot;\r\n```',0,9),(147,1,65,1,'Redis Spop 命令','','',1502294400,'### Redis Spop 命令 - 移除并返回集合中的一个随机元素\r\n\r\n------------\r\n\r\nRedis Spop 命令用于移除并返回集合中的一个随机元素。\r\n\r\n#### 语法\r\nredis Spop 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SPOP KEY \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n被移除的随机元素。 当集合不存在或是空集时，返回 nil 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;world&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;bar&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SPOP myset1\r\n&quot;bar&quot;\r\nredis 127.0.0.1:6379&gt; SMEMBERS myset1\r\n1) &quot;Hello&quot;\r\n2) &quot;world&quot;\r\n```',1,10),(148,1,65,1,'Redis Srandmember 命令','','',1502294400,'### Redis Srandmember 命令 - 返回集合中一个或多个随机数\r\n\r\n------------\r\n\r\nRedis Srandmember 命令用于返回集合中的一个随机元素。\r\n\r\n从 Redis 2.6 版本开始， Srandmember 命令接受可选的 count 参数：\r\n\r\n如果 count 为正数，且小于集合基数，那么命令返回一个包含 count 个元素的数组，数组中的元素各不相同。如果 count 大于等于集合基数，那么返回整个集合。\r\n\r\n如果 count 为负数，那么命令返回一个数组，数组中的元素可能会重复出现多次，而数组的长度为 count 的绝对值。\r\n\r\n该操作和 SPOP 相似，但 SPOP 将随机元素从集合中移除并返回，而 Srandmember 则仅仅返回随机元素，而不对集合进行任何改动。\r\n\r\n#### 语法\r\nredis Srandmember 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SRANDMEMBER KEY [count]\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n只提供集合 key 参数时，返回一个元素；如果集合为空，返回 nil 。 如果提供了 count 参数，那么返回一个数组；如果集合为空，返回空数组。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;world&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;bar&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SRANDMEMBER myset1\r\n&quot;bar&quot;\r\nredis 127.0.0.1:6379&gt; SRANDMEMBER myset1 2\r\n1) &quot;Hello&quot;\r\n2) &quot;world&quot;\r\n```',0,11),(149,1,65,1,'Redis Srem 命令','','',1502294400,'### Redis Srem 命令 - 移除集合中一个或多个成员\r\n\r\n------------\r\n\r\nRedis Srem 命令用于移除集合中的一个或多个成员元素，不存在的成员元素会被忽略。\r\n\r\n当 key 不是集合类型，返回一个错误。\r\n\r\n在 Redis 2.4 版本以前， SREM 只接受单个成员值。\r\n\r\n#### 语法\r\nredis Srem 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SREM KEY MEMBER1..MEMBERN\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n被成功移除的元素的数量，不包括被忽略的元素。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;world&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;bar&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SREM myset1 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SREM myset1 &quot;foo&quot;\r\n(integer) 0\r\nredis 127.0.0.1:6379&gt; SMEMBERS myset1\r\n1) &quot;bar&quot;\r\n2) &quot;world&quot;\r\n```',0,12),(150,1,65,1,'Redis Sunion 命令','','',1502294400,'### Redis Sunion 命令 - 返回所有给定集合的并集\r\n\r\n------------\r\n\r\nRedis Sunion 命令返回给定集合的并集。不存在的集合 key 被视为空集。\r\n\r\n#### 语法\r\nredis Sunion 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SUNION KEY KEY1..KEYN\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n并集成员的列表。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;world&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;bar&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset2 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset2 &quot;bar&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SUNION myset1 myset2\r\n1) &quot;bar&quot;\r\n2) &quot;world&quot;\r\n3) &quot;hello&quot;\r\n4) &quot;foo&quot;\r\n```',0,13),(151,1,65,1,'Redis Sunionstore 命令','','',1502294400,'### Redis Sunionstore 命令 - 所有给定集合的并集存储在 destination 集合中\r\n\r\n------------\r\n\r\nRedis Sunionstore 命令将给定集合的并集存储在指定的集合 destination 中。\r\n\r\n#### 语法\r\nredis Sunionstore 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SUNIONSTORE DESTINATION KEY KEY1..KEYN\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n结果集中的元素数量。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;world&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;bar&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset2 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset2 &quot;bar&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SUNIONSTORE myset myset1 myset2\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SMEMBERS myset\r\n1) &quot;bar&quot;\r\n2) &quot;world&quot;\r\n3) &quot;hello&quot;\r\n4) &quot;foo&quot;\r\n```',0,14),(152,1,65,1,'Redis Sscan 命令','','',1502294400,'### Redis Sscan 命令 - 迭代集合中的元素\r\n\r\n------------\r\n\r\nRedis Sscan 命令用于迭代集合键中的元素。\r\n\r\n#### 语法\r\nredis Sscan 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SSCAN KEY [MATCH pattern] [COUNT count]\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n数组列表。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;hi&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; SADD myset1 &quot;bar&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; sscan myset1 0 match h*\r\n1) &quot;0&quot;\r\n2) 1) &quot;hello&quot;\r\n   2) &quot;h1&quot;\r\n```',1,15),(153,1,66,1,'Redis Zadd 命令','','',1502294400,'### Redis Zadd 命令 - 向有序集合添加一个或多个成员，或者更新已存在成员的分数\r\n\r\n------------\r\n\r\nRedis Zadd 命令用于将一个或多个成员元素及其分数值加入到有序集当中。\r\n\r\n如果某个成员已经是有序集的成员，那么更新这个成员的分数值，并通过重新插入这个成员元素，来保证该成员在正确的位置上。\r\n\r\n分数值可以是整数值或双精度浮点数。\r\n\r\n如果有序集合 key 不存在，则创建一个空的有序集并执行 ZADD 操作。\r\n\r\n当 key 存在但不是有序集类型时，返回一个错误。\r\n\r\n注意： 在 Redis 2.4 版本以前， ZADD 每次只能添加一个元素。\r\n\r\n#### 语法\r\nredis Zadd 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZADD KEY_NAME SCORE1 VALUE1.. SCOREN VALUEN\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.2.0\r\n\r\n#### 返回值\r\n被成功添加的新成员的数量，不包括那些被更新的、已经存在的成员。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZADD myset 1 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; ZADD myset 1 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; ZADD myset 2 &quot;world&quot; 3 &quot;bar&quot;\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; ZRANGE myzset 0 -1 WITHSCORES\r\n1) &quot;hello&quot;\r\n2) &quot;1&quot;\r\n3) &quot;foo&quot;\r\n4) &quot;1&quot;\r\n5) &quot;world&quot;\r\n6) &quot;2&quot;\r\n7) &quot;bar&quot;\r\n8) &quot;3&quot;\r\n```',0,1),(154,1,66,1,'Redis Zcard 命令','','',1502294400,'### Redis Zcard 命令 - 获取有序集合的成员数\r\n\r\n------------\r\n\r\nRedis Zcard 命令用于计算集合中元素的数量。\r\n\r\n#### 语法\r\nredis Zcard 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZCARD KEY_NAME\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.2.0\r\n\r\n#### 返回值\r\n当 key 存在且是有序集类型时，返回有序集的基数。 当 key 不存在时，返回 0 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZADD myset 1 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; ZADD myset 1 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; ZADD myset 2 &quot;world&quot; 3 &quot;bar&quot;\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; ZCARD myzset\r\n(integer) 4\r\n```',0,2),(155,1,66,1,'Redis Zcount 命令','','',1502294400,'### Redis Zcount 命令 - 计算在有序集合中指定区间分数的成员数\r\n\r\n------------\r\n\r\nRedis Zcount 命令用于计算有序集合中指定分数区间的成员数量。\r\n\r\n#### 语法\r\nredis Zcount 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZCOUNT key min max\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n分数值在 min 和 max 之间的成员的数量。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZADD myzset 1 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; ZADD myzset 1 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; ZADD myzset 2 &quot;world&quot; 3 &quot;bar&quot;\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; ZCOUNT myzset 1 3\r\n(integer) 4\r\n```',0,3),(156,1,66,1,'Redis Zincrby 命令','','',1502294400,'### Redis Zincrby 命令 - 有序集合中对指定成员的分数加上增量 increment\r\n\r\n------------\r\n\r\nRedis Zincrby 命令对有序集合中指定成员的分数加上增量 increment\r\n\r\n可以通过传递一个负数值 increment ，让分数减去相应的值，比如 ZINCRBY key -5 member ，就是让 member 的 score 值减去 5 。\r\n\r\n当 key 不存在，或分数不是 key 的成员时， ZINCRBY key increment member 等同于 ZADD key increment member 。\r\n\r\n当 key 不是有序集类型时，返回一个错误。\r\n\r\n分数值可以是整数值或双精度浮点数。\r\n\r\n#### 语法\r\nredis Zincrby 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZINCRBY key increment member\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.2.0\r\n\r\n#### 返回值\r\nmember 成员的新分数值，以字符串形式表示。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZADD myzset 1 &quot;hello&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; ZADD myzset 1 &quot;foo&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; ZINCRBY myzset 2 &quot;hello&quot;\r\n(integer) 3\r\nredis 127.0.0.1:6379&gt; ZRANGE myzset 0 -1 WITHSCORES\r\n1) &quot;foo&quot;\r\n2) &quot;2&quot;\r\n3) &quot;hello&quot;\r\n4) &quot;3&quot;\r\n```',0,4),(157,1,66,1,'Redis Zinterstore 命令','','',1502294400,'### Redis Zinterstore 命令 - 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中\r\n\r\n------------\r\n\r\nRedis Zinterstore 命令计算给定的一个或多个有序集的交集，其中给定 key 的数量必须以 numkeys 参数指定，并将该交集(结果集)储存到 destination 。\r\n\r\n默认情况下，结果集中某个成员的分数值是所有给定集下该成员分数值之和。\r\n\r\n#### 语法\r\nredis Zinterstore 命令基本语法如下：\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n保存到目标结果集的的成员数量。\r\n\r\n#### 实例\r\n```shell\r\n# 有序集 mid_test\r\nredis 127.0.0.1:6379&gt; ZADD mid_test 70 &quot;Li Lei&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; ZADD mid_test 70 &quot;Han Meimei&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; ZADD mid_test 99.5 &quot;Tom&quot;\r\n(integer) 1\r\n \r\n# 另一个有序集 fin_test\r\nredis 127.0.0.1:6379&gt; ZADD fin_test 88 &quot;Li Lei&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; ZADD fin_test 75 &quot;Han Meimei&quot;\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; ZADD fin_test 99.5 &quot;Tom&quot;\r\n(integer) 1\r\n \r\n# 交集\r\nredis 127.0.0.1:6379&gt; ZINTERSTORE sum_point 2 mid_test fin_test\r\n(integer) 3\r\n \r\n# 显示有序集内所有成员及其分数值\r\nredis 127.0.0.1:6379&gt; ZRANGE sum_point 0 -1 WITHSCORES     \r\n1) &quot;Han Meimei&quot;\r\n2) &quot;145&quot;\r\n3) &quot;Li Lei&quot;\r\n4) &quot;158&quot;\r\n5) &quot;Tom&quot;\r\n6) &quot;199&quot;\r\n```',0,5),(158,1,66,1,'Redis Zlexcount 命令','','',1502294400,'### Redis Zlexcount 命令 - 在有序集合中计算指定字典区间内成员数量\r\n\r\n------------\r\n\r\nRedis Zlexcount 命令在计算有序集合中指定字典区间内成员数量。\r\n\r\n#### 语法\r\nredis Zlexcount 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZLEXCOUNT KEY MIN MAX\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.8.9\r\n\r\n#### 返回值\r\n指定区间内的成员数量。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZADD myzset 0 a 0 b 0 c 0 d 0 e\r\n(integer) 5\r\nredis 127.0.0.1:6379&gt; ZADD myzset 0 f 0 g\r\n(integer) 2\r\nredis 127.0.0.1:6379&gt; ZLEXCOUNT myzset - +\r\n(integer) 7\r\nredis 127.0.0.1:6379&gt; ZLEXCOUNT myzset [b [f\r\n(integer) 5\r\n```',0,6),(159,1,66,1,'Redis Zrange 命令','','',1502294400,'### Redis Zrange 命令 - 通过索引区间返回有序集合成指定区间内的成员\r\n\r\n------------\r\n\r\nRedis Zrange 返回有序集中，指定区间内的成员。\r\n\r\n其中成员的位置按分数值递增(从小到大)来排序。\r\n\r\n具有相同分数值的成员按字典序(lexicographical order )来排列。\r\n\r\n如果你需要成员按\r\n\r\n值递减(从大到小)来排列，请使用 ZREVRANGE 命令。\r\n\r\n下标参数 start 和 stop 都以 0 为底，也就是说，以 0 表示有序集第一个成员，以 1 表示有序集第二个成员，以此类推。\r\n\r\n你也可以使用负数下标，以 -1 表示最后一个成员， -2 表示倒数第二个成员，以此类推。\r\n\r\n#### 语法\r\nredis Zrange 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZRANGE key start stop [WITHSCORES]\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.2.0\r\n\r\n#### 返回值\r\n指定区间内，带有分数值(可选)的有序集成员的列表。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZRANGE salary 0 -1 WITHSCORES             # 显示整个有序集成员\r\n1) &quot;jack&quot;\r\n2) &quot;3500&quot;\r\n3) &quot;tom&quot;\r\n4) &quot;5000&quot;\r\n5) &quot;boss&quot;\r\n6) &quot;10086&quot;\r\n \r\nredis 127.0.0.1:6379&gt; ZRANGE salary 1 2 WITHSCORES              # 显示有序集下标区间 1 至 2 的成员\r\n1) &quot;tom&quot;\r\n2) &quot;5000&quot;\r\n3) &quot;boss&quot;\r\n4) &quot;10086&quot;\r\n \r\nredis 127.0.0.1:6379&gt; ZRANGE salary 0 200000 WITHSCORES         # 测试 end 下标超出最大下标时的情况\r\n1) &quot;jack&quot;\r\n2) &quot;3500&quot;\r\n3) &quot;tom&quot;\r\n4) &quot;5000&quot;\r\n5) &quot;boss&quot;\r\n6) &quot;10086&quot;\r\n \r\nredis &gt; ZRANGE salary 200000 3000000 WITHSCORES                  # 测试当给定区间不存在于有序集时的情况\r\n(empty list or set)\r\n```',0,7),(160,1,66,1,'Redis Zrangebylex 命令','','',1502294400,'### Redis Zrangebylex 命令 - 通过字典区间返回有序集合的成员\r\n\r\n------------\r\n\r\nRedis Zrangebylex 通过字典区间返回有序集合的成员。\r\n\r\n#### 语法\r\nredis Zrange 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZRANGEBYLEX key min max [LIMIT offset count]\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.8.9\r\n\r\n#### 返回值\r\n指定区间内的元素列表。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZADD myzset 0 a 0 b 0 c 0 d 0 e 0 f 0 g\r\n(integer) 7\r\nredis 127.0.0.1:6379&gt; ZRANGEBYLEX myzset - [c\r\n1) &quot;a&quot;\r\n2) &quot;b&quot;\r\n3) &quot;c&quot;\r\nredis 127.0.0.1:6379&gt; ZRANGEBYLEX myzset - (c\r\n1) &quot;a&quot;\r\n2) &quot;b&quot;\r\nredis 127.0.0.1:6379&gt; ZRANGEBYLEX myzset [aaa (g\r\n1) &quot;b&quot;\r\n2) &quot;c&quot;\r\n3) &quot;d&quot;\r\n4) &quot;e&quot;\r\n5) &quot;f&quot;\r\nredis&gt; \r\n```',0,8),(161,1,66,1,'Redis Zrangebyscore 命令','','',1502294400,'### Redis Zrangebyscore 命令 - 通过分数返回有序集合指定区间内的成员\r\n\r\n------------\r\n\r\nRedis Zrangebyscore 返回有序集合中指定分数区间的成员列表。有序集成员按分数值递增(从小到大)次序排列。\r\n\r\n具有相同分数值的成员按字典序来排列(该属性是有序集提供的，不需要额外的计算)。\r\n\r\n默认情况下，区间的取值使用闭区间 (小于等于或大于等于)，你也可以通过给参数前增加 ( 符号来使用可选的开区间 (小于或大于)。\r\n\r\n举个例子：\r\n\r\nZRANGEBYSCORE zset (1 5\r\n返回所有符合条件 1 &lt; score &lt;= 5 的成员，而\r\n\r\n ZRANGEBYSCORE zset (5 (10\r\n则返回所有符合条件 5 &lt; score &lt; 10 的成员。\r\n\r\n#### 语法\r\nredis Zrangebyscore 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.5\r\n\r\n#### 返回值\r\n指定区间内，带有分数值(可选)的有序集成员的列表。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZADD salary 2500 jack                        # 测试数据\r\n(integer) 0\r\nredis 127.0.0.1:6379&gt; ZADD salary 5000 tom\r\n(integer) 0\r\nredis 127.0.0.1:6379&gt; ZADD salary 12000 peter\r\n(integer) 0\r\n \r\nredis 127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf               # 显示整个有序集\r\n1) &quot;jack&quot;\r\n2) &quot;tom&quot;\r\n3) &quot;peter&quot;\r\n \r\nredis 127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf WITHSCORES    # 显示整个有序集及成员的 score 值\r\n1) &quot;jack&quot;\r\n2) &quot;2500&quot;\r\n3) &quot;tom&quot;\r\n4) &quot;5000&quot;\r\n5) &quot;peter&quot;\r\n6) &quot;12000&quot;\r\n \r\nredis 127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf 5000 WITHSCORES    # 显示工资 &lt;=5000 的所有成员\r\n1) &quot;jack&quot;\r\n2) &quot;2500&quot;\r\n3) &quot;tom&quot;\r\n4) &quot;5000&quot;\r\nredis 127.0.0.1:6379&gt; ZRANGEBYSCORE salary (5000 400000            # 显示工资大于 5000 小于等于 400000 的成员\r\n1) &quot;peter&quot;\r\n```',0,9),(162,1,66,1,'Redis Zrank 命令','','',1502294400,'### Redis Zrank 命令 - 返回有序集合中指定成员的索引\r\n\r\n------------\r\n\r\nRedis Zrank 返回有序集中指定成员的排名。其中有序集成员按分数值递增(从小到大)顺序排列。\r\n\r\n#### 语法\r\nredis Zrank 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZRANK key member\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n如果成员是有序集 key 的成员，返回 member 的排名。 如果成员不是有序集 key 的成员，返回 nil 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZRANGE salary 0 -1 WITHSCORES        # 显示所有成员及其 score 值\r\n1) &quot;peter&quot;\r\n2) &quot;3500&quot;\r\n3) &quot;tom&quot;\r\n4) &quot;4000&quot;\r\n5) &quot;jack&quot;\r\n6) &quot;5000&quot;\r\n \r\nredis 127.0.0.1:6379&gt; ZRANK salary tom                     # 显示 tom 的薪水排名，第二\r\n(integer) 1\r\n```',0,10),(163,1,66,1,'Redis Zrem 命令','','',1502294400,'### Redis Zrem 命令 - 移除有序集合中的一个或多个成员\r\n\r\n------------\r\n\r\nRedis Zrem 命令用于移除有序集中的一个或多个成员，不存在的成员将被忽略。\r\n\r\n当 key 存在但不是有序集类型时，返回一个错误。\r\n\r\n注意： 在 Redis 2.4 版本以前， ZREM 每次只能删除一个元素。\r\n\r\n#### 语法\r\nredis Zrem 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZRANK key member\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.2.0\r\n\r\n#### 返回值\r\n被成功移除的成员的数量，不包括被忽略的成员。\r\n\r\n#### 实例\r\n```shell\r\n# 测试数据\r\n \r\nredis 127.0.0.1:6379&gt; ZRANGE page_rank 0 -1 WITHSCORES\r\n1) &quot;bing.com&quot;\r\n2) &quot;8&quot;\r\n3) &quot;baidu.com&quot;\r\n4) &quot;9&quot;\r\n5) &quot;google.com&quot;\r\n6) &quot;10&quot;\r\n \r\n \r\n# 移除单个元素\r\n \r\nredis 127.0.0.1:6379&gt; ZREM page_rank google.com\r\n(integer) 1\r\n \r\nredis 127.0.0.1:6379&gt; ZRANGE page_rank 0 -1 WITHSCORES\r\n1) &quot;bing.com&quot;\r\n2) &quot;8&quot;\r\n3) &quot;baidu.com&quot;\r\n4) &quot;9&quot;\r\n \r\n \r\n# 移除多个元素\r\n \r\nredis 127.0.0.1:6379&gt; ZREM page_rank baidu.com bing.com\r\n(integer) 2\r\n \r\nredis 127.0.0.1:6379&gt; ZRANGE page_rank 0 -1 WITHSCORES\r\n(empty list or set)\r\n \r\n \r\n# 移除不存在元素\r\n \r\nredis 127.0.0.1:6379&gt; ZREM page_rank non-exists-element\r\n(integer) 0\r\n```',0,11),(164,1,66,1,'Redis Zremrangebylex 命令','','',1502294400,'### Redis Zremrangebylex 命令 - 移除有序集合中给定的字典区间的所有成员\r\n\r\n------------\r\n\r\nRedis Zremrangebylex 命令用于移除有序集合中给定的字典区间的所有成员。\r\n\r\n#### 语法\r\nredis Zremrangebylex命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZREMRANGEBYLEX key min max\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.8.9\r\n\r\n#### 返回值\r\n被成功移除的成员的数量，不包括被忽略的成员。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZADD myzset 0 aaaa 0 b 0 c 0 d 0 e\r\n(integer) 5\r\nredis 127.0.0.1:6379&gt; ZADD myzset 0 foo 0 zap 0 zip 0 ALPHA 0 alpha\r\n(integer) 5\r\nredis 127.0.0.1:6379&gt; ZRANGE myzset 0 -1\r\n1) &quot;ALPHA&quot;\r\n 2) &quot;aaaa&quot;\r\n 3) &quot;alpha&quot;\r\n 4) &quot;b&quot;\r\n 5) &quot;c&quot;\r\n 6) &quot;d&quot;\r\n 7) &quot;e&quot;\r\n 8) &quot;foo&quot;\r\n 9) &quot;zap&quot;\r\n10) &quot;zip&quot;\r\nredis 127.0.0.1:6379&gt; ZREMRANGEBYLEX myzset [alpha [omega\r\n(integer) 6\r\nredis 127.0.0.1:6379&gt; ZRANGE myzset 0 -1\r\n1) &quot;ALPHA&quot;\r\n2) &quot;aaaa&quot;\r\n3) &quot;zap&quot;\r\n4) &quot;zip&quot;\r\nredis&gt; \r\n```',0,12),(165,1,66,1,'Redis Zremrangebyrank 命令','','',1502294400,'### Redis Zremrangebyrank 命令 - 移除有序集合中给定的排名区间的所有成员\r\n\r\n------------\r\n\r\nRedis Zremrangebyrank 命令用于移除有序集中，指定排名(rank)区间内的所有成员。\r\n\r\n#### 语法\r\nredis Zremrangebyrank 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZREMRANGEBYRANK key start stop\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n被移除成员的数量。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZADD salary 2000 jack\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; ZADD salary 5000 tom\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; ZADD salary 3500 peter\r\n(integer) 1\r\n \r\nredis 127.0.0.1:6379&gt; ZREMRANGEBYRANK salary 0 1       # 移除下标 0 至 1 区间内的成员\r\n(integer) 2\r\n \r\nredis 127.0.0.1:6379&gt; ZRANGE salary 0 -1 WITHSCORES    # 有序集只剩下一个成员\r\n1) &quot;tom&quot;\r\n2) &quot;5000&quot;\r\n```',0,13),(166,1,66,1,'Redis Zremrangebyscore 命令','','',1502294400,'### Redis Zremrangebyscore 命令 - 移除有序集合中给定的分数区间的所有成员\r\n\r\n------------\r\n\r\nRedis Zremrangebyscore 命令用于移除有序集中，指定分数（score）区间内的所有成员。\r\n\r\n#### 语法\r\nredis Zremrangebyscore 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZREMRANGEBYSCORE key min max\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.2.0\r\n\r\n#### 返回值\r\n被移除成员的数量。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZRANGE salary 0 -1 WITHSCORES          # 显示有序集内所有成员及其 score 值\r\n1) &quot;tom&quot;\r\n2) &quot;2000&quot;\r\n3) &quot;peter&quot;\r\n4) &quot;3500&quot;\r\n5) &quot;jack&quot;\r\n6) &quot;5000&quot;\r\n \r\nredis 127.0.0.1:6379&gt; ZREMRANGEBYSCORE salary 1500 3500      # 移除所有薪水在 1500 到 3500 内的员工\r\n(integer) 2\r\n \r\nredis&gt; ZRANGE salary 0 -1 WITHSCORES          # 剩下的有序集成员\r\n1) &quot;jack&quot;\r\n2) &quot;5000&quot;\r\n```',0,14),(167,1,66,1,'Redis Zrevrange 命令','','',1502294400,'### Redis Zrevrange 命令 - 返回有序集中指定区间内的成员，通过索引，分数从高到底\r\n\r\n------------\r\n\r\nRedis Zrevrange 命令返回有序集中，指定区间内的成员。\r\n\r\n其中成员的位置按分数值递减(从大到小)来排列。\r\n\r\n具有相同分数值的成员按字典序的逆序(reverse lexicographical order)排列。\r\n\r\n除了成员按分数值递减的次序排列这一点外， ZREVRANGE 命令的其他方面和 ZRANGE 命令一样。\r\n\r\n#### 语法\r\nredis Zrevrange 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZREVRANGE key start stop [WITHSCORES]\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.2.0\r\n\r\n#### 返回值\r\n指定区间内，带有分数值(可选)的有序集成员的列表。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZRANGE salary 0 -1 WITHSCORES        # 递增排列\r\n1) &quot;peter&quot;\r\n2) &quot;3500&quot;\r\n3) &quot;tom&quot;\r\n4) &quot;4000&quot;\r\n5) &quot;jack&quot;\r\n6) &quot;5000&quot;\r\n \r\nredis 127.0.0.1:6379&gt; ZREVRANGE salary 0 -1 WITHSCORES     # 递减排列\r\n1) &quot;jack&quot;\r\n2) &quot;5000&quot;\r\n3) &quot;tom&quot;\r\n4) &quot;4000&quot;\r\n5) &quot;peter&quot;\r\n6) &quot;3500&quot;\r\n```',0,15),(168,1,66,1,'Redis Zrevrangebyscore 命令','','',1502294400,'### Redis Zrevrangebyscore 命令 - 返回有序集中指定分数区间内的成员，分数从高到低排序\r\n\r\n------------\r\n\r\nRedis Zrevrangebyscore 返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。\r\n\r\n具有相同分数值的成员按字典序的逆序(reverse lexicographical order )排列。\r\n\r\n除了成员按分数值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样。\r\n\r\n#### 语法\r\nredis Zrevrangebyscore 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.2.0\r\n\r\n#### 返回值\r\n指定区间内，带有分数值(可选)的有序集成员的列表。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZADD salary 10086 jack\r\n(integer) 1\r\nredis &gt; ZADD salary 5000 tom\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; ZADD salary 7500 peter\r\n(integer) 1\r\nredis 127.0.0.1:6379&gt; ZADD salary 3500 joe\r\n(integer) 1\r\n \r\nredis 127.0.0.1:6379&gt; ZREVRANGEBYSCORE salary +inf -inf   # 逆序排列所有成员\r\n1) &quot;jack&quot;\r\n2) &quot;peter&quot;\r\n3) &quot;tom&quot;\r\n4) &quot;joe&quot;\r\n \r\nredis 127.0.0.1:6379&gt; ZREVRANGEBYSCORE salary 10000 2000  # 逆序排列薪水介于 10000 和 2000 之间的成员\r\n1) &quot;peter&quot;\r\n2) &quot;tom&quot;\r\n3) &quot;joe&quot;\r\n```',0,16),(169,1,66,1,'Redis Zrevrank 命令','','',1502294400,'### Redis Zrevrank 命令 - 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序\r\n\r\n------------\r\n\r\nRedis Zrevrank 命令返回有序集中成员的排名。其中有序集成员按分数值递减(从大到小)排序。\r\n\r\n排名以 0 为底，也就是说， 分数值最大的成员排名为 0 。\r\n\r\n使用 ZRANK 命令可以获得成员按分数值递增(从小到大)排列的排名。\r\n\r\n#### 语法\r\nredis Zrevrank 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZREVRANK key member\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.2.0\r\n\r\n返回值\r\n如果成员是有序集 key 的成员，返回成员的排名。 如果成员不是有序集 key 的成员，返回 nil 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZRANGE salary 0 -1 WITHSCORES     # 测试数据\r\n1) &quot;jack&quot;\r\n2) &quot;2000&quot;\r\n3) &quot;peter&quot;\r\n4) &quot;3500&quot;\r\n5) &quot;tom&quot;\r\n6) &quot;5000&quot;\r\n \r\nredis 127.0.0.1:6379&gt; ZREVRANK salary peter     # peter 的工资排第二\r\n(integer) 1\r\n \r\nredis 127.0.0.1:6379&gt; ZREVRANK salary tom       # tom 的工资最高\r\n(integer) 0\r\n```',0,17),(170,1,66,1,'Redis Zscore 命令','','',1502294400,'### Redis Zscore 命令 - 返回有序集中，成员的分数值\r\n\r\n------------\r\n\r\nRedis Zscore 命令返回有序集中，成员的分数值。 如果成员元素不是有序集 key 的成员，或 key 不存在，返回 nil 。\r\n\r\n#### 语法\r\nredis Zscore 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZSCORE key member\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.2.0\r\n\r\n#### 返回值\r\n成员的分数值，以字符串形式表示。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZRANGE salary 0 -1 WITHSCORES    # 测试数据\r\n1) &quot;tom&quot;\r\n2) &quot;2000&quot;\r\n3) &quot;peter&quot;\r\n4) &quot;3500&quot;\r\n5) &quot;jack&quot;\r\n6) &quot;5000&quot;\r\n \r\nredis 127.0.0.1:6379&gt; ZSCORE salary peter              # 注意返回值是字符串\r\n&quot;3500&quot;\r\n```',0,18),(171,1,66,1,'Redis Zunionstore 命令','','',1502294400,'### Redis Zunionstore 命令 - 计算给定的一个或多个有序集的并集，并存储在新的 key 中\r\n\r\n------------\r\n\r\nRedis Zunionstore 命令计算给定的一个或多个有序集的并集，其中给定 key 的数量必须以 numkeys 参数指定，并将该并集(结果集)储存到 destination 。\r\n\r\n默认情况下，结果集中某个成员的分数值是所有给定集下该成员分数值之和 。\r\n\r\n#### 语法\r\nredis Zunionstore 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n保存到 destination 的结果集的成员数量。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; ZRANGE programmer 0 -1 WITHSCORES\r\n1) &quot;peter&quot;\r\n2) &quot;2000&quot;\r\n3) &quot;jack&quot;\r\n4) &quot;3500&quot;\r\n5) &quot;tom&quot;\r\n6) &quot;5000&quot;\r\n \r\nredis 127.0.0.1:6379&gt; ZRANGE manager 0 -1 WITHSCORES\r\n1) &quot;herry&quot;\r\n2) &quot;2000&quot;\r\n3) &quot;mary&quot;\r\n4) &quot;3500&quot;\r\n5) &quot;bob&quot;\r\n6) &quot;4000&quot;\r\n \r\nredis 127.0.0.1:6379&gt; ZUNIONSTORE salary 2 programmer manager WEIGHTS 1 3   # 公司决定加薪。。。除了程序员。。。\r\n(integer) 6\r\n \r\nredis 127.0.0.1:6379&gt; ZRANGE salary 0 -1 WITHSCORES\r\n1) &quot;peter&quot;\r\n2) &quot;2000&quot;\r\n3) &quot;jack&quot;\r\n4) &quot;3500&quot;\r\n5) &quot;tom&quot;\r\n6) &quot;5000&quot;\r\n7) &quot;herry&quot;\r\n8) &quot;6000&quot;\r\n9) &quot;mary&quot;\r\n10) &quot;10500&quot;\r\n11) &quot;bob&quot;\r\n12) &quot;12000&quot;\r\n```',0,19),(172,1,66,1,'Redis Zscan 命令','','',1502294400,'### Redis Zscan 命令 - 迭代有序集合中的元素（包括元素成员和元素分值）\r\n\r\n------------\r\n\r\nRedis Zscan 命令用于迭代有序集合中的元素（包括元素成员和元素分值）\r\n\r\n#### 语法\r\nredis Zscan 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; redis 127.0.0.1:6379&gt; ZSCAN key cursor [MATCH pattern] [COUNT count]\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.8.0\r\n\r\n#### 返回值\r\n返回的每个元素都是一个有序集合元素，一个有序集合元素由一个成员（member）和一个分值（score）组成。',0,20),(173,1,72,1,'Redis Bgrewriteaof 命令','','',1502294400,'### Redis Bgrewriteaof 命令 - 异步执行一个 AOF（AppendOnly File） 文件重写操作\r\n\r\n------------\r\n\r\nRedis Bgrewriteaof 命令用于异步执行一个 AOF（AppendOnly File） 文件重写操作。重写会创建一个当前 AOF 文件的体积优化版本。\r\n\r\n即使 Bgrewriteaof 执行失败，也不会有任何数据丢失，因为旧的 AOF 文件在 Bgrewriteaof 成功之前不会被修改。\r\n\r\n注意：从 Redis 2.4 开始， AOF 重写由 Redis 自行触发， BGREWRITEAOF 仅仅用于手动触发重写操作。\r\n\r\n#### 语法\r\nredis Bgrewriteaof 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; BGREWRITEAOF \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n反馈信息。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt;\r\nBackground append only file rewriting started\r\n```',0,1),(174,1,72,1,'Redis Bgsave 命令','','',1502294400,'### Redis Bgsave 命令 - 在后台异步保存当前数据库的数据到磁盘\r\n\r\n------------\r\n\r\nRedis Bgsave 命令用于在后台异步保存当前数据库的数据到磁盘。\r\n\r\nBGSAVE 命令执行之后立即返回 OK ，然后 Redis fork 出一个新子进程，原来的 Redis 进程(父进程)继续处理客户端请求，而子进程则负责将数据保存到磁盘，然后退出。\r\n\r\n#### 语法\r\nredis Bgsave 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; BGSAVE\r\n```\r\n####可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n反馈信息。\r\n\r\n#### 实例\r\n```shell\r\nredis&gt; BGSAVE\r\nBackground saving started\r\n```',0,2),(175,1,72,1,'Redis Client Kill 命令','','',1502294400,'### Redis Client Kill 命令 - 关闭客户端连接\r\n\r\n------------\r\n\r\nRedis Client Kill 命令用于关闭客户端连接。\r\n\r\n#### 语法\r\nredis Client Kill 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; CLIENT KILL ip:port\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.4.0\r\n\r\n#### 返回值\r\n成功关闭时，返回 OK 。\r\n\r\n#### 实例\r\n```shell\r\n# 列出所有已连接客户端\r\n \r\nredis 127.0.0.1:6379&gt; CLIENT LIST\r\naddr=127.0.0.1:43501 fd=5 age=10 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=32768 obl=0 oll=0 omem=0 events=r cmd=client\r\n \r\n# 杀死当前客户端的连接\r\n \r\nredis 127.0.0.1:6379&gt; CLIENT KILL 127.0.0.1:43501\r\nOK\r\n \r\n# 之前的连接已经被关闭，CLI 客户端又重新建立了连接\r\n# 之前的端口是 43501 ，现在是 43504\r\n \r\nredis 127.0.0.1:6379&gt; CLIENT LIST\r\naddr=127.0.0.1:43504 fd=5 age=0 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=32768 obl=0 oll=0 omem=0 events=r cmd=client\r\n```',0,3),(176,1,72,1,'Redis Client List 命令','','',1502294400,'### Redis Client List 命令 - 获取连接到服务器的客户端连接列表\r\n\r\n------------\r\n\r\nRedis Client List 命令用于返回所有连接到服务器的客户端信息和统计数据。\r\n\r\n#### 语法\r\nredis Client List 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; CLIENT LIST\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.4.0\r\n\r\n#### 返回值\r\n命令返回多行字符串，这些字符串按以下形式被格式化：\r\n\r\n每个已连接客户端对应一行（以 LF 分割）\r\n每行字符串由一系列 属性=值 形式的域组成，每个域之间以空格分开\r\n以下是域的含义：\r\n\r\n`addr ：` 客户端的地址和端口\r\n`fd ： `套接字所使用的文件描述符\r\n`age ：` 以秒计算的已连接时长\r\n`idle ：` 以秒计算的空闲时长\r\n`flags ：` 客户端 flag\r\n`db ： `该客户端正在使用的数据库 ID\r\n`sub ： `已订阅频道的数量\r\n`psub ： `已订阅模式的数量\r\n`multi ：` 在事务中被执行的命令数量\r\n`qbuf ：` 查询缓冲区的长度（字节为单位， 0 表示没有分配查询缓冲区）\r\n`qbuf-free ： `查询缓冲区剩余空间的长度（字节为单位， 0 表示没有剩余空间）\r\n`obl ：` 输出缓冲区的长度（字节为单位， 0 表示没有分配输出缓冲区）\r\n`oll ：` 输出列表包含的对象数量（当输出缓冲区没有剩余空间时，命令回复会以字符串对象的形式被入队到这个队列里）\r\n`omem ：` 输出缓冲区和输出列表占用的内存总量\r\n`events ： `文件描述符事件\r\n`cmd ：` 最近一次执行的命令\r\n客户端 flag 可以由以下部分组成：\r\n\r\n`O ： `客户端是 MONITOR 模式下的附属节点（slave）\r\n`S ：` 客户端是一般模式下（normal）的附属节点\r\n`M ：` 客户端是主节点（master）\r\n`x ：` 客户端正在执行事务\r\n`b ：` 客户端正在等待阻塞事件\r\n`i ：` 客户端正在等待 VM I/O 操作（已废弃）\r\n`d ：` 一个受监视（watched）的键已被修改， EXEC 命令将失败\r\n`c :` 在将回复完整地写出之后，关闭链接\r\n`u :` 客户端未被阻塞（unblocked）\r\n`A :` 尽可能快地关闭连接\r\n`N :` 未设置任何 flag\r\n文件描述符事件可以是：\r\n\r\n`r :` 客户端套接字（在事件 loop 中）是可读的（readable）\r\n`w :` 客户端套接字（在事件 loop 中）是可写的（writeable）\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; CLIENT LIST\r\naddr=127.0.0.1:43143 fd=6 age=183 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=32768 obl=0 oll=0 omem=0 events=r cmd=client\r\naddr=127.0.0.1:43163 fd=5 age=35 idle=15 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=ping\r\naddr=127.0.0.1:43167 fd=7 age=24 idle=6 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=get\r\n```',0,4),(177,1,72,1,'Redis Client Getname 命令','','',1502294400,'### Redis Client Getname 命令 - 获取连接的名称\r\n\r\n------------\r\n\r\nRedis Client Getname 命令用于返回 CLIENT SETNAME 命令为连接设置的名字。 因为新创建的连接默认是没有名字的， 对于没有名字的连接， CLIENT GETNAME 返回空白回复。\r\n\r\n#### 语法\r\nredis Client Getname 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; CLIENT GETNAME\r\n```\r\n#### 可用版本\r\n\r\n\\&gt;= 2.6.9\r\n\r\n#### 返回值\r\n如果连接没有设置名字，那么返回空白回复； 如果有设置名字，那么返回名字。\r\n\r\n#### 实例\r\n```shell\r\n# 新连接默认没有名字\r\n \r\nredis 127.0.0.1:6379&gt; CLIENT GETNAME\r\n(nil)\r\n \r\n# 设置名字\r\n \r\nredis 127.0.0.1:6379&gt; CLIENT SETNAME hello-world-connection\r\nOK\r\n \r\n# 返回名字\r\n \r\nredis 127.0.0.1:6379&gt; CLIENT GETNAME\r\n&quot;hello-world-connection&quot;\r\n```',0,5),(178,1,72,1,'Redis Client Pause 命令','','',1502294400,'### Redis Client Pause 命令 - 在指定时间内终止运行来自客户端的命令\r\n\r\n------------\r\n\r\nRedis Client Pause 命令用于阻塞客户端命令一段时间（以毫秒计）。\r\n\r\n#### 语法\r\nredis Client Pause 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; CLIENT PAUSE timeout \r\n```\r\n可用版本\r\n\\&gt;= 2.9.50\r\n\r\n#### 返回值\r\n返回 OK。如果 timeout 参数是非法的返回错误。',0,6),(179,1,72,1,'Redis Client Setname 命令','','',1502294400,'### Redis Client Setname 命令 - 设置当前连接的名称\r\n\r\n------------\r\n\r\nRedis Client Setname 命令用于指定当前连接的名称。\r\n\r\n这个名字会显示在 CLIENT LIST 命令的结果中， 用于识别当前正在与服务器进行连接的客户端。\r\n\r\n#### 语法\r\nredis Client Setname 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; CLIENT SETNAME connection-name\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.6.9\r\n\r\n#### 返回值\r\n设置成功时返回 OK 。\r\n\r\n#### 实例\r\n```shell\r\n# 新连接默认没有名字\r\n \r\nredis 127.0.0.1:6379&gt; CLIENT GETNAME\r\n(nil)\r\n \r\n# 设置名字\r\n \r\nredis 127.0.0.1:6379&gt; CLIENT SETNAME hello-world-connection\r\nOK\r\n \r\n# 返回名字\r\n \r\nredis 127.0.0.1:6379&gt; CLIENT GETNAME\r\n&quot;hello-world-connection&quot;\r\n \r\n# 在客户端列表中查看\r\n \r\nredis 127.0.0.1:6379&gt; CLIENT LIST\r\naddr=127.0.0.1:36851\r\nfd=5\r\nname=hello-world-connection     # &lt;- 名字\r\nage=51\r\n...\r\n# 清除名字\r\nredis 127.0.0.1:6379&gt; CLIENT SETNAME        # 只用空格是不行的！\r\n(error) ERR Syntax error, try CLIENT (LIST | KILL ip:port)\r\n \r\nredis 127.0.0.1:6379&gt; CLIENT SETNAME &quot;&quot;     # 必须双引号显示包围\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; CLIENT GETNAME        # 清除完毕\r\n(nil)\r\n```',0,7),(180,1,72,1,'Redis Cluster Slots 命令','','',1502294400,'### Redis Cluster Slots 命令 - 获取集群节点的映射数组\r\n\r\n------------\r\n\r\nRedis Client Slots 命令用于当前的集群状态，以数组形式展示。\r\n\r\n#### 语法\r\nredis Client Slots 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; CLUSTER SLOTS \r\n```\r\n#### 可用版本\r\n\\&gt;= 3.0.0\r\n\r\n#### 返回值\r\nIP/端口嵌套的列表数组。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; cluster slots\r\n1) 1) (integer) 0\r\n   2) (integer) 4095\r\n   3) 1) &quot;127.0.0.1&quot;\r\n      2) (integer) 7000\r\n   4) 1) &quot;127.0.0.1&quot;\r\n      2) (integer) 7004\r\n2) 1) (integer) 12288\r\n   2) (integer) 16383\r\n   3) 1) &quot;127.0.0.1&quot;\r\n      2) (integer) 7003\r\n   4) 1) &quot;127.0.0.1&quot;\r\n      2) (integer) 7007\r\n3) 1) (integer) 4096\r\n   2) (integer) 8191\r\n   3) 1) &quot;127.0.0.1&quot;\r\n      2) (integer) 7001\r\n   4) 1) &quot;127.0.0.1&quot;\r\n      2) (integer) 7005\r\n4) 1) (integer) 8192\r\n   2) (integer) 12287\r\n   3) 1) &quot;127.0.0.1&quot;\r\n      2) (integer) 7002\r\n   4) 1) &quot;127.0.0.1&quot;\r\n      2) (integer) 7006\r\n```',0,8),(181,1,72,1,'Redis Command 命令','','',1502294400,'### Redis Command 命令 - 获取 Redis 命令详情数组\r\n\r\n------------\r\n\r\nRedis Command 命令用于返回所有的Redis命令的详细信息，以数组形式展示。\r\n\r\n#### 语法\r\nredis Command 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; COMMAND  \r\n```\r\n#### 可用版本\r\n\\&gt;= 2.8.13\r\n\r\n#### 返回值\r\n嵌套的Redis命令的详细信息列表。列表顺序是随机的。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; COMMAND\r\n1) 1) &quot;pfcount&quot;\r\n     2) (integer) -2\r\n     3) 1) write\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n  2) 1) &quot;command&quot;\r\n     2) (integer) 0\r\n     3) 1) readonly\r\n        2) loading\r\n        3) stale\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n  3) 1) &quot;zscan&quot;\r\n     2) (integer) -3\r\n     3) 1) readonly\r\n        2) random\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n  4) 1) &quot;echo&quot;\r\n     2) (integer) 2\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n  5) 1) &quot;select&quot;\r\n     2) (integer) 2\r\n     3) 1) readonly\r\n        2) loading\r\n        3) fast\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n  6) 1) &quot;zcount&quot;\r\n     2) (integer) 4\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n  7) 1) &quot;substr&quot;\r\n     2) (integer) 4\r\n     3) 1) readonly\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n  8) 1) &quot;pttl&quot;\r\n     2) (integer) 2\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n  9) 1) &quot;hincrbyfloat&quot;\r\n     2) (integer) 4\r\n     3) 1) write\r\n        2) denyoom\r\n        3) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 10) 1) &quot;hlen&quot;\r\n     2) (integer) 2\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 11) 1) &quot;incrby&quot;\r\n     2) (integer) 3\r\n     3) 1) write\r\n        2) denyoom\r\n        3) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 12) 1) &quot;setex&quot;\r\n     2) (integer) 4\r\n     3) 1) write\r\n        2) denyoom\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 13) 1) &quot;persist&quot;\r\n     2) (integer) 2\r\n     3) 1) write\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 14) 1) &quot;setbit&quot;\r\n     2) (integer) 4\r\n     3) 1) write\r\n        2) denyoom\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 15) 1) &quot;info&quot;\r\n     2) (integer) -1\r\n     3) 1) readonly\r\n        2) loading\r\n        3) stale\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 16) 1) &quot;scard&quot;\r\n     2) (integer) 2\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 17) 1) &quot;srandmember&quot;\r\n     2) (integer) -2\r\n     3) 1) readonly\r\n        2) random\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 18) 1) &quot;lrem&quot;\r\n     2) (integer) 4\r\n     3) 1) write\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 19) 1) &quot;append&quot;\r\n     2) (integer) 3\r\n     3) 1) write\r\n        2) denyoom\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 20) 1) &quot;hgetall&quot;\r\n     2) (integer) 2\r\n     3) 1) readonly\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 21) 1) &quot;zincrby&quot;\r\n     2) (integer) 4\r\n     3) 1) write\r\n        2) denyoom\r\n        3) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 22) 1) &quot;rpop&quot;\r\n     2) (integer) 2\r\n     3) 1) write\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 23) 1) &quot;cluster&quot;\r\n     2) (integer) -2\r\n     3) 1) readonly\r\n        2) admin\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 24) 1) &quot;ltrim&quot;\r\n     2) (integer) 4\r\n     3) 1) write\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 25) 1) &quot;flushdb&quot;\r\n     2) (integer) 1\r\n     3) 1) write\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 26) 1) &quot;rpoplpush&quot;\r\n     2) (integer) 3\r\n     3) 1) write\r\n        2) denyoom\r\n     4) (integer) 1\r\n     5) (integer) 2\r\n     6) (integer) 1\r\n 27) 1) &quot;expire&quot;\r\n     2) (integer) 3\r\n     3) 1) write\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 28) 1) &quot;psync&quot;\r\n     2) (integer) 3\r\n     3) 1) readonly\r\n        2) admin\r\n        3) noscript\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 29) 1) &quot;zremrangebylex&quot;\r\n     2) (integer) 4\r\n     3) 1) write\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 30) 1) &quot;pubsub&quot;\r\n     2) (integer) -2\r\n     3) 1) readonly\r\n        2) pubsub\r\n        3) random\r\n        4) loading\r\n        5) stale\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 31) 1) &quot;setnx&quot;\r\n     2) (integer) 3\r\n     3) 1) write\r\n        2) denyoom\r\n        3) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 32) 1) &quot;pexpireat&quot;\r\n     2) (integer) 3\r\n     3) 1) write\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 33) 1) &quot;psubscribe&quot;\r\n     2) (integer) -2\r\n     3) 1) readonly\r\n        2) pubsub\r\n        3) noscript\r\n        4) loading\r\n        5) stale\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 34) 1) &quot;zrevrange&quot;\r\n     2) (integer) -4\r\n     3) 1) readonly\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 35) 1) &quot;hmget&quot;\r\n     2) (integer) -3\r\n     3) 1) readonly\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 36) 1) &quot;object&quot;\r\n     2) (integer) -2\r\n     3) 1) readonly\r\n     4) (integer) 2\r\n     5) (integer) 2\r\n     6) (integer) 2\r\n 37) 1) &quot;watch&quot;\r\n     2) (integer) -2\r\n     3) 1) readonly\r\n        2) noscript\r\n        3) fast\r\n     4) (integer) 1\r\n     5) (integer) -1\r\n     6) (integer) 1\r\n 38) 1) &quot;setrange&quot;\r\n     2) (integer) 4\r\n     3) 1) write\r\n        2) denyoom\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 39) 1) &quot;sdiffstore&quot;\r\n     2) (integer) -3\r\n     3) 1) write\r\n        2) denyoom\r\n     4) (integer) 1\r\n     5) (integer) -1\r\n     6) (integer) 1\r\n 40) 1) &quot;flushall&quot;\r\n     2) (integer) 1\r\n     3) 1) write\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 41) 1) &quot;sadd&quot;\r\n     2) (integer) -3\r\n     3) 1) write\r\n        2) denyoom\r\n        3) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 42) 1) &quot;renamenx&quot;\r\n     2) (integer) 3\r\n     3) 1) write\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 2\r\n     6) (integer) 1\r\n 43) 1) &quot;zrangebyscore&quot;\r\n     2) (integer) -4\r\n     3) 1) readonly\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 44) 1) &quot;bitop&quot;\r\n     2) (integer) -4\r\n     3) 1) write\r\n        2) denyoom\r\n     4) (integer) 2\r\n     5) (integer) -1\r\n     6) (integer) 1\r\n 45) 1) &quot;get&quot;\r\n     2) (integer) 2\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 46) 1) &quot;hmset&quot;\r\n     2) (integer) -4\r\n     3) 1) write\r\n        2) denyoom\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 47) 1) &quot;type&quot;\r\n     2) (integer) 2\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 48) 1) &quot;evalsha&quot;\r\n     2) (integer) -3\r\n     3) 1) noscript\r\n        2) movablekeys\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 49) 1) &quot;zrevrangebyscore&quot;\r\n     2) (integer) -4\r\n     3) 1) readonly\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 50) 1) &quot;set&quot;\r\n     2) (integer) -3\r\n     3) 1) write\r\n        2) denyoom\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 51) 1) &quot;getset&quot;\r\n     2) (integer) 3\r\n     3) 1) write\r\n        2) denyoom\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 52) 1) &quot;punsubscribe&quot;\r\n     2) (integer) -1\r\n     3) 1) readonly\r\n        2) pubsub\r\n        3) noscript\r\n        4) loading\r\n        5) stale\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 53) 1) &quot;publish&quot;\r\n     2) (integer) 3\r\n     3) 1) readonly\r\n        2) pubsub\r\n        3) loading\r\n        4) stale\r\n        5) fast\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 54) 1) &quot;lset&quot;\r\n     2) (integer) 4\r\n     3) 1) write\r\n        2) denyoom\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 55) 1) &quot;rename&quot;\r\n     2) (integer) 3\r\n     3) 1) write\r\n     4) (integer) 1\r\n     5) (integer) 2\r\n     6) (integer) 1\r\n 56) 1) &quot;bgsave&quot;\r\n     2) (integer) 1\r\n     3) 1) readonly\r\n        2) admin\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 57) 1) &quot;decrby&quot;\r\n     2) (integer) 3\r\n     3) 1) write\r\n        2) denyoom\r\n        3) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 58) 1) &quot;sunion&quot;\r\n     2) (integer) -2\r\n     3) 1) readonly\r\n        2) sort_for_script\r\n     4) (integer) 1\r\n     5) (integer) -1\r\n     6) (integer) 1\r\n 59) 1) &quot;blpop&quot;\r\n     2) (integer) -3\r\n     3) 1) write\r\n        2) noscript\r\n     4) (integer) 1\r\n     5) (integer) -2\r\n     6) (integer) 1\r\n 60) 1) &quot;zrem&quot;\r\n     2) (integer) -3\r\n     3) 1) write\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 61) 1) &quot;readonly&quot;\r\n     2) (integer) 1\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 62) 1) &quot;exists&quot;\r\n     2) (integer) 2\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 63) 1) &quot;linsert&quot;\r\n     2) (integer) 5\r\n     3) 1) write\r\n        2) denyoom\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 64) 1) &quot;lindex&quot;\r\n     2) (integer) 3\r\n     3) 1) readonly\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 65) 1) &quot;scan&quot;\r\n     2) (integer) -2\r\n     3) 1) readonly\r\n        2) random\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 66) 1) &quot;migrate&quot;\r\n     2) (integer) -6\r\n     3) 1) write\r\n        2) admin\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 67) 1) &quot;ping&quot;\r\n     2) (integer) 1\r\n     3) 1) readonly\r\n        2) stale\r\n        3) fast\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 68) 1) &quot;zunionstore&quot;\r\n     2) (integer) -4\r\n     3) 1) write\r\n        2) denyoom\r\n        3) movablekeys\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 69) 1) &quot;latency&quot;\r\n     2) (integer) -2\r\n     3) 1) readonly\r\n        2) admin\r\n        3) noscript\r\n        4) loading\r\n        5) stale\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 70) 1) &quot;role&quot;\r\n     2) (integer) 1\r\n     3) 1) admin\r\n        2) noscript\r\n        3) loading\r\n        4) stale\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 71) 1) &quot;ttl&quot;\r\n     2) (integer) 2\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 72) 1) &quot;del&quot;\r\n     2) (integer) -2\r\n     3) 1) write\r\n     4) (integer) 1\r\n     5) (integer) -1\r\n     6) (integer) 1\r\n 73) 1) &quot;wait&quot;\r\n     2) (integer) 3\r\n     3) 1) readonly\r\n        2) noscript\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 74) 1) &quot;zscore&quot;\r\n     2) (integer) 3\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 75) 1) &quot;zrevrangebylex&quot;\r\n     2) (integer) -4\r\n     3) 1) readonly\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 76) 1) &quot;sscan&quot;\r\n     2) (integer) -3\r\n     3) 1) readonly\r\n        2) random\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 77) 1) &quot;incrbyfloat&quot;\r\n     2) (integer) 3\r\n     3) 1) write\r\n        2) denyoom\r\n        3) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 78) 1) &quot;decr&quot;\r\n     2) (integer) 2\r\n     3) 1) write\r\n        2) denyoom\r\n        3) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 79) 1) &quot;getbit&quot;\r\n     2) (integer) 3\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 80) 1) &quot;spop&quot;\r\n     2) (integer) 2\r\n     3) 1) write\r\n        2) noscript\r\n        3) random\r\n        4) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 81) 1) &quot;hkeys&quot;\r\n     2) (integer) 2\r\n     3) 1) readonly\r\n        2) sort_for_script\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 82) 1) &quot;pfmerge&quot;\r\n     2) (integer) -2\r\n     3) 1) write\r\n        2) denyoom\r\n     4) (integer) 1\r\n     5) (integer) -1\r\n     6) (integer) 1\r\n 83) 1) &quot;zrange&quot;\r\n     2) (integer) -4\r\n     3) 1) readonly\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 84) 1) &quot;monitor&quot;\r\n     2) (integer) 1\r\n     3) 1) readonly\r\n        2) admin\r\n        3) noscript\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 85) 1) &quot;zinterstore&quot;\r\n     2) (integer) -4\r\n     3) 1) write\r\n        2) denyoom\r\n        3) movablekeys\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 86) 1) &quot;rpushx&quot;\r\n     2) (integer) 3\r\n     3) 1) write\r\n        2) denyoom\r\n        3) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 87) 1) &quot;llen&quot;\r\n     2) (integer) 2\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 88) 1) &quot;hincrby&quot;\r\n     2) (integer) 4\r\n     3) 1) write\r\n        2) denyoom\r\n        3) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 89) 1) &quot;save&quot;\r\n     2) (integer) 1\r\n     3) 1) readonly\r\n        2) admin\r\n        3) noscript\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 90) 1) &quot;zremrangebyrank&quot;\r\n     2) (integer) 4\r\n     3) 1) write\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 91) 1) &quot;auth&quot;\r\n     2) (integer) 2\r\n     3) 1) readonly\r\n        2) noscript\r\n        3) loading\r\n        4) stale\r\n        5) fast\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 92) 1) &quot;zcard&quot;\r\n     2) (integer) 2\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 93) 1) &quot;psetex&quot;\r\n     2) (integer) 4\r\n     3) 1) write\r\n        2) denyoom\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 94) 1) &quot;shutdown&quot;\r\n     2) (integer) -1\r\n     3) 1) readonly\r\n        2) admin\r\n        3) loading\r\n        4) stale\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 95) 1) &quot;sync&quot;\r\n     2) (integer) 1\r\n     3) 1) readonly\r\n        2) admin\r\n        3) noscript\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 96) 1) &quot;dbsize&quot;\r\n     2) (integer) 1\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 97) 1) &quot;expireat&quot;\r\n     2) (integer) 3\r\n     3) 1) write\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n 98) 1) &quot;subscribe&quot;\r\n     2) (integer) -2\r\n     3) 1) readonly\r\n        2) pubsub\r\n        3) noscript\r\n        4) loading\r\n        5) stale\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n 99) 1) &quot;brpop&quot;\r\n     2) (integer) -3\r\n     3) 1) write\r\n        2) noscript\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n100) 1) &quot;sort&quot;\r\n     2) (integer) -2\r\n     3) 1) write\r\n        2) denyoom\r\n        3) movablekeys\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n101) 1) &quot;sunionstore&quot;\r\n     2) (integer) -3\r\n     3) 1) write\r\n        2) denyoom\r\n     4) (integer) 1\r\n     5) (integer) -1\r\n     6) (integer) 1\r\n102) 1) &quot;zrangebylex&quot;\r\n     2) (integer) -4\r\n     3) 1) readonly\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n103) 1) &quot;zlexcount&quot;\r\n     2) (integer) 4\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n104) 1) &quot;lpush&quot;\r\n     2) (integer) -3\r\n     3) 1) write\r\n        2) denyoom\r\n        3) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n105) 1) &quot;incr&quot;\r\n     2) (integer) 2\r\n     3) 1) write\r\n        2) denyoom\r\n        3) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n106) 1) &quot;mget&quot;\r\n     2) (integer) -2\r\n     3) 1) readonly\r\n     4) (integer) 1\r\n     5) (integer) -1\r\n     6) (integer) 1\r\n107) 1) &quot;getrange&quot;\r\n     2) (integer) 4\r\n     3) 1) readonly\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n108) 1) &quot;slaveof&quot;\r\n     2) (integer) 3\r\n     3) 1) admin\r\n        2) noscript\r\n        3) stale\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n109) 1) &quot;bitpos&quot;\r\n     2) (integer) -3\r\n     3) 1) readonly\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n110) 1) &quot;rpush&quot;\r\n     2) (integer) -3\r\n     3) 1) write\r\n        2) denyoom\r\n        3) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n111) 1) &quot;config&quot;\r\n     2) (integer) -2\r\n     3) 1) readonly\r\n        2) admin\r\n        3) stale\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n112) 1) &quot;srem&quot;\r\n     2) (integer) -3\r\n     3) 1) write\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n113) 1) &quot;mset&quot;\r\n     2) (integer) -3\r\n     3) 1) write\r\n        2) denyoom\r\n     4) (integer) 1\r\n     5) (integer) -1\r\n     6) (integer) 2\r\n114) 1) &quot;lrange&quot;\r\n     2) (integer) 4\r\n     3) 1) readonly\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n115) 1) &quot;replconf&quot;\r\n     2) (integer) -1\r\n     3) 1) readonly\r\n        2) admin\r\n        3) noscript\r\n        4) loading\r\n        5) stale\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n116) 1) &quot;hsetnx&quot;\r\n     2) (integer) 4\r\n     3) 1) write\r\n        2) denyoom\r\n        3) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n117) 1) &quot;discard&quot;\r\n     2) (integer) 1\r\n     3) 1) readonly\r\n        2) noscript\r\n        3) fast\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n118) 1) &quot;pexpire&quot;\r\n     2) (integer) 3\r\n     3) 1) write\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n119) 1) &quot;pfdebug&quot;\r\n     2) (integer) -3\r\n     3) 1) write\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n120) 1) &quot;asking&quot;\r\n     2) (integer) 1\r\n     3) 1) readonly\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n121) 1) &quot;client&quot;\r\n     2) (integer) -2\r\n     3) 1) readonly\r\n        2) admin\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n122) 1) &quot;pfselftest&quot;\r\n     2) (integer) 1\r\n     3) 1) readonly\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n123) 1) &quot;bgrewriteaof&quot;\r\n     2) (integer) 1\r\n     3) 1) readonly\r\n        2) admin\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n124) 1) &quot;zremrangebyscore&quot;\r\n     2) (integer) 4\r\n     3) 1) write\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n125) 1) &quot;sinterstore&quot;\r\n     2) (integer) -3\r\n     3) 1) write\r\n        2) denyoom\r\n     4) (integer) 1\r\n     5) (integer) -1\r\n     6) (integer) 1\r\n126) 1) &quot;lpushx&quot;\r\n     2) (integer) 3\r\n     3) 1) write\r\n        2) denyoom\r\n        3) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n127) 1) &quot;restore&quot;\r\n     2) (integer) -4\r\n     3) 1) write\r\n        2) denyoom\r\n        3) admin\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n128) 1) &quot;unsubscribe&quot;\r\n     2) (integer) -1\r\n     3) 1) readonly\r\n        2) pubsub\r\n        3) noscript\r\n        4) loading\r\n        5) stale\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n129) 1) &quot;zrank&quot;\r\n     2) (integer) 3\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n130) 1) &quot;readwrite&quot;\r\n     2) (integer) 1\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n131) 1) &quot;hget&quot;\r\n     2) (integer) 3\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n132) 1) &quot;bitcount&quot;\r\n     2) (integer) -2\r\n     3) 1) readonly\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n133) 1) &quot;randomkey&quot;\r\n     2) (integer) 1\r\n     3) 1) readonly\r\n        2) random\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n134) 1) &quot;restore-asking&quot;\r\n     2) (integer) -4\r\n     3) 1) write\r\n        2) denyoom\r\n        3) admin\r\n        4) asking\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n135) 1) &quot;time&quot;\r\n     2) (integer) 1\r\n     3) 1) readonly\r\n        2) random\r\n        3) fast\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n136) 1) &quot;zrevrank&quot;\r\n     2) (integer) 3\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n137) 1) &quot;hset&quot;\r\n     2) (integer) 4\r\n     3) 1) write\r\n        2) denyoom\r\n        3) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n138) 1) &quot;sinter&quot;\r\n     2) (integer) -2\r\n     3) 1) readonly\r\n        2) sort_for_script\r\n     4) (integer) 1\r\n     5) (integer) -1\r\n     6) (integer) 1\r\n139) 1) &quot;dump&quot;\r\n     2) (integer) 2\r\n     3) 1) readonly\r\n        2) admin\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n140) 1) &quot;move&quot;\r\n     2) (integer) 3\r\n     3) 1) write\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n141) 1) &quot;strlen&quot;\r\n     2) (integer) 2\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n142) 1) &quot;unwatch&quot;\r\n     2) (integer) 1\r\n     3) 1) readonly\r\n        2) noscript\r\n        3) fast\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n143) 1) &quot;lpop&quot;\r\n     2) (integer) 2\r\n     3) 1) write\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n144) 1) &quot;smembers&quot;\r\n     2) (integer) 2\r\n     3) 1) readonly\r\n        2) sort_for_script\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n145) 1) &quot;msetnx&quot;\r\n     2) (integer) -3\r\n     3) 1) write\r\n        2) denyoom\r\n     4) (integer) 1\r\n     5) (integer) -1\r\n     6) (integer) 2\r\n146) 1) &quot;pfadd&quot;\r\n     2) (integer) -2\r\n     3) 1) write\r\n        2) denyoom\r\n        3) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n147) 1) &quot;zadd&quot;\r\n     2) (integer) -4\r\n     3) 1) write\r\n        2) denyoom\r\n        3) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n148) 1) &quot;lastsave&quot;\r\n     2) (integer) 1\r\n     3) 1) readonly\r\n        2) random\r\n        3) fast\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n149) 1) &quot;exec&quot;\r\n     2) (integer) 1\r\n     3) 1) noscript\r\n        2) skip_monitor\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n150) 1) &quot;sismember&quot;\r\n     2) (integer) 3\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n151) 1) &quot;debug&quot;\r\n     2) (integer) -2\r\n     3) 1) admin\r\n        2) noscript\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n152) 1) &quot;slowlog&quot;\r\n     2) (integer) -2\r\n     3) 1) readonly\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n153) 1) &quot;hexists&quot;\r\n     2) (integer) 3\r\n     3) 1) readonly\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n154) 1) &quot;eval&quot;\r\n     2) (integer) -3\r\n     3) 1) noscript\r\n        2) movablekeys\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n155) 1) &quot;smove&quot;\r\n     2) (integer) 4\r\n     3) 1) write\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 2\r\n     6) (integer) 1\r\n156) 1) &quot;multi&quot;\r\n     2) (integer) 1\r\n     3) 1) readonly\r\n        2) noscript\r\n        3) fast\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n157) 1) &quot;sdiff&quot;\r\n     2) (integer) -2\r\n     3) 1) readonly\r\n        2) sort_for_script\r\n     4) (integer) 1\r\n     5) (integer) -1\r\n     6) (integer) 1\r\n158) 1) &quot;hscan&quot;\r\n     2) (integer) -3\r\n     3) 1) readonly\r\n        2) random\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n159) 1) &quot;brpoplpush&quot;\r\n     2) (integer) 4\r\n     3) 1) write\r\n        2) denyoom\r\n        3) noscript\r\n     4) (integer) 1\r\n     5) (integer) 2\r\n     6) (integer) 1\r\n160) 1) &quot;script&quot;\r\n     2) (integer) -2\r\n     3) 1) readonly\r\n        2) admin\r\n        3) noscript\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n161) 1) &quot;keys&quot;\r\n     2) (integer) 2\r\n     3) 1) readonly\r\n        2) sort_for_script\r\n     4) (integer) 0\r\n     5) (integer) 0\r\n     6) (integer) 0\r\n162) 1) &quot;hdel&quot;\r\n     2) (integer) -3\r\n     3) 1) write\r\n        2) fast\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n163) 1) &quot;hvals&quot;\r\n     2) (integer) 2\r\n     3) 1) readonly\r\n        2) sort_for_script\r\n     4) (integer) 1\r\n     5) (integer) 1\r\n     6) (integer) 1\r\n```',0,9),(182,1,72,1,'Redis Command Count 命令','','',1502294400,'### Redis Command Count 命令 - 获取 Redis 命令总数\r\n\r\n------------\r\n\r\nRedis Command Count 命令用于统计 redis 命令的个数。\r\n\r\n#### 语法\r\nredis Command Count 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; COMMAND COUNT\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.8.13\r\n\r\n#### 返回值\r\nredis 命令数。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; COMMAND COUNT\r\n(integer) 163\r\n```',0,10),(183,1,72,1,'Redis Command Getkeys 命令','','',1502294400,'### Redis Command Getkeys 命令 - 获取给定命令的所有键\r\n\r\n------------\r\n\r\nRedis Command Getkeys 命令用于获取所有 key。\r\n\r\n#### 语法\r\nredis Command Getkeys 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; COMMAND GETKEYS\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.8.13\r\n\r\n#### 返回值\r\nkey 的列表。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; COMMAND GETKEYS MSET a b c d e f \r\n1) &quot;a&quot;\r\n2) &quot;c&quot;\r\n3) &quot;e&quot;\r\n```',0,11),(184,1,72,1,'Redis Time 命令','','',1502294400,'### Redis Time 命令 - 返回当前服务器时间\r\n\r\n------------\r\n\r\nRedis Time 命令用于返回当前服务器时间。\r\n\r\n#### 语法\r\nredis Time 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; TIME \r\n```\r\n#### 可用版本\r\n\\&gt;= 2.6.0\r\n\r\n#### 返回值\r\n一个包含两个字符串的列表： 第一个字符串是当前时间(以 UNIX 时间戳格式表示)，而第二个字符串是当前这一秒钟已经逝去的微秒数。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; TIME \r\n1) &quot;1410856598&quot;\r\n2) &quot;928370&quot;\r\n```',0,12),(185,1,72,1,'Redis Command Info 命令','','',1502294400,'### Redis Command Info 命令 - 获取指定 Redis 命令描述的数组\r\n\r\n------------\r\n\r\nRedis Command Info 命令用于获取 redis 命令的描述信息。\r\n\r\n#### 语法\r\nredis Command Info 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; COMMAND INFO command-name [command-name ...] \r\n```\r\n#### 可用版本\r\n\\&gt;= 2.8.13\r\n\r\n#### 返回值\r\n命令描述信息的嵌套列表。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; COMMAND INFO get set eval \r\n1) 1) &quot;get&quot;\r\n   2) (integer) 2\r\n   3) 1) readonly\r\n      2) fast\r\n   4) (integer) 1\r\n   5) (integer) 1\r\n   6) (integer) 1\r\n2) 1) &quot;set&quot;\r\n   2) (integer) -3\r\n   3) 1) write\r\n      2) denyoom\r\n   4) (integer) 1\r\n   5) (integer) 1\r\n   6) (integer) 1\r\n3) 1) &quot;eval&quot;\r\n   2) (integer) -3\r\n   3) 1) noscript\r\n      2) movablekeys\r\n   4) (integer) 0\r\n   5) (integer) 0\r\n   6) (integer) 0\r\nredis&gt; COMMAND INFO foo evalsha config bar\r\n1) (nil)\r\n2) 1) &quot;evalsha&quot;\r\n   2) (integer) -3\r\n   3) 1) noscript\r\n      2) movablekeys\r\n   4) (integer) 0\r\n   5) (integer) 0\r\n   6) (integer) 0\r\n3) 1) &quot;config&quot;\r\n   2) (integer) -2\r\n   3) 1) readonly\r\n      2) admin\r\n      3) stale\r\n   4) (integer) 0\r\n   5) (integer) 0\r\n   6) (integer) 0\r\n4) (nil)\r\n```',0,13),(186,1,72,1,'Redis Config Get 命令','','',1502294400,'### Redis Config Get 命令 - 获取指定配置参数的值\r\n\r\n------------\r\n\r\nRedis Config Get 命令用于获取 redis 服务的配置参数。\r\n\r\n在 Redis 2.4 版本中， 有部分参数没有办法用 CONFIG GET 访问，但是在最新的 Redis 2.6 版本中，所有配置参数都已经可以用 CONFIG GET 访问了。\r\n\r\n#### 语法\r\nredis Config Get 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; CONFIG GET parameter\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n给定配置参数的值。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; config get *max-*-entries* \r\n1) &quot;hash-max-zipmap-entries&quot;\r\n2) &quot;512&quot;\r\n3) &quot;list-max-ziplist-entries&quot;\r\n4) &quot;512&quot;\r\n5) &quot;set-max-intset-entries&quot;\r\n6) &quot;512&quot;\r\n```',0,14),(187,1,72,1,'Redis Config rewrite 命令','','',1502294400,'### Redis Config rewrite 命令 - 对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写\r\n\r\n------------\r\n\r\nRedis Config rewrite 命令对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写。\r\n\r\nCONFIG SET 命令可以对服务器的当前配置进行修改， 而修改后的配置可能和 redis.conf 文件中所描述的配置不一样， CONFIG REWRITE 的作用就是通过尽可能少的修改， 将服务器当前所使用的配置记录到 redis.conf 文件中。\r\n\r\n#### 语法\r\nredis Config rewrite 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; CONFIG REWRITE parameter\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.8.0\r\n\r\n#### 返回值\r\n一个状态值：如果配置重写成功则返回 OK ，失败则返回一个错误。\r\n\r\n#### 实例\r\n以下是执行 CONFIG REWRITE 前， 被载入到 Redis 服务器的 redis.conf 文件中关于 appendonly 选项的设置：\r\n```shell\r\n# ... 其他选项\r\n \r\nappendonly no\r\n \r\n# ... 其他选项\r\n```\r\n在执行以下命令之后：\r\n\r\n```shell\r\n127.0.0.1:6379&gt; CONFIG GET appendonly           # appendonly 处于关闭状态\r\n1) &quot;appendonly&quot;\r\n2) &quot;no&quot;\r\n \r\n127.0.0.1:6379&gt; CONFIG SET appendonly yes       # 打开 appendonly\r\nOK\r\n \r\n127.0.0.1:6379&gt; CONFIG GET appendonly\r\n1) &quot;appendonly&quot;\r\n2) &quot;yes&quot;\r\n \r\n127.0.0.1:6379&gt; CONFIG REWRITE                  # 将 appendonly 的修改写入到 redis.conf 中\r\nOK\r\n```\r\n重写后的 redis.conf 文件中的 appendonly 选项将被改写：\r\n```shell\r\n# ... 其他选项\r\n \r\nappendonly yes\r\n \r\n# ... 其他选项\r\n```',0,15),(188,1,72,1,'Redis Config Set 命令','','',1502294400,'### Redis Config Set 命令 - 修改 redis 配置参数，无需重启\r\n\r\n------------\r\n\r\nRedis Config Set 命令可以动态地调整 Redis 服务器的配置(configuration)而无须重启。\r\n\r\n你可以使用它修改配置参数，或者改变 Redis 的持久化(Persistence)方式。\r\n\r\n#### 语法\r\nredis Config Set 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; CONFIG Set parameter value \r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n当设置成功时返回 OK ，否则返回一个错误。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; CONFIG GET slowlog-max-len\r\n1) &quot;slowlog-max-len&quot;\r\n2) &quot;1024&quot;\r\n \r\nredis 127.0.0.1:6379&gt; CONFIG SET slowlog-max-len 10086\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; CONFIG GET slowlog-max-len\r\n1) &quot;slowlog-max-len&quot;\r\n2) &quot;10086&quot;\r\n```',0,16),(189,1,72,1,'Redis Config Resetstat 命令','','',1502294400,'### Redis Config Resetstat 命令 - 重置 INFO 命令中的某些统计数据\r\n\r\n------------\r\n\r\nRedis Config Resetstat 命令用于重置 INFO 命令中的某些统计数据，包括：\r\n\r\n`Keyspace hits` (键空间命中次数)\r\n`Keyspace misses` (键空间不命中次数)\r\n`Number of commands processed` (执行命令的次数)\r\n`Number of connections received` (连接服务器的次数)\r\n`Number of expired keys `(过期key的数量)\r\n`Number of rejected connections` (被拒绝的连接数量)\r\n`Latest fork(2) time`(最后执行 fork(2) 的时间)\r\n`The aof_delayed_fsync counter`(aof_delayed_fsync 计数器的值)\r\n#### 语法\r\nredis Config Resetstat 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; CONFIG RESETSTAT\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.0.0\r\n\r\n#### 返回值\r\n总是返回 OK 。\r\n\r\n#### 实例\r\n重置前 INFO 命令输出信息：\r\n```shell\r\nredis 127.0.0.1:6379&gt; INFO\r\n# Server\r\nredis_version:2.5.3\r\nredis_git_sha1:d0407c2d\r\nredis_git_dirty:0\r\narch_bits:32\r\nmultiplexing_api:epoll\r\ngcc_version:4.6.3\r\nprocess_id:11095\r\nrun_id:ef1f6b6c7392e52d6001eaf777acbe547d1192e2\r\ntcp_port:6379\r\nuptime_in_seconds:6\r\nuptime_in_days:0\r\nlru_clock:1205426\r\n \r\n# Clients\r\nconnected_clients:1\r\nclient_longest_output_list:0\r\nclient_biggest_input_buf:0\r\nblocked_clients:0\r\n \r\n# Memory\r\nused_memory:331076\r\nused_memory_human:323.32K\r\nused_memory_rss:1568768\r\nused_memory_peak:293424\r\nused_memory_peak_human:286.55K\r\nused_memory_lua:16384\r\nmem_fragmentation_ratio:4.74\r\nmem_allocator:jemalloc-2.2.5\r\n \r\n# Persistence\r\nloading:0\r\naof_enabled:0\r\nchanges_since_last_save:0\r\nbgsave_in_progress:0\r\nlast_save_time:1333260015\r\nlast_bgsave_status:ok\r\nbgrewriteaof_in_progress:0\r\n \r\n# Stats\r\ntotal_connections_received:1\r\ntotal_commands_processed:0\r\ninstantaneous_ops_per_sec:0\r\nrejected_connections:0\r\nexpired_keys:0\r\nevicted_keys:0\r\nkeyspace_hits:0\r\nkeyspace_misses:0\r\npubsub_channels:0\r\npubsub_patterns:0\r\nlatest_fork_usec:0\r\n \r\n# Replication\r\nrole:master\r\nconnected_slaves:0\r\n \r\n# CPU\r\nused_cpu_sys:0.01\r\nused_cpu_user:0.00\r\nused_cpu_sys_children:0.00\r\nused_cpu_user_children:0.00\r\n \r\n# Keyspace\r\ndb0:keys=20,expires=0\r\n \r\n \r\n&lt;p&gt;执行重置命令：&lt;/p&gt;\r\n&lt;pre&gt;\r\nredis 127.0.0.1:6379&gt; CONFIG RESETSTAT\r\nOK\r\n```\r\n重置后查看 INFO 命令输出信息：\r\n```shell\r\nredis 127.0.0.1:6379&gt; INFO\r\n# Server\r\nredis_version:2.5.3\r\nredis_git_sha1:d0407c2d\r\nredis_git_dirty:0\r\narch_bits:32\r\nmultiplexing_api:epoll\r\ngcc_version:4.6.3\r\nprocess_id:11095\r\nrun_id:ef1f6b6c7392e52d6001eaf777acbe547d1192e2\r\ntcp_port:6379\r\nuptime_in_seconds:134\r\nuptime_in_days:0\r\nlru_clock:1205438\r\n \r\n# Clients\r\nconnected_clients:1\r\nclient_longest_output_list:0\r\nclient_biggest_input_buf:0\r\nblocked_clients:0\r\n \r\n# Memory\r\nused_memory:331076\r\nused_memory_human:323.32K\r\nused_memory_rss:1568768\r\nused_memory_peak:330280\r\nused_memory_peak_human:322.54K\r\nused_memory_lua:16384\r\nmem_fragmentation_ratio:4.74\r\nmem_allocator:jemalloc-2.2.5\r\n \r\n# Persistence\r\nloading:0\r\naof_enabled:0\r\nchanges_since_last_save:0\r\nbgsave_in_progress:0\r\nlast_save_time:1333260015\r\nlast_bgsave_status:ok\r\nbgrewriteaof_in_progress:0\r\n \r\n# Stats\r\ntotal_connections_received:0\r\ntotal_commands_processed:1\r\ninstantaneous_ops_per_sec:0\r\nrejected_connections:0\r\nexpired_keys:0\r\nevicted_keys:0\r\nkeyspace_hits:0\r\nkeyspace_misses:0\r\npubsub_channels:0\r\npubsub_patterns:0\r\nlatest_fork_usec:0\r\n \r\n# Replication\r\nrole:master\r\nconnected_slaves:0\r\n \r\n# CPU\r\nused_cpu_sys:0.05\r\nused_cpu_user:0.02\r\nused_cpu_sys_children:0.00\r\nused_cpu_user_children:0.00\r\n \r\n# Keyspace\r\ndb0:keys=20,expires=0\r\n```',0,17),(190,1,72,1,'Redis Dbsize 命令','','',1502294400,'### Redis Dbsize 命令 - 返回当前数据库的 key 的数量\r\n\r\n------------\r\n\r\nRedis Dbsize 命令用于返回当前数据库的 key 的数量。\r\n\r\n#### 语法\r\nredis DBSIZE 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; DBSIZE\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n当前数据库的 key 的数量。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; DBSIZE\r\n(integer) 5\r\n \r\nredis 127.0.0.1:6379&gt; SET new_key &quot;hello_moto&quot;     # 增加一个 key 试试\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; DBSIZE\r\n(integer) 6\r\n```',0,18),(191,1,72,1,'Redis Debug Object 命令','','',1502294400,'### Redis Debug Object 命令 - 获取 key 的调试信息\r\n\r\n------------\r\n\r\nRedis Debug Object 命令是一个调试命令，它不应被客户端所使用。\r\n\r\n#### 语法\r\nredis Debug Object 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; DEBUG OBJECT key\r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n当 key 存在时，返回有关信息。 当 key 不存在时，返回一个错误。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; DEBUG OBJECT my_pc\r\nValue at:0xb6838d20 refcount:1 encoding:raw serializedlength:9 lru:283790 lru_seconds_idle:150\r\n \r\nredis 127.0.0.1:6379&gt; DEBUG OBJECT your_mac\r\n(error) ERR no such key\r\n```',0,19),(192,1,72,1,'Redis Debug Segfault 命令','','',1502294400,'### Redis Debug Segfault 命令 - 让 Redis 服务崩溃\r\n\r\n------------\r\n\r\nRedis Debug Segfault 命令执行一个非法的内存访问从而让 Redis 崩溃，仅在开发时用于 BUG 调试。\r\n\r\n#### 语法\r\nredis Debug Segfault 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; DEBUG SEGFAULT \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n无\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; DEBUG SEGFAULT \r\nCould not connect to Redis at 127.0.0.1:6379: Connection refused\r\nnot connected&gt;\r\n```',0,20),(193,1,72,1,'Redis Flushall 命令','','',1502294400,'### Redis Flushall 命令 - 删除所有数据库的所有key\r\n\r\n------------\r\n\r\nRedis Flushall 命令用于清空整个 Redis 服务器的数据(删除所有数据库的所有 key )。\r\n\r\n#### 语法\r\nredis Flushall 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; FLUSHALL \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n总是返回 OK 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; DBSIZE            # 0 号数据库的 key 数量\r\n(integer) 9\r\n \r\nredis 127.0.0.1:6379&gt; SELECT 1          # 切换到 1 号数据库\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; DBSIZE         # 1 号数据库的 key 数量\r\n(integer) 6\r\n \r\nredis 127.0.0.1:6379&gt; flushall       # 清空所有数据库的所有 key\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; DBSIZE         # 不但 1 号数据库被清空了\r\n(integer) 0\r\n \r\nredis 127.0.0.1:6379&gt; SELECT 0       # 0 号数据库(以及其他所有数据库)也一样\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; DBSIZE\r\n(integer) 0\r\n```',0,21),(194,1,72,1,'Redis Flushdb 命令','','',1502294400,'### Redis Flushdb 命令 - 删除当前数据库的所有key\r\n\r\n------------\r\n\r\nRedis Flushdb 命令用于清空当前数据库中的所有 key。\r\n\r\n#### 语法\r\nredis Flushdb 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; FLUSHDB \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n总是返回 OK 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; DBSIZE    # 清空前的 key 数量\r\n(integer) 4\r\n \r\nredis 127.0.0.1:6379&gt; FLUSHDB\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; DBSIZE    # 清空后的 key 数量\r\n(integer) 0\r\n```',0,22),(195,1,72,1,'Redis Info 命令','','',1502294400,'### Redis Info 命令 - 获取 Redis 服务器的各种信息和统计数值\r\n\r\n------------\r\n\r\nRedis Info 命令以一种易于理解和阅读的格式，返回关于 Redis 服务器的各种信息和统计数值。\r\n\r\n通过给定可选的参数 section ，可以让命令只返回某一部分的信息：\r\n\r\nserver : 一般 Redis 服务器信息，包含以下域：\r\n\r\n`redis_version` : Redis 服务器版本\r\n\r\n`redis_git_sha1` : Git SHA1\r\n\r\n`redis_git_dirty` : Git dirty flag\r\n\r\n`os` : Redis 服务器的宿主操作系统\r\n\r\n`arch_bits `: 架构（32 或 64 位）\r\n\r\n`multiplexing_api` : Redis 所使用的事件处理机制\r\n\r\n`gcc_version` : 编译 Redis 时所使用的 GCC 版本\r\n\r\n`process_id `: 服务器进程的 PID\r\n\r\n`run_id `: Redis 服务器的随机标识符（用于 Sentinel 和集群）\r\n\r\n`tcp_port` : TCP/IP 监听端口\r\n\r\n`uptime_in_seconds `: 自 Redis 服务器启动以来，经过的秒数\r\n\r\n`uptime_in_days` : 自 Redis 服务器启动以来，经过的天数\r\n\r\n`lru_clock` : 以分钟为单位进行自增的时钟，用于 LRU 管理\r\n\r\n`clients `: 已连接客户端信息，包含以下域：\r\n\r\n`connected_clients` : 已连接客户端的数量（不包括通过从属服务器连接的客户端）\r\n\r\n`client_longest_output_list `: 当前连接的客户端当中，最长的输出列表\r\n\r\n`client_longest_input_buf` : 当前连接的客户端当中，最大输入缓存\r\n\r\n`blocked_clients `: 正在等待阻塞命令（BLPOP、BRPOP、BRPOPLPUSH）的客户端的数量\r\n\r\n`memory` : 内存信息，包含以下域：\r\n\r\n`used_memory `: 由 Redis 分配器分配的内存总量，以字节（byte）为单位\r\n\r\n`used_memory_human `: 以人类可读的格式返回 Redis 分配的内存总量\r\n\r\n`used_memory_rss `: 从操作系统的角度，返回 Redis 已分配的内存总量（俗称常驻集大小）。这个值和 top 、 ps 等命令的输出一致。\r\n\r\n\r\n`used_memory_peak `: Redis 的内存消耗峰值（以字节为单位）\r\n\r\n`used_memory_peak_human `: 以人类可读的格式返回 Redis 的内存消耗峰值\r\n\r\n`used_memory_lua `: Lua 引擎所使用的内存大小（以字节为单位）\r\n\r\n`mem_fragmentation_ratio` : used_memory_rss 和 used_memory 之间的比率\r\n\r\n`mem_allocator` : 在编译时指定的， Redis 所使用的内存分配器。可以是 libc 、 jemalloc 或者 tcmalloc 。\r\n在理想情况下， used_memory_rss 的值应该只比 used_memory 稍微高一点儿。\r\n\r\n当 rss &gt; used ，且两者的值相差较大时，表示存在（内部或外部的）内存碎片。\r\n\r\n内存碎片的比率可以通过 mem_fragmentation_ratio 的值看出。\r\n\r\n当 used &gt; rss 时，表示 Redis 的部分内存被操作系统换出到交换空间了，在这种情况下，操作可能会产生明显的延迟。\r\n\r\n当 Redis 释放内存时，分配器可能会，也可能不会，将内存返还给操作系统。\r\n\r\n如果 Redis 释放了内存，却没有将内存返还给操作系统，那么 used_memory 的值可能和操作系统显示的 Redis 内存占用并不一致。\r\n\r\n查看 used_memory_peak 的值可以验证这种情况是否发生。\r\n\r\n`persistence` : RDB 和 AOF 的相关信息\r\n\r\n`stats` : 一般统计信息\r\n\r\n`replication `: 主/从复制信息\r\n\r\n`cpu` : CPU 计算量统计信息\r\n\r\n`commandstat`s : Redis 命令统计信息\r\n\r\n`cluster` : Redis 集群信息\r\n\r\n`keyspace `: 数据库相关的统计信息\r\n#### 语法\r\nredis Info 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; INFO [section] \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n字符串，文本行的集合。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; INFO\r\n# Server\r\nredis_version:2.5.9\r\nredis_git_sha1:473f3090\r\nredis_git_dirty:0\r\nos:Linux 3.3.7-1-ARCH i686\r\narch_bits:32\r\nmultiplexing_api:epoll\r\ngcc_version:4.7.0\r\nprocess_id:8104\r\nrun_id:bc9e20c6f0aac67d0d396ab950940ae4d1479ad1\r\ntcp_port:6379\r\nuptime_in_seconds:7\r\nuptime_in_days:0\r\nlru_clock:1680564\r\n \r\n# Clients\r\nconnected_clients:1\r\nclient_longest_output_list:0\r\nclient_biggest_input_buf:0\r\nblocked_clients:0\r\n \r\n# Memory\r\nused_memory:439304\r\nused_memory_human:429.01K\r\nused_memory_rss:13897728\r\nused_memory_peak:401776\r\nused_memory_peak_human:392.36K\r\nused_memory_lua:20480\r\nmem_fragmentation_ratio:31.64\r\nmem_allocator:jemalloc-3.0.0\r\n \r\n# Persistence\r\nloading:0\r\nrdb_changes_since_last_save:0\r\nrdb_bgsave_in_progress:0\r\nrdb_last_save_time:1338011402\r\nrdb_last_bgsave_status:ok\r\nrdb_last_bgsave_time_sec:-1\r\nrdb_current_bgsave_time_sec:-1\r\naof_enabled:0\r\naof_rewrite_in_progress:0\r\naof_rewrite_scheduled:0\r\naof_last_rewrite_time_sec:-1\r\naof_current_rewrite_time_sec:-1\r\n \r\n# Stats\r\ntotal_connections_received:1\r\ntotal_commands_processed:0\r\ninstantaneous_ops_per_sec:0\r\nrejected_connections:0\r\nexpired_keys:0\r\nevicted_keys:0\r\nkeyspace_hits:0\r\nkeyspace_misses:0\r\npubsub_channels:0\r\npubsub_patterns:0\r\nlatest_fork_usec:0\r\n \r\n# Replication\r\nrole:master\r\nconnected_slaves:0\r\n \r\n# CPU\r\nused_cpu_sys:0.03\r\nused_cpu_user:0.01\r\nused_cpu_sys_children:0.00\r\nused_cpu_user_children:0.00\r\n \r\n# Keyspace\r\n```',0,23),(196,1,72,1,'Redis Lastsave 命令','','',1502294400,'### Redis Lastsave 命令 - 返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示\r\n\r\n------------\r\n\r\nRedis Lastsave 命令返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示。\r\n\r\n#### 语法\r\nredis Lastsave 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; LASTSAVE \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n字符串，文本行的集合。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; LASTSAVE \r\n(integer) 1410853592\r\n```',0,24);
INSERT INTO `card_manual` VALUES (197,1,72,1,'Redis Monitor 命令','','',1502294400,'### Redis Monitor 命令 - 实时打印出 Redis 服务器接收到的命令，调试用\r\n\r\n------------\r\n\r\nRedis Monitor 命令用于实时打印出 Redis 服务器接收到的命令，调试用。\r\n\r\n#### 语法\r\nredis Monitor 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; MONITOR \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n总是返回 OK 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; MONITOR \r\nOK\r\n1410855382.370791 [0 127.0.0.1:60581] &quot;info&quot;\r\n1410855404.062722 [0 127.0.0.1:60581] &quot;get&quot; &quot;a&quot;\r\n```',0,25),(198,1,72,1,'Redis Role 命令','','',1502294400,'### Redis Role 命令 - 返回主从实例所属的角色\r\n\r\n------------\r\n\r\nRedis Role 命令查看主从实例所属的角色，角色有master, slave, sentinel。\r\n\r\n#### 语法\r\nredis Role 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; ROLE \r\n```\r\n#### 可用版本\r\n\\&gt;= 2.8.12\r\n\r\n#### 返回值\r\n返回一个数组：第一个参数是 master, slave, sentinel 三个中的一个。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; ROLE \r\n1) &quot;master&quot;\r\n2) (integer) 0\r\n3) (empty list or set)\r\nredis&gt; \r\n```',0,26),(199,1,72,1,'Redis Save 命令','','',1502294400,'### Redis Save 命令 - 异步保存数据到硬盘\r\n\r\n------------\r\n\r\nRedis Save 命令执行一个同步保存操作，将当前 Redis 实例的所有数据快照(snapshot)以 RDB 文件的形式保存到硬盘。\r\n\r\n#### 语法\r\nredis Save 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SAVE \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n保存成功时返回 OK 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SAVE \r\nOK\r\n```',0,27),(200,1,72,1,'Redis Shutdown 命令','','',1502294400,'### Redis Shutdown 命令 - 异步保存数据到硬盘，并关闭服务器\r\n\r\n------------\r\n\r\nRedis Shutdown 命令执行以下操作：\r\n\r\n- 停止所有客户端\r\n- 如果有至少一个保存点在等待，执行 SAVE 命令\r\n- 如果 AOF 选项被打开，更新 AOF 文件\r\n- 关闭 redis 服务器(server)\r\n\r\n语法\r\nredis Shutdown 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SHUTDOWN [NOSAVE] [SAVE] \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n执行失败时返回错误。 执行成功时不返回任何信息，服务器和客户端的连接断开，客户端自动退出。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; PING\r\nPONG\r\n \r\nredis 127.0.0.1:6379&gt; SHUTDOWN\r\n \r\n$\r\n \r\n$ redis\r\nCould not connect to Redis at: Connection refused\r\nnot connected&gt;\r\n```',0,28),(201,1,72,1,'Redis Slaveof 命令','','',1502294400,'### Redis Slaveof 命令 - 将当前服务器转变为指定服务器的从属服务器(slave server)\r\n\r\n------------\r\n\r\nRedis Slaveof 命令可以将当前服务器转变为指定服务器的从属服务器(slave server)。\r\n\r\n如果当前服务器已经是某个主服务器(master server)的从属服务器，那么执行 SLAVEOF host port 将使当前服务器停止对旧主服务器的同步，丢弃旧数据集，转而开始对新主服务器进行同步。\r\n\r\n另外，对一个从属服务器执行命令 SLAVEOF NO ONE 将使得这个从属服务器关闭复制功能，并从从属服务器转变回主服务器，原来同步所得的数据集不会被丢弃。\r\n\r\n利用『 SLAVEOF NO ONE 不会丢弃同步所得数据集』这个特性，可以在主服务器失败的时候，将从属服务器用作新的主服务器，从而实现无间断运行。\r\n\r\n#### 语法\r\nredis Slaveof 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SLAVEOF host port \r\n``` \r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n总是返回 OK 。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SLAVEOF 127.0.0.1 6379\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; SLAVEOF NO ONE\r\nOK\r\n```',0,29),(202,1,72,1,'Redis Showlog 命令','','',1502294400,'### Redis Showlog 命令 - 管理 redis 的慢日志\r\n\r\n------------\r\n\r\nRedis Showlog 是 Redis 用来记录查询执行时间的日志系统。\r\n\r\n查询执行时间指的是不包括像客户端响应(talking)、发送回复等 IO 操作，而单单是执行一个查询命令所耗费的时间。\r\n\r\n另外，slow log 保存在内存里面，读写速度非常快，因此你可以放心地使用它，不必担心因为开启 slow log 而损害 Redis 的速度。\r\n\r\n#### 语法\r\nredis Showlog 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SLOWLOG subcommand [argument]\r\n```\r\n#### 可用版本\r\n\\&gt;= 2.2.12\r\n\r\n#### 返回值\r\n取决于不同命令，返回不同的值。\r\n\r\n#### 实例\r\n查看日志信息：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; slowlog get 2\r\n1) 1) (integer) 14\r\n   2) (integer) 1309448221\r\n   3) (integer) 15\r\n   4) 1) &quot;ping&quot;\r\n2) 1) (integer) 13\r\n   2) (integer) 1309448128\r\n   3) (integer) 30\r\n   4) 1) &quot;slowlog&quot;\r\n      2) &quot;get&quot;\r\n      3) &quot;100&quot;\r\n```\r\n查看当前日志的数量：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SLOWLOG LEN\r\n(integer) 14\r\n```\r\n使用命令 SLOWLOG RESET 可以清空 slow log 。\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SLOWLOG LEN\r\n(integer) 14\r\n \r\nredis 127.0.0.1:6379&gt; SLOWLOG RESET\r\nOK\r\n \r\nredis 127.0.0.1:6379&gt; SLOWLOG LEN\r\n(integer) 0\r\n```',0,30),(203,1,72,1,'Redis Sync 命令','','',1502294400,'### Redis Sync 命令 - 用于复制功能(replication)的内部命令\r\n\r\n------------\r\n\r\nRedis Sync 命令用于同步主从服务器。\r\n\r\n#### 语法\r\nredis SYNC 命令基本语法如下：\r\n\r\n```shell\r\nredis 127.0.0.1:6379&gt; SYNC  \r\n```\r\n#### 可用版本\r\n\\&gt;= 1.0.0\r\n\r\n#### 返回值\r\n不明确。\r\n\r\n#### 实例\r\n```shell\r\nredis 127.0.0.1:6379&gt; SYNC \r\nEntering slave output mode...  (press Ctrl-C to quit)\r\nSYNC with master, discarding 18 bytes of bulk transfer...\r\nSYNC done. Logging commands from master.\r\n&quot;PING&quot;\r\n&quot;PING&quot;\r\n&quot;PING&quot;\r\n&quot;PING&quot;\r\n```',1,31);
/*!40000 ALTER TABLE `card_manual` ENABLE KEYS */;

#
# Structure for table "card_message"
#

DROP TABLE IF EXISTS `card_message`;
CREATE TABLE `card_message` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `theme_id` int(11) NOT NULL DEFAULT '0' COMMENT '评论主题',
  `pid` int(11) NOT NULL DEFAULT '0' COMMENT '上一级评论ID',
  `to_user` varchar(255) NOT NULL DEFAULT '' COMMENT '评论|留言者',
  `up_user` varchar(255) NOT NULL DEFAULT '' COMMENT '评论|留言接收',
  `content` text NOT NULL COMMENT '内容',
  `optime` int(11) NOT NULL DEFAULT '0' COMMENT '创建时间',
  `state` int(11) NOT NULL DEFAULT '0' COMMENT '状态：1，审核，2，未审核',
  `like` int(11) NOT NULL DEFAULT '0' COMMENT '喜欢',
  `type` int(11) NOT NULL DEFAULT '0' COMMENT '类型：1，留言；2，评论',
  `ip` varchar(255) NOT NULL DEFAULT '' COMMENT 'IP',
  `email` varchar(255) NOT NULL DEFAULT '' COMMENT '邮箱',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='留言评论';

#
# Data for table "card_message"
#

/*!40000 ALTER TABLE `card_message` DISABLE KEYS */;
/*!40000 ALTER TABLE `card_message` ENABLE KEYS */;

#
# Structure for table "card_nav"
#

DROP TABLE IF EXISTS `card_nav`;
CREATE TABLE `card_nav` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '菜单表',
  `pid` int(11) unsigned DEFAULT '0' COMMENT '所属菜单',
  `name` varchar(15) DEFAULT '' COMMENT '菜单名称',
  `mca` varchar(255) DEFAULT '' COMMENT '模块、控制器、方法',
  `ico` varchar(20) DEFAULT '' COMMENT 'font-awesome图标',
  `order_number` int(11) unsigned DEFAULT NULL COMMENT '排序',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=27 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='菜单表';

#
# Data for table "card_nav"
#

/*!40000 ALTER TABLE `card_nav` DISABLE KEYS */;
INSERT INTO `card_nav` VALUES (1,0,'系统设置','Admin/ShowNav/config','cog',2),(2,1,'菜单管理','Admin/Nav/index','',1),(3,0,'权限控制','Admin/ShowNav/rule','lock',3),(4,3,'权限管理','Admin/Rule/index','',1),(5,3,'用户组管理','Admin/Rule/group','',2),(6,3,'管理员列表','Admin/Rule/admin_user_list','',3),(9,1,'系统设置','Admin/Config/index','',2),(13,1,'系统日志','Admin/Config/log','',4),(15,0,'个人中心','Admin/ShowNav/user','user',1),(16,15,'基本资料','Admin/User/index','',1),(17,0,'前端资料','Admin/ShowNav/front','html5',4),(18,17,'图标字体','Admin/Front/font','',1),(19,1,'分类列表','Admin/Config/type','',3),(20,15,'通讯录','Admin/User/address','',2),(22,17,'颜色','Admin/Front/color','',2),(23,17,'手册','Admin/Front/manual','',3),(24,1,'友情链接','Admin/Config/link','',NULL),(25,0,'留言评论','Admin/showNav/message','comments',NULL),(26,25,'首页留言','Admin/Message/index','',NULL);
/*!40000 ALTER TABLE `card_nav` ENABLE KEYS */;

#
# Structure for table "card_type"
#

DROP TABLE IF EXISTS `card_type`;
CREATE TABLE `card_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `pid` int(11) NOT NULL DEFAULT '0' COMMENT '父级ID',
  `name` varchar(255) NOT NULL DEFAULT '' COMMENT '分类名称',
  `link` varchar(255) NOT NULL DEFAULT '' COMMENT '链接',
  `sort` int(11) NOT NULL DEFAULT '0' COMMENT '排序',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=73 DEFAULT CHARSET=utf8 COMMENT='分类表';

#
# Data for table "card_type"
#

/*!40000 ALTER TABLE `card_type` DISABLE KEYS */;
INSERT INTO `card_type` VALUES (1,0,'图标字体','',4),(3,1,'Font Awesome','http://fontawesome.io/icons/',1),(4,1,'Bootstarp设计','http://www.bootcss.com/p/font-awesome',5),(5,3,'4.7.0版新增41个全新的图标','',0),(6,3,'网页','',0),(7,3,'辅助功能','',0),(8,3,'手势','',0),(9,3,'运输','',0),(10,3,'性别','',0),(12,3,'文件类型','',0),(13,3,'可旋转','',0),(14,3,'表单','',0),(15,3,'支付','',0),(16,3,'图表','',0),(17,3,'货币','',0),(18,3,'文本编辑','',0),(19,3,'指示方向','',0),(20,3,'视频播放','',0),(21,3,'标志','',0),(22,3,'医疗','',0),(23,1,'Glyphicons','http://glyphicons.com/',6),(24,4,'3.0 版本中新增的图标','',0),(25,4,'适合 Web 应用的图标','',0),(26,4,'文本编辑器图标','',0),(27,4,'指示方向的图标','',0),(28,4,'视频播放器图标','',0),(29,4,'SNS图标','',0),(30,4,'医疗图标','',0),(31,0,'通讯录','',3),(32,31,'家族X','',0),(33,31,'家族Y','',0),(34,31,'同学','',0),(35,31,'朋友','',0),(36,31,'同事','',0),(37,0,'手册','',1),(38,37,'Reids教程','',0),(49,37,'Memcached教程','',0),(50,0,'链接','',2),(51,50,'前端','',2),(52,50,'后端','',3),(53,50,'数据库','',5),(55,50,'手册','',1),(56,50,'公司','',6),(57,50,'框架','',4),(58,38,'Redis 教程','',0),(59,38,'Redis 命令','',0),(60,38,'Redis 高级教程','',0),(61,38,'Redis 键(key)','',0),(62,38,'Redis 字符串(String)','',0),(63,38,'Redis 哈希(Hash)','',0),(64,38,'Redis 列表(List)','',0),(65,38,'Redis 集合(Set)','',0),(66,38,'Redis 有序集合(sorted set)','',0),(67,38,'Redis HyperLogLog','',0),(68,38,'Redis 发布订阅','',0),(69,38,'Redis 事务','',0),(70,38,'Redis 脚本','',0),(71,38,'Redis 连接','',0),(72,38,'Redis 服务器','',0);
/*!40000 ALTER TABLE `card_type` ENABLE KEYS */;
